---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=50&pageToken&part=contentDetails,%20snippet&playlistId=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 00:15:37 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 00:15:37 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=50&pageToken=CDIQAA&part=contentDetails,%20snippet&playlistId=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 00:15:37 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtTGlzdFJlc3BvbnNlIiwKICAiZXRhZyI6ICIyWEhwcmpUYzJ1MFBDVERyRWV2QlFuVDhmR0EiLAogICJwcmV2UGFnZVRva2VuIjogIkNESVFBUSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIjFkc1pRR19wZW1XTml5NGp1eE5naTZkRG0zVSIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNUZSVUUyTlVZMU9FTTNOa1F3TVVWRSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjAxOjU0WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJMaWwgQmFieSAtIFN1bSAyIFByb3ZlIChPZmZpY2lhbCBWaWRlbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTdHJlYW0vRG93bmxvYWQgXCJTdW0gMiBQcm92ZVwiOiBodHRwczovL3F1YWxpdHljb250cm9sLmxuay50by9TdW0yUHJvdmVcblxuRm9sbG93IExpbCBCYWJ5IEV2ZXJ5d2hlcmU6XG5odHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2xpbGJhYnlfMS9cbmh0dHBzOi8vdHdpdHRlci5jb20vbGlsYmFieTRQRlxuaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLzRwZmxpbGJhYnlcblxud3d3LmlhbWxpbGJhYnkuY29tXG5cbltWZXJzZSAxXVxuWW91IGtub3cgTGlsIENlZCwgdGhhdCdzIG15IG5pZ2dhLCBJIG1hZGUgaGltIGEgbWlsbGlvbmFpcmUsIGZ1Y2sgaXQsIHdlIGFsbCByaWNoXG5JIGFpbid0IHRyeW5hIGhhdmUgYmFiaWVzIHJpZ2h0IG5vdywgc28gd2UgZnVjayB3aXRoIHRoZSBydWJiZXIsIGJ1dCBJIGdvdCBhIHJhdyBiaXRjaFxuS25vdyB0aGlzIG1vbmV5IGJyaW5nIGVudnksIHlvdSBwcm9iYWJseSB3YW4nIGJlIG1lLCBidXQgYnJvLCB3ZSBjYW4ndCBiZWVmICdib3V0IG5vIHNtYWxsIHNoaXRcbk92ZXJzZWFzLCBnb3QgdGhlIGNyb3dkIGRvaW4nIG1vc2hwaXRzXG5DYW4ndCBiZWxpZXZlIHRoYXQgSSdtIHN0aWxsIGluIHRoZSAncGFydG1lbnRzXG5CdXNpbmVzc21hbiwgd2VudCBhbmQgZ290IG1lIGFuIG9mZmljZVxuTWlsbGlvbiBkb2xsYXIgZGVhbHMsIEkgZ2V0ICdlbSBvZnRlblxuTWUgYW5kIERvbGxhIHdhcyBzZXJ2aW4nIG9uIFNwYXJrcyBTdHJlZXRcbkhvdCBsaWwnIGppdCwgaGUgZ29uJyBzdGF5IHdpdGggdGhlIGNob3BzdGlja1xuSSBnb3Qgcm9iYmVkLCB0aGF0IHNoaXQgbWFkZSBtZSBhIG1vbnN0ZXJcbkV2aWN0aW9uIG5vdGljZSwgbXkgc2lzdGVyLCBteSBtYW1hc1xuTm93IHRoZXkgaG91c2VzIGFzIGJpZyBhcyB0aGV5IHdhbnQgJ2VtXG5JIGRvbmUgcmFuIHVwIHRoZW0gbW90aGVyZnVja2luJyBjb21tYXMsIGxvb2sgYXQgbGlsJyBEb21pbmlxdWVcbkxpdmluJyBsaWtlIHdlIGluIGEgcmFjZSwgSSBtaWdodCBjb21lIGluIGZpcnN0IG9yIHNlY29uZCwgYnV0IEkgd29uJ3QgZXZlciBiZSBsYXN0XG5MYXRlbHkgSSBiZWVuIGluIG15IGJhZ1xuQnJvIHRvbGQgbWUgZG9uJ3QgdGFrZSBteSBmb290IG9mZiB0aGUgZ2FzXG5JZiB0aGV5IGdpdmUgeW91IGEgaW5jaCwgZ28nbiBhbmQgdGFrZSB5b3UgYSBtaWxlXG5JJ21hIHNob290IGJ5IG15c2VsZiBsaWtlIGEgdGVjaG5pY2FsIGZvdWxcbkNpdHkgdG8gY2l0eSwgZ290IGdpcmxzIGdvaW4nIHdpbGRcbkJldHRlciBub3QgcmVhY2ggZm9yIG15IGNoYWluIHdoZW4gSSBqdW1wIGluIHRoZSBjcm93ZFxuTGFtYm8nIHNvIGxvdywgZ290dGEgc3F1YXRcbldlIGZpbmFsbHkgbWFkZSBpdCwgbGV0J3MgcG9wIHVzIHNvbWUgYm90dGxlc1xuSSB0b29rIHRoZSBsZWFkIGFuZCBsZXQgZXZlcnlvbmUgZm9sbG93XG5UaGV5IGtub3cgSSdtIHJ1bm5pbicgaXQgcmlnaHQgdG8gdGhlIGJhbmtcblRoZXkgd2FudCBtZSB0byBlYXNlIHVwLCBJIGRpZG4ndCBsZWF2ZSAnZW0gYW55IGJyZWF0aGluJyByb29tLCBzb3JyeSwgSSB0b2xkICdlbSwgXCJJIGNhbid0XCJcbkhlYXJkIHlvdSBhIHJhdCwgc28geW91IGtub3cgd2hhdCdzIGdvbicgaGFwcGVuIHdoZW5ldmVyIHdlIGNhdGNoIHlvdSwgSSBydW4gd2l0aCB0aGVtIHNuYWtlc1xuUGVlcCBhbGwgdGhlIG1vdmVzIEkgYmVlbiBtYWtpbicsIGJ5IHRpbWUgSSBnZXQgZm9ydHksIEkgZ290dGEgYmUgb25lIG9mIHRoZW0gZ3JlYXRzXG5XYXRjaCBob3cgSSBtb3ZlIHdpdGggdGhpcyBwYXBlciwgSSBrbm93IGlmIEkgc2xpcCB1cCBvbmUgdGltZSB0aGV5IGdvbicgdHJ5IHRvIGNvbWUgdGFrZSBpdFxuUmVhbCBhcyBpdCBnZXQgYW5kIHRoZXNlIG5pZ2dhcyBiZSBmYWtpbicsIEkgZG9uJ3Qgd2FudCB0aGV5IHZpYmVzLCBzbyB0aGV5IGhhbmQgSSBhaW4ndCBzaGFraW4nXG5TaGUgb24gdGhhdCAnNDIgc3RyYWlnaHQgd2l0aCBubyBjaGFzZXJcbkknbSB0cnluYSBnZXQgb3V0IG9mIGhlcmUgYW5kIGdvIHRhc3RlIGhlciwgeWVhaFxuXG5bQ2hvcnVzXVxuWWVhaCwgbXkgZGlhbW9uZHMgYmUgVlYncyAoVlYncylcblRoZXkgZG9uJ3Qgd2FuJyBzZWUgdXMgb24gVFYgdW5sZXNzIGl0J3MgdGhlIG5ld3NcbkkgZ290IHNvbWV0aGluJyB0byBwcm92ZSAoU29tZXRoaW4nIHRvIHByb3ZlKVxuWWVhaCwgSSdtIHlvdW5nLCBidXQgZ290IHNvbWV0aGluJyB0byBsb3NlIChTb21ldGhpbicgdG8gbG9zZSlcbkluIHRoZSBzdHJlZXQsIEkgZG9uZSBwYWlkIGFsbCBteSBkdWVzIChZZWFoKVxuTm8gZXh0b3J0aW9uLCBhaW4ndCB0YWxraW5nICdib3V0IGxpdGVyYWxseSAoTmFoKVxuSSBiZSB3YWxraW4nIG9uIGJlYXRzLCBpcyB5b3UgaGVhcmluJyBtZT8gKEh1aD8pXG5JIGp1c3QgcHJheSB0aGF0IG15IGtpZHMgYmUgYSBiaWdnZXIgbWUsIHRoZXkgY2FuJ3QgZ2V0IHJpZCBvZiBtZVxuTXkgZGlhbW9uZHMgYmUgVlYncyAoVlYncylcblRoZXkgZG9uJ3Qgd2FuJyBzZWUgdXMgb24gVFYgdW5sZXNzIGl0J3MgdGhlIG5ld3NcbkkgZ290IHNvbWV0aGluJyB0byBwcm92ZSAoU29tZXRoaW4nIHRvIHByb3ZlKVxuWWVhaCwgSSdtIHlvdW5nLCBidXQgZ290IHNvbWV0aGluJyB0byBsb3NlIChTb21ldGhpbicgdG8gbG9zZSlcbkluIHRoZSBzdHJlZXQsIEkgZG9uZSBwYWlkIGFsbCBteSBkdWVzIChZZWFoKVxuTm8gZXh0b3J0aW9uLCBhaW4ndCB0YWxraW5nICdib3V0IGxpdGVyYWxseSAoTmFoKVxuSSBiZSB3YWxraW4nIG9uIGJlYXRzLCBpcyB5b3UgaGVhcmluJyBtZT8gKEh1aD8pXG5JIGp1c3QgcHJheSB0aGF0IG15IGtpZHMgYmUgYSBiaWdnZXIgbWUsIHRoZXkgY2FuJ3QgZ2V0IHJpZCBvZiBtZVxuXG5bVmVyc2UgMl1cbldha2UgdXAgZXZlcnkgZGF5LCBzb21lYm9keSBoYXJyYXNzaW4nIG1lXG5JIGdvdCByaWNoLCB0aGV5IG5lZWQgbW9uZXksIHRoZXkgYXNraW4nIG1lXG5JIHdhcyBzaXR0aW4nIGluIGphaWwsIHRoZXkgYWluJ3QgbG9vayBvdXQgZm9yIG1lXG5PbmVzIHdobyBuZWVkIG1lIHRoZW0gc2FtZSBvbmVzIHdobyBkb3VidGVkIG1lXG5JIGJlZW4gaGFuZGxpbicgbXkgb3duLCB0aGV5IGNhbiB2b3VjaCBmb3IgbWVcbkhlYWQgd2F5IGRvd24gd2l0aCBtZSwga25vdyB0aGF0IHNoZSBwcm91ZCBvZiBtZVxuVHVybiB0aGUgaGVhdCB1cCwgYWluJ3Qgbm9ib2R5IGhvdCBhcyBtZVxuRXZlcnl3aGVyZSBkb2xsYXJzIGJlLCB0aGF0J3MgaG93IEkgZ290dGEgYmVcbkkgZG9uZSBnYXZlIGhlciB0aGUgd29ybGQsIG5vdyBzaGUgbm90IGxlYXZpbidcblNheSBzaGUgbG92ZSBtZSB0byBkZWF0aCwgdG9sZCBoZXIsIFwiU3RvcCBicmVhdGhpbidcIlxuSGUgdHJ5IGRvIHdoYXQgSSBkbywgYnV0IHdlIG5vdCBldmVuXG5JIHdhbnQgYWxsIG9mIHRoZSBiZWVmLCBJIGFtIG5vdCB2ZWdhblxuQm95LCB5b3Ugc2FpZCBpdCB3YXMgc21va2UsIG5pZ2dhLCBzdG9wIHNwZWFraW4nXG4nVmVudGFkb3IsIGRyb3AgdGhlIHRvcCwgSSBjYW4ndCBzdG9wIHNwZWVkaW4nXG5UcnluYSBzZWUgaWYgdGhpcyBiaXRjaCBoaXQgdGhlIHRvcCBzcGVlZFxuSGl0IHRoZSBiaXRjaCBmcm9tIHRoZSBiYWNrLCBoYXZlIGhlciBrbm9jayBrbmVlXG5DYWxsIG1lIEJhYnksIGhvLCBJIGNvbnRyb2wgdGhlIHJvY2tcbklmIHRoZSByYXAgc2xvdywgSSBjb250cm9sIHRoZSBibG9ja1xuWWVhaCwgSSdtIHJlYWxseSBpdCwgYW5kIHlvdSBuaWdnYXMgbm90XG5Hb3QgYSBjb3VwbGUgY291cGVzLCBJIGNhbiBkcm9wIHRoZSB0b3BcbkkgZG9uZSBtYWRlIGl0LCBuaWdnYSwgYWxsIHRoZXNlIGRpZ2l0cyBjb21pbicgaW5cbkknbSBzYXZpbicgZm9yIHRoZSBiaWdnZXIgcGljdHVyZSwga25vdyBvbmUgZGF5IEknbGwgbmVlZCAnZW1cbk1pZ2h0IGFzIHdlbGwgZ2V0IHVzZWQgdG8gbWVcbk15IGJpZ2dlc3QgZmVhciBpcyBlbmRpbicgdXAgYSB1c2VkLXRvLWJlLCB5ZWFoXG5cbltDaG9ydXNdXG5ZZWFoLCBteSBkaWFtb25kcyBiZSBWVidzIChWVidzKVxuVGhleSBkb24ndCB3YW4nIHNlZSB1cyBvbiBUViB1bmxlc3MgaXQncyB0aGUgbmV3c1xuSSBnb3Qgc29tZXRoaW4nIHRvIHByb3ZlIChTb21ldGhpbicgdG8gcHJvdmUpXG5ZZWFoLCBJJ20geW91bmcsIGJ1dCBnb3Qgc29tZXRoaW4nIHRvIGxvc2UgKFNvbWV0aGluJyB0byBsb3NlKVxuSW4gdGhlIHN0cmVldCwgSSBkb25lIHBhaWQgYWxsIG15IGR1ZXMgKFllYWgpXG5ObyBleHRvcnRpb24sIGFpbid0IHRhbGtpbmcgJ2JvdXQgbGl0ZXJhbGx5IChOYWgpXG5JIGJlIHdhbGtpbicgb24gYmVhdHMsIGlzIHlvdSBoZWFyaW4nIG1lPyAoSHVoPylcbkkganVzdCBwcmF5IHRoYXQgbXkga2lkcyBiZSBhIGJpZ2dlciBtZSwgdGhleSBjYW4ndCBnZXQgcmlkIG9mIG1lXG5NeSBkaWFtb25kcyBiZSBWVidzIChWVidzKVxuVGhleSBkb24ndCB3YW4nIHNlZSB1cyBvbiBUViB1bmxlc3MgaXQncyB0aGUgbmV3c1xuSSBnb3Qgc29tZXRoaW4nIHRvIHByb3ZlIChTb21ldGhpbicgdG8gcHJvdmUpXG5ZZWFoLCBJJ20geW91bmcsIGJ1dCBnb3Qgc29tZXRoaW4nIHRvIGxvc2UgKFNvbWV0aGluJyB0byBsb3NlKVxuSW4gdGhlIHN0cmVldCwgSSBkb25lIHBhaWQgYWxsIG15IGR1ZXMgKFllYWgpXG5ObyBleHRvcnRpb24sIGFpbid0IHRhbGtpbmcgJ2JvdXQgbGl0ZXJhbGx5IChOYWgpXG5JIGJlIHdhbGtpbicgb24gYmVhdHMsIGlzIHlvdSBoZWFyaW4nIG1lPyAoSHVoPylcbkkganVzdCBwcmF5IHRoYXQgbXkga2lkcyBiZSBhIGJpZ2dlciBtZSwgdGhleSBjYW4ndCBnZXQgcmlkIG9mIG1lXG5cbiNMaWxCYWJ5ICNTdW0yUHJvdmUgI015VHVyblxuXG5NdXNpYyB2aWRlbyBieSBMaWwgQmFieSBwZXJmb3JtaW5nIFN1bSAyIFByb3ZlLiDCqSAyMDIwIFF1YWxpdHkgQ29udHJvbCBNdXNpYywgTExDLCB1bmRlciBleGNsdXNpdmUgbGljZW5zZSB0byBVTUcgUmVjb3JkaW5ncywgSW5jLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3hPankwdEw1RXVBL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveE9qeTB0TDVFdUEvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveE9qeTB0TDVFdUEvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3hPankwdEw1RXVBL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveE9qeTB0TDVFdUEvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDUwLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJ4T2p5MHRMNUV1QSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJ4T2p5MHRMNUV1QSIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wMi0xOFQyMDowMDoxMFoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiSUc2M3c5bW1pT05UR0k4TlhqQktTRWFhR0drIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0NE1UQTJRa1l4TlVaRlJrWTVRalE0IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6MDI6MTFaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIkx1a2UgQ29tYnMgLSBTaXggRmVldCBBcGFydCAoTHlyaWMgVmlkZW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiTGlzdGVuIHRvIOKAnFNpeCBGZWV0IEFwYXJ04oCdIGJ5IEx1a2UgQ29tYnMsIG91dCBub3c6IGh0dHBzOi8vTEMubG5rLnRvL1NGQUFZXG5cbkFwcGxlIE11c2ljOiBodHRwczovL0xDLmxuay50by9TRkFBWS9hcHBsZW11c2ljXG5TcG90aWZ5OiBodHRwczovL0xDLmxuay50by9TRkFBWS9zcG90aWZ5XG5BbWF6b24gTXVzaWM6IGh0dHBzOi8vTEMubG5rLnRvL1NGQUFZL2FtYXpvbm11c2ljIFxuaVR1bmVzOiBodHRwczovL0xDLmxuay50by9TRkFBWS9pdHVuZXNcbllvdVR1YmUgTXVzaWM6IGh0dHBzOi8vTEMubG5rLnRvL1NGQUFZL3lvdXR1YmVtdXNpYyBcblBhbmRvcmE6IGh0dHBzOi8vTEMubG5rLnRvL1NGQUFZL3BhbmRvcmFcbiBcbkNob3J1czpcbkkgbWlzcyBteSBtb20sIEkgbWlzcyBteSBkYWRcbkkgbWlzcyB0aGUgcm9hZCwgSSBtaXNzIG15IGJhbmRcbkdpdmluZyBodWdzIGFuZCBzaGFraW5nIGhhbmRzXG5JdOKAmXMgYSBteXN0ZXJ5IEkgc3VwcG9zZVxuSnVzdCBob3cgbG9uZyB0aGlzIHRoaW5nIGdvZXNcbkJ1dCB0aGVyZeKAmWxsIGJlIGNyb3dkcyBhbmQgdGhlcmXigJlsbCBiZSBzaG93c1xuQW5kIHRoZXJlIHdpbGwgYmUgbGlnaHQgYWZ0ZXIgZGFya1xuU29tZSBkYXkgd2hlbiB3ZSBhcmVu4oCZdCBzaXggZmVldCBhcGFydFxuIFxuTGlzdGVuIHRvIGhpcyBsYXRlc3Qgc2luZ2xlIOKAnERvZXMgVG8gTWXigJ0gYnkgTHVrZSBDb21icyAoZnQuIEVyaWMgQ2h1cmNoKSwgcGx1cyBvdGhlciB0cmFja3MgZnJvbSB0aGUgYWxidW0sIOKAmFdoYXQgWW91IFNlZSBJcyBXaGF0IFlvdSBHZXTigJksIG91dCBub3c6IGh0dHBzOi8vTEMubG5rLnRvL1dZU0lXWUdZVCAgXG4gIFxuRm9sbG93IEx1a2UgQ29tYnM6IFxuSW5zdGFncmFtOiBodHRwczovL0xDLmxuay50by9wcm9maWxlWVQvaW5zdGFncmFtXG5GYWNlYm9vazogaHR0cHM6Ly9MQy5sbmsudG8vcHJvZmlsZVlUL2ZhY2Vib29rXG5Ud2l0dGVyOiBodHRwczovL0xDLmxuay50by9wcm9maWxlWVQvdHdpdHRlclxuVGlrVG9rOiBodHRwczovL0xDLmxuay50by9wcm9maWxlWVQvdGlrdG9rXG5Ud2l0Y2g6IGh0dHBzOi8vTEMubG5rLnRvL3Byb2ZpbGVZVC90d2l0Y2hcblN1YnNjcmliZSB0byBoaXMgY2hhbm5lbDogaHR0cHM6Ly9MQy5sbmsudG8vcHJvZmlsZVlUL3lvdXR1YmVcbldlYnNpdGUvVG91ciBEYXRlcy9Cb290bGVnZ2VycyBGYW4gQ2x1YjogaHR0cHM6Ly9MQy5sbmsudG8vcHJvZmlsZVlUL29mZmljaWFsc2l0ZSBcbiBcbiNMdWtlQ29tYnMgI1NpeEZlZXRBcGFydCAjTHlyaWNzICNPZmZpY2lhbCIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1NheWg4WkFTeGs4L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvU2F5aDhaQVN4azgvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvU2F5aDhaQVN4azgvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1NheWg4WkFTeGs4L3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvU2F5aDhaQVN4azgvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDUxLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJTYXloOFpBU3hrOCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJTYXloOFpBU3hrOCIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wNS0wMVQwNDowMDoxMloiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiNzdMQW8xS0JFSGFpNlMxRGpPZUw3UGttWTlFIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0d1JVWTNOekpHT0RZeU1qUXpOVVUwIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6MDI6MjFaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogInR3ZW50eSBvbmUgcGlsb3RzIC0gTGV2ZWwgb2YgQ29uY2VybiAoT2ZmaWNpYWwgVmlkZW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAidHdlbnR5IG9uZSBwaWxvdHMgLSBMZXZlbCBvZiBDb25jZXJuIChPZmZpY2lhbCBWaWRlbylcbm9mZmljaWFsIHZpZGVvIGZvciBcIkxldmVsIG9mIENvbmNlcm5cIiAtIGF2YWlsYWJsZSBub3cgb24gRnVlbGVkIEJ5IFJhbWVuLiAgXG4gXG5odHRwczovL3RvcC5sbmsudG8vbGV2ZWxvZmNvbmNlcm5cbiBcbkV4Y2x1c2l2ZSBDcmV3IE5hdGlvbiBob29kaWUgYXZhaWxhYmxlIG5vdyAtIGh0dHBzOi8vc21hcnR1cmwuaXQvVE9QQ3Jld05hdGlvblxuQSBwb3J0aW9uIG9mIHByb2NlZWRzIGZyb20gdGhpcyBzb25nICsgdGhlIFTDmFAgQ3JldyBOYXRpb24gaG9vZGllIHdpbGwgZ28gdG8gQ3JldyBOYXRpb24gLSBHbG9iYWwgUmVsaWVmIEZ1bmQgRm9yIExpdmUgTXVzaWMgQ3Jld3MuQ3JldyBOYXRpb24gaXMgcG93ZXJlZCBieSBNdXNpYyBGb3J3YXJkIEZvdW5kYXRpb24sIGEgY2hhcml0YWJsZSA1MDFjMyBvcmdhbml6YXRpb24sIHRoYXQgd2lsbCBiZSBhZG1pbmlzdGVyaW5nIHRoZSBmdW5kLlxuXG5MWVJJQ1NcblBhbmljIG9uIHRoZSBicmFpbiwgd29ybGQgaGFzIGdvbmUgaW5zYW5lLFxuVGhpbmdzIGFyZSBzdGFydGluZyB0byBnZXQgaGVhdnkuXG5JIGNhbuKAmXQgaGVscCBidXQgdGhpbmsgSSBoYXZlbuKAmXQgZmVsdCB0aGlzIHdheSxcblNpbmNlIEkgYXNrZWQgeW91IHRvIGdvIHN0ZWFkeS5cblxuV29uZGVyaW5nLFxuV291bGQgeW91IGJlLCBteSBsaXR0bGUgcXVhcmFudGluZT9cbk9yIGlzIHRoaXMgdGhlIHdheSBpdCBlbmRzP1xuXG4nQ2F1c2UgSSB0b2xkIHlvdSwgbXkgbGV2ZWwgb2YgY29uY2VybixcbkJ1dCB5b3Ugd2Fsa2VkIGJ5IGxpa2UgeW91IG5ldmVyIGhlYXJkLFxuQW5kIHlvdSBjb3VsZCBicmluZyBkb3duIG15LCBsZXZlbCBvZiBjb25jZXJuLFxuSnVzdCBuZWVkIHlvdSB0byB0ZWxsIG1lIHdl4oCZcmUgYWxyaWdodCwgdGVsbCBtZSB3ZeKAmXJlIG9rYXkuXG5cblBhbmljIG9uIHRoZSBicmFpbiwgTWljaGFlbOKAmXMgZ29uZSBpbnNhbmUsXG5KdWxpZSBzdGFydHMgdG8gbWFrZSBtZSBuZXJ2b3VzLFxuSSBkb24ndCByZWFsbHkgY2FyZSB3aGF0IHRoZXkgd291bGQgc2F5XG5JJ20gYXNraW5nIHlvdSB0byBzdGF5XG5pbiBteSBidW5rZXIgdW5kZXJuZWF0aCB0aGUgc3VyZmFjZS5cblxuV29uZGVyaW5nLFxuV291bGQgeW91IGJlLCBteSBsaXR0bGUgcXVhcmFudGluZT9cbk9yIGlzIHRoaXMgdGhlIHdheSBpdCBlbmRzP1xuXG4nQ2F1c2UgSSB0b2xkIHlvdSwgbXkgbGV2ZWwgb2YgY29uY2VybixcbkJ1dCB5b3Ugd2Fsa2VkIGJ5IGxpa2UgeW91IG5ldmVyIGhlYXJkLFxuQW5kIHlvdSBjb3VsZCBicmluZyBkb3duIG15LCBsZXZlbCBvZiBjb25jZXJuLFxuSnVzdCBuZWVkIHlvdSB0byB0ZWxsIG1lIHdl4oCZcmUgYWxyaWdodCwgdGVsbCBtZSB3ZeKAmXJlIG9rYXkuXG5cblRlbGwgbWUgd2XigJlyZSBhbHJpZ2h0LCB0ZWxsIG1lIHdl4oCZcmUgb2theS5cblRlbGwgbWUgd2XigJlyZSBhbHJpZ2h0LCB0ZWxsIG1lIHdl4oCZcmUgb2theS5cbkJyaW5nIGRvd24gbXksIGxldmVsIG9mIGNvbmNlcm4sXG5KdXN0IG5lZWQgeW91IHRvIHRlbGwgbWUgd2XigJlyZSBhbHJpZ2h0LCB0ZWxsIG1lIHdl4oCZcmUgb2theS5cblxuJ0NhdXNlIEkgdG9sZCB5b3UsIG15IGxldmVsIG9mIGNvbmNlcm4sXG5CdXQgeW91IHdhbGtlZCBieSBsaWtlIHlvdSBuZXZlciBoZWFyZCxcbllvdSBjb3VsZCBicmluZyBkb3duIG15LCBsZXZlbCBvZiBjb25jZXJuLFxuSnVzdCBuZWVkIHlvdSB0byB0ZWxsIG1lIHdl4oCZcmUgYWxyaWdodCwgdGVsbCBtZSB3ZeKAmXJlIG9rYXkuXG5cbkkgbmVlZCB5b3UgdG8gdGVsbCBtZSB3ZeKAmXJlIGFscmlnaHQsIHRlbGwgbWUgd2XigJlyZSBva2F5LlxuTmVlZCB5b3UgdG8gdGVsbCBtZSB3ZeKAmXJlIGFscmlnaHQsIHRlbGwgbWUgd2XigJlyZSBva2F5LlxuSSBOZWVkIHlvdSB0byB0ZWxsIG1lIHdl4oCZcmUgYWxyaWdodCwgdGVsbCBtZSB3ZeKAmXJlIG9rYXkuXG5OZWVkIHlvdSB0byB0ZWxsIG1lIHdl4oCZcmUgYWxyaWdodCwgdGVsbCBtZSB3ZeKAmXJlIG9rYXkuXG5cbk5lZWQgeW91IG5vdy5cbkkgbmVlZCB5b3Ugbm93Li4uXG5cbidDYXVzZSBJIHRvbGQgeW91LCBteSBsZXZlbCBvZiBjb25jZXJuLFxuQnV0IHlvdSB3YWxrZWQgYnkgbGlrZSB5b3UgbmV2ZXIgaGVhcmQsXG5Zb3UgY291bGQgYnJpbmcgZG93biBteSwgbGV2ZWwgb2YgY29uY2Vybixcbkp1c3QgbmVlZCB5b3UgdG8gdGVsbCBtZSB3ZeKAmXJlIGFscmlnaHQsIHRlbGwgbWUgd2XigJlyZSBva2F5LlxuXG5UZWxsIG1lIHdl4oCZcmUgYWxyaWdodCwgdGVsbCBtZSB3ZeKAmXJlIG9rYXkuXG5UZWxsIG1lIHdl4oCZcmUgYWxyaWdodCwgdGVsbCBtZSB3ZeKAmXJlIG9rYXkuXG5Zb3UgY291bGQgYnJpbmcgZG93biBteSwgbGV2ZWwgb2YgY29uY2Vybixcbkp1c3QgbmVlZCB5b3UgdG8gdGVsbCBtZSB3ZeKAmXJlIGFscmlnaHQsIHRlbGwgbWUgd2XigJlyZSBva2F5LlxuXG5JbiBhIHdvcmxkLCB3aGVyZSB5b3UgY291bGQganVzdCBsaWUgdG8gbWVcbmFuZCBJJ2QgYmUgb2theS5cbldlJ2xsIGJlIG9rYXkuXG5XZSdyZSBnb25uYSBiZSBva2F5LlxuXG5TdWJzY3JpYmUgZm9yIG1vcmUgb2ZmaWNpYWwgY29udGVudCBmcm9tIHR3ZW50eSBvbmUgcGlsb3RzOiBodHRwczovL3RvcC5sbmsudG8vc3Vic2NyaWJlIFxuXG5TdG9yZTogaHR0cHM6Ly9zdG9yZS50d2VudHlvbmVwaWxvdHMuY29tIFxuU2l0ZTogaHR0cDovL3NtYXJ0dXJsLml0L1RPUHNpdGVcblNwb3RpZnk6IGh0dHA6Ly9zbWFydHVybC5pdC9UT1BzcG90aWZ5XG5GYWNlYm9vazogaHR0cDovL3NtYXJ0dXJsLml0L1RPUGZhY2Vib29rXG5JbnN0YWdyYW06IGh0dHA6Ly9zbWFydHVybC5pdC9UT1BpbnN0YWdyYW1cblR3aXR0ZXI6IGh0dHA6Ly9zbWFydHVybC5pdC9UT1B0d2l0dGVyXG5UdW1ibHI6IGh0dHA6Ly9zbWFydHVybC5pdC9UT1B0dW1ibHJcblxuI3R3ZW50eW9uZXBpbG90cyAjbGV2ZWxvZmNvbmNlcm4iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9sb09XS204R1c2QS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2xvT1dLbThHVzZBL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2xvT1dLbThHVzZBL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9sb09XS204R1c2QS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2xvT1dLbThHVzZBL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA1MiwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAibG9PV0ttOEdXNkEiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAibG9PV0ttOEdXNkEiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMjAtMDQtMDlUMTY6MDA6MTBaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIlpnak45R0VZVzQtaVk0RERqeTQ4U19NSEV1USIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNHhRa0kyTnpWR05UaEJNRGhDTkRjMCIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjAyOjM2WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJMaWwgQmFieSB4IDQyIER1Z2cgLSBXZSBQYWlkIChPZmZpY2lhbCBWaWRlbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJXYXRjaCB0aGUgbXVzaWMgdmlkZW8gZm9yIExpbCBCYWJ5IHggNDIgRHVnZydzIFwiV2UgUGFpZC5cIlxuXG5TdHJlYW0vRG93bmxvYWQg4oCcTXkgVHVybiAtIERlbHV4ZeKAnSBIZXJlOiBodHRwczovL3F1YWxpdHljb250cm9sLmxuay50by9NeVR1cm5ZRFxuXG5Gb2xsb3cgTGlsIEJhYnkgRXZlcnl3aGVyZTpcbkluc3RhZ3JhbTogaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9saWxiYWJ5XzEvXG5UaWtUb2s6IGh0dHBzOi8vd3d3LnRpa3Rvay5jb20vQGxpbGJhYnkgXG5Ud2l0dGVyOiBodHRwczovL3R3aXR0ZXIuY29tL2xpbGJhYnk0UEZcbkZhY2Vib29rOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vNHBmbGlsYmFieVxuXG5UZXh0IExpbCBCYWJ5IGF0IDY3OC00OTYtNzc1N1xuXG5cIlwiV2UgUGFpZFwiXCIgTHlyaWNzOlxuXG5bSW50cm86IDQyIER1Z2ddXG5DYW4ndCBiZSBmdWNrZWQgd2l0aFxuQXl5LCA0IFBvY2tldHMsIGh1aFxuKFNlY3Rpb24gOCBqdXN0IHN0cmFpZ2h0IGNvb2tlZCB0aGlzIG1vdGhlcmZ1Y2tlciB1cClcblxuW1ZlcnNlIDE6IDQyIER1Z2ddXG4nRm9yZSBJ4oCFZ2/igIVicm9rZSBsaWtlIEpvY1xuRnVja+KAhXdpdGggdGhhdCBkb2cgbGlrZSBWaWNrIChSb29mKVxuTm904oCFdGhhdCByb2NrLCB0aGF0IHBpdCdcblBhbG0gQW5nZWxzIGRvd24gdG8gbXkgc29ja1xuQ2FuJ3QgaG9sZCBteSBHbG9jaywgcmVhc29uIEkgZG9uJ3QgcmVhbGx5IGxpa2UgdGhhdCBzaGl0IChOaWdnYSwgSSBkb24ndClcbllvdW5nIHR1cm50IG5pZ2dhLCBjYW4ndCB3aWZlIG5vIGJpdGNoIChBdCBhbGwpXG5FeGN1c2UgbXkgRnJlbmNoLCBkb24ndCBsaWtlIG5vIGJpdGNoIChOb3BlKVxuTGltbyB0aW50ZWQsIGFsbCBmaXZlIG9mIG15IGNhcnMsIHllYWgsIEkgaGFkIGl0IGhhcmRcblNlZW4gbXkgYml0Y2ggYnJva2UgYmFkLCBJIGFpbid0IGhhZCBhIGhlYXJ0XG5Ta3JydCwgeWVhaCwgdGhhdCdzIHVzXG5Ud28tdG9uZSBBUCwgeWVhaCwgSSdtIGJ1c3RcbkdvdCB0aGUgaGVhZCBmcm9tIGhlciwgSSBhaW4ndCBldmVuIHdhbm5hIGZ1Y2sgKEZ1Y2sgaGVyKVxuV2h5PyBTbHV0LCBieWUgKEZ1Y2sgb24pXG5Ob3RoaW4nIG9uIG1lIGZyb20gU2FrcywgZXZlcnl0aGluZyBSZXZpdmVcbk9sZCBuaWdnYSB0ZWxsaW4nIG9uIGJybywgc2hvdWxkJ3ZlIGRpZWRcbk5vLCBoZSBhaW4ndCBraWxsICdlbSwgZGF3ZywgaGUgYWluJ3QgZXZlbiB0cnlcblN0aWxsJ2xsIGJldCBteSBsYXN0IHNob290aW4nIGRpY2UgaW4gdGhlIGhvb2RcblRha2Ugd2hvIGNoYWluPyBOYWggYml0Y2gsIG5vdCBEdWdnJ3NcblByb2JhYmx5IGluIHNvbWV0aGluJyBmYXN0IHdpdGggYSBHbG9jayBpbiB0aGUgaG9vZFxuQ291cnRzaWRlIHRpY2tldHMsIHNwaWxsaW4nIFdvY2snIG9uIHRoZSB3b29kXG5cbltDaG9ydXM6IDQyIER1Z2cgJiBMaWwgQmFieV1cbkZpcnN0IHR1cm50IG5pZ2dhIGZyb20gdGhlIGhvb2QsIHRoZXkgY3VyaW91c1xuRm91ciBpbiBjYXJzLCAnYm91dCBmaXZlIGluIGpld2VscnlcbkkgZ2V0IHRoZSBjb21tYXMgd2l0aCBudW1iZXJzLCB0aGF0J3MgcGVyaW9kXG5JIGdvdCB5b3VyIEJNIHdhbicgcHV0IG9uIEFtaXJpc1xuRmlyc3QgeW91bmcgbmlnZ2EgaW4gdGhlIEEgd2l0aCB0d28gTGFtc1xuUnVuIHVwIGZvdXJ0ZWVuIG1pbCcsIHN0YXJ0ZWQgZm91cnRlZW4gZ3JhbXMgKFNhbWUgZGF5KVxuRG9wZSBib3kgRGlja2llcyBhbmQgZGlhbW9uZHMgYW5kIFRpbWJzXG5Zb3Ugc2hvdWxkbid0IHBsYXkgd2l0aCB0aGF0IGJveSwgaGUgaXMgbm90IG9uZSBvZiB0aGVtXG5Ccm8sIEkga2VwdCB0YWtpbmcgTCdzLCBmaW5hbGx5IGdvdCBtZSBhIE1cblN0aWxsIG1ha2luZyBkb3VibGUsIEkgZG9uJ3QgY291bnQgd2hhdCBJIHNwZW5kXG5TNTUwIDIwMThcbkdvdHRhIGNvbWUgdHdlbnR5IGlmIHlvdSBob3BwaW4nIGluIHRoZSBCZW56XG5Zb3VuZyB0dXJudCBuaWdnYSBmcm9tIHRoZSBEIHRvIHRoZSBBXG5JJ20gcm9ja2luJyB3aXRoIHRoZSBMaW9ucywgeWVhaCwgSSdtIHJvY2tpbmcgd2l0aCB0aGUgQnJhdmVzXG5ZZWFoLCB5ZWFoLCB5ZWFoLCB5ZWFoLCB5ZWFoLCB3ZSBwYWlkXG5ZZWFoLCB5ZWFoLCB5ZWFoLCB5ZWFoLCB5ZWFoLCB3ZSBwYWlkXG5cbltWZXJzZSAyOiBMaWwgQmFieV1cbkknbWEgdHVybiBpdCB1cCBhIGxpbCcgbW9yZSB0aGlzIHRpbWVcblVzZWQgdG8gZHJlYW0gYWJvdXQgZ2V0dGluJyBpdCwgbm93IEkgZ290IGl0LCBJIGRvbid0IGRyaXZlXG5JIGhhZCBhIHNwb3QgbGlrZSBhIHZhcnNpdHksIHdoYXQgZG8geW91IGhhdmU/XG5Zb3UgYnV5IHR3ZW50eSwgSSdsbCBmcm9udCB3aGF0IHlvdSBidXlcbkkgcHV0IG9uIGRyaXAsIEkgYmVsaWV2ZSBJIGNhbiBJIGZseVxuTmlnZ2FzIGtub3cgdGhhdCBJJ20gcmljaCwgYnV0IHRoZXkga25vdyBub3QgdG8gdHJ5XG5JIGhhZCBhIHNob3cgaW4gRGV0cm9pdCBhbmQgSSBzdG9wcGVkIGF0IFJldml2ZVxuQW5kIHNwZW50IGZpZnR5IG9uIGFsbCB0aGUgZ3V5c1xuQWxsIG9mIHRoZXNlIGhvZXMgaW4gdGhlc2Ugc3RvcmVzIG1ha2UgY29tbWlzc2lvblxuQW5kIHBsdXMgSSdtYSB0aXAgJ2VtLCB0aGV5IGhvbGRpbicgbXkgc2l6ZVxuR2V0IGluIHlvdXIgY2FyIGFuZCBqdXN0IHB1dCBvbiB5b3VyIGZsYXNoZXJzXG5BbmQgZm9sbG93IHRoZSBoZWFyc2Ugc2luY2UgeW91IHNheSB5b3UgZ29uJyByaWRlXG4nQ2F1c2Ugc29tZWJvZHkgZ29uJyBkaWUgaWYgdGhleSBmdWNrIHdpdGggdXNcblR1cm4gYSBmaXZlIHRvIGEgZGltZSwgdGhhdCdzIGEgZG91YmxlIHVwXG5GdWNrIGFyb3VuZCwgd2FsayB0aHJvdWdoIGNodXJjaCB3aXRoIG15IGRvdWJsZSBjdXBcblRoaXMgc2hpdCBhIGhhYml0LCBJJ20gcHJheWluJyBJIGdpdmUgaXQgdXBcblRpZ2VyIHN0YXkgd2l0aCB0aGUgd29vZCwgbWFrZSAnZW0gZ2l2ZSBpdCB1cFxuS25vdyBJIHJhbiB0aHJvdWdoIGEgbWlsJyBldmVyeSB3ZWVrIGNvcHBpbicgd2VlZFxuQnJ1aCBiZWF0IHRoZSBjaGFyZ2UsIEkgY2FuIGdldCBtZSBzb21lIHNsZWVwXG5Hb3QgYSBiYWNrZW5kIHRvIHBpY2sgdXAsIEkgd29uJ3QgZXZlbiBsZWF2ZVxuUnVuIGl0IHVwLCBmdWNrIGFyb3VuZCwgZ2l2ZSB0aGUgJ1ZldHRlIHRvIERUXG5LZWVwIGEgaG90Ym95IHdpdGggbWUsIEkgZ290IGxvdmUgZm9yIEJHXG5DaGFzaW4nIHRoaXMgcGFwZXIgc2luY2UgdHdlbHZlIG9yIHRoaXJ0ZWVuXG5SdW5uaW4nICdyb3VuZCBpbiB0aGVzZSBzdHJlZXRzLCBpdCB3YXMgbWUgYW5kIE1hcnF1aXNlXG5cbltDaG9ydXM6IDQyIER1Z2cgJiBMaWwgQmFieV1cbkZpcnN0IHR1cm50IG5pZ2dhIGZyb20gdGhlIGhvb2QsIHRoZXkgY3VyaW91c1xuRm91ciBpbiBjYXJzLCAnYm91dCBmaXZlIGluIGpld2VscnlcbkkgZ2V0IHRoZSBjb21tYXMgd2l0aCBudW1iZXJzLCB0aGF0J3MgcGVyaW9kXG5JIGdvdCB5b3VyIEJNIHdhbicgcHV0IG9uIEFtaXJpc1xuRmlyc3QgeW91bmcgbmlnZ2EgaW4gdGhlIEEgd2l0aCB0d28gTGFtc1xuUnVuIHVwIGZvdXJ0ZWVuIG1pbCcsIHN0YXJ0ZWQgZm91cnRlZW4gZ3JhbXMgKFNhbWUgZGF5KVxuRG9wZSBib3kgRGlja2llcyBhbmQgZGlhbW9uZHMgYW5kIFRpbWJzXG5Zb3Ugc2hvdWxkbid0IHBsYXkgd2l0aCB0aGF0IGJveSwgaGUgaXMgbm90IG9uZSBvZiB0aGVtXG5Ccm8sIEkga2VwdCB0YWtpbmcgTCdzLCBmaW5hbGx5IGdvdCBtZSBhIE1cblN0aWxsIG1ha2luZyBkb3VibGUsIEkgZG9uJ3QgY291bnQgd2hhdCBJIHNwZW5kXG5TNTUwIDIwMThcbkdvdHRhIGNvbWUgdHdlbnR5IGlmIHlvdSBob3BwaW4nIGluIHRoZSBCZW56XG5Zb3VuZyB0dXJudCBuaWdnYSBmcm9tIHRoZSBEIHRvIHRoZSBBXG5JJ20gcm9ja2luJyB3aXRoIHRoZSBMaW9ucywgeWVhaCwgSSdtIHJvY2tpbmcgd2l0aCB0aGUgQnJhdmVzXG5ZZWFoLCB5ZWFoLCB5ZWFoLCB5ZWFoLCB5ZWFoLCB3ZSBwYWlkXG5ZZWFoLCB5ZWFoLCB5ZWFoLCB5ZWFoLCB5ZWFoLCB3ZSBwYWlkXG5GaXJzdCB0dXJudCBuaWdnYSBmcm9tIHRoZSBob29kLCB0aGV5IGN1cmlvdXNcbkZvdXIgaW4gY2FycywgJ2JvdXQgZml2ZSBpbiBqZXdlbHJ5XG5JIGdldCB0aGUgY29tbWFzIHdpdGggbnVtYmVycywgdGhhdCdzIHBlcmlvZFxuSSBnb3QgeW91ciBCTSB3YW4nIHB1dCBvbiBBbWlyaXNcbkZpcnN0IHlvdW5nIG5pZ2dhIGluIHRoZSBBIHdpdGggdHdvIExhbXNcblJ1biB1cCBmb3VydGVlbiBtaWwnLCBzdGFydGVkIGZvdXJ0ZWVuIGdyYW1zIChTYW1lIGRheSlcbkRvcGUgYm95IERpY2tpZXMgYW5kIGRpYW1vbmRzIGFuZCBUaW1ic1xuWW91IHNob3VsZG4ndCBwbGF5IHdpdGggdGhhdCBib3ksIGhlIGlzIG5vdCBvbmUgb2YgdGhlbVxuQnJvLCBJIGtlcHQgdGFraW5nIEwncywgZmluYWxseSBnb3QgbWUgYSBNXG5TdGlsbCBtYWtpbmcgZG91YmxlLCBJIGRvbid0IGNvdW50IHdoYXQgSSBzcGVuZFxuUzU1MCAyMDE4XG5Hb3R0YSBjb21lIHR3ZW50eSBpZiB5b3UgaG9wcGluJyBpbiB0aGUgQmVuelxuWW91bmcgdHVybnQgbmlnZ2EgZnJvbSB0aGUgRCB0byB0aGUgQVxuSSdtIHJvY2tpbicgd2l0aCB0aGUgTGlvbnMsIHllYWgsIEknbSByb2NraW5nIHdpdGggdGhlIEJyYXZlc1xuWWVhaCwgeWVhaCwgeWVhaCwgeWVhaCwgeWVhaCwgd2UgcGFpZFxuWWVhaCwgeWVhaCwgeWVhaCwgeWVhaCwgeWVhaCwgd2UgcGFpZCAoWWVhaClcblxuRGlyZWN0ZWQgYnk6IEtlZU1vdGlvblxuXG4jTGlsQmFieSAjNDJEdWdnICNXZVBhaWRcblxuTXVzaWMgdmlkZW8gYnkgTGlsIEJhYnksIDQyIER1Z2cgcGVyZm9ybWluZyBXZSBQYWlkLiDCqSAyMDIwIFF1YWxpdHkgQ29udHJvbCBNdXNpYywgTExDLCB1bmRlciBleGNsdXNpdmUgbGljZW5zZSB0byBVTUcgUmVjb3JkaW5ncywgSW5jLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0dFckc5ZmVtTVFrL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvR0VyRzlmZW1NUWsvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvR0VyRzlmZW1NUWsvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0dFckc5ZmVtTVFrL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvR0VyRzlmZW1NUWsvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDUzLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJHRXJHOWZlbU1RayIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJHRXJHOWZlbU1RayIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wNS0wNlQxOTowMDowNFoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiOU5PcllOZVJJRTR0NVVhcjVxYTh2VGpsUmdzIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM1Qk1USTBRMFkyTjBaRlJFSTBPVGxCIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6MDI6NDZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIlRoZSBXZWVrbmQgLSBJbiBZb3VyIEV5ZXMgKE9mZmljaWFsIFZpZGVvKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIk9mZmljaWFsIG11c2ljIHZpZGVvIGJ5IFRoZSBXZWVrbmQgcGVyZm9ybWluZyBcIkluIFlvdXIgRXllc1wi4oCTICdBZnRlciBIb3Vyc1wiIGF2YWlsYWJsZSBldmVyeXdoZXJlIG5vdzogaHR0cDovL3RoZXdlZWtuZC5jby9hZnRlcmhvdXJzWURcblxu4pa6U3Vic2NyaWJlIHRvIFRoZSBXZWVrbmQgb24gWW91VHViZTogaHR0cDovL3RoZXdlZWtuZC5jby9zdWJzY3JpYmVZRCBcblxu4pa6R2V0IHRpY2tldHM6IGh0dHBzOi8vd3d3LnRoZXdlZWtuZC5jb20vdG91clxuXG7ilrpHZXQgZXhjbHVzaXZlIG1lcmNoOiBodHRwczovL3Nob3AudGhld2Vla25kLmNvbS9cblxu4pa6Rm9sbG93IFRoZSBXZWVrbmQ6XG5odHRwczovL3R3aXR0ZXIuY29tL3RoZXdlZWtuZCBcbmh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS90aGV3ZWVrbmQgXG5odHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3RoZXdlZWtuZCBcbmh0dHBzOi8vd3d3LnRoZXdlZWtuZC5jb20gXG5cbkRpcmVjdG9yOiBBbnRvbiBUYW1taVxuXG5TdGFycmluZzogWmFpbmEgTWl1Y2NpYVxuXG5Qcm9kdWN0aW9uIENvbXBhbnk6IFNvbWVzdWNoXG5FeGVjdXRpdmUgUHJvZHVjZXI6IFNhc2tpYSBXaGlubmV5XG5cblByb2R1Y2VyOiBTYXJhaCBQYXJrXG5cbkRpcmVjdG9yIG9mIFBob3RvZ3JhcGh5OiBPbGl2ZXIgTWlsbGFyXG4ybmQgVW5pdCBEUDogRGV2aW4gXCJEYWRkeVwiIEthcnJpbmd0ZW5cblN0ZWFkaWNhbSBPcDogTmljayBNdWVsbGVyXG5cblByb2R1Y3Rpb24gRGVzaWduZXI6IE1pcmFuZGEgTG9yZW56XG5Db3N0dW1lIERlc2lnbmVyOiBBbGFuYSBNb3JzaGVhZFxuU0ZYIE1ha2V1cDogS29qaSBPaG11cmFcblxuTWFrZSB1cCBBcnRpc3Q6IEZhdG1hIEJlbmRyaXNcbk1ha2UgdXAgQXJ0aXN0OiBDaHJpc3RpbmUgTmVsbGlcblxuMXN0IEFEOiBLZW5uZXRoIFRheWxvclxuXG5FZGl0b3I6IEFuZHJlYXMgQXJ2aWRzc29uXG5Bc3Npc3RhbnQgRWRpdG9yOiBKYW5uZSBWYXJ0aWFcbjJuZCBBc3Npc3RhbnQgRWRpdG9yOiBUaW0gTW9udGFuYVxuUG9zdCBQcm9kdWN0aW9uIFN1cGVydmlzb3I6IEFsZWMgRXJuZXN0XG5cbkNvbG9yaXN0OiBOaWNrZSBKYWNvYnNzb25cbkFzc2lzdGFudCBDb2xvcmlzdDogU2FuZGVyIHZhbiBXaWprXG5FZGl0b3JpYWwvQ29sb3IgVGFsZW50IE1nbXQ6IFNvZmlhIE1pc2dlbmEgJiBIZWxlbmVcbk1pc2dlbmEgQCBUaGUgVGFsZW50IEdyb3VwXG5cblNvdW5kIERlc2lnbjogQW50b24gQWhsYmVyZyBAIFJlZCBQaXBlIFN0dWRpb3NcblxuVkZYOiBNYXRoZW1hdGljXG5UaXRsZSBEZXNpZ246IEFsZWtzaSBUYW1taVxuXG5MeXJpY3M6XG5cbkkganVzdCBwcmV0ZW5kIHRoYXQgSeKAmW0gaW4gdGhlIGRhcmtcbkkgZG9u4oCZdCByZWdyZXQgY2F1c2UgbXkgaGVhcnQgY2Fu4oCZdCB0YWtlIGEgbG9zc1xuSeKAmWQgcmF0aGVyIGJlIHNvIG9ibGl2aW91c1xuSeKAmWQgcmF0aGVyIGJlIHdpdGggeW91XG5XaGVuIGl04oCZcyBzYWlkLCB3aGVuIGl04oCZcyBkb25lIHllYWhcbkkgZG9u4oCZdCBldmVyIHdhbm5hIGtub3dcbkkgY2FuIHRlbGwgd2hhdCB5b3UgZG9uZSB5ZWFoXG5XaGVuIEkgbG9vayBhdCB5b3VcbmluIHlvdXIgZXllc1xuSSBzZWUgdGhlcmXigJlzIHNvbWV0aGluZyBidXJuaW5nIGluc2lkZSB5b3Vcbk9oIGluc2lkZSB5b3VcbkluIHlvdXIgZXllcywgSSBrbm93IGl0IGh1cnRzIHRvIHNtaWxlXG5CdXQgeW91IHRyeSB0bywgb2ggeW91IHRyeSB0b1xuWW91IGFsd2F5cyB0cnkgdG8gaGlkZSB0aGUgcGFpblxuWW91IGFsd2F5cyBrbm93IGp1c3Qgd2hhdCB0byBzYXlcbkkgYWx3YXlzIGxvb2sgdGhlIG90aGVyIHdheVxuSeKAmW0gYmxpbmQsIEnigJltIGJsaW5kXG5JbiB5b3VyIGV5ZXMsIHlvdSBsaWUgYnV0IEkgZG9u4oCZdCBsZXQgaXQgZGVmaW5lIHlvdVxuT2ggZGVmaW5lIHlvdVxuSSB0cmllZCB0byBmaW5kIGxvdmUgaW4gc29tZW9uZSBlbHNlIHRvbyBtYW55IHRpbWVzXG5CdXQgSSBob3BlIHlvdSBrbm93IEkgbWVhbiBpdFxuV2hlbiBJIHRlbGwgeW91IHlvdeKAmXJlIHRoZSBvbmUgdGhhdCB3YXMgb24gbXkgbWluZCBvaFxuV2hlbiBpdOKAmXMgc2FpZCwgd2hlbiBpdOKAmXMgZG9uZVxuSSB3b3VsZCBuZXZlciBsZXQgeW91IGtub3dcbknigJltIGFzaGFtZWQgb2Ygd2hhdCBJIGRvbmVcbldoZW4gSSBsb29rIGF0IHlvdVxuSW4geW91ciBleWVzXG5JIHNlZSB0aGVyZeKAmXMgc29tZXRoaW5nIGJ1cm5pbmcgaW5zaWRlIHlvdVxuT2ggaW5zaWRlIHlvdVxuSW4geW91ciBleWVzIEkga25vdyBpdCBodXJ0cyB0byBzbWlsZVxuQnV0IHlvdSB0cnkgdG8sIG9oIHlvdSB0cnkgdG9cbllvdSBhbHdheXMgdHJ5IHRvIGhpZGUgdGhlIHBhaW5cbllvdSBhbHdheXMga25vdyBqdXN0IHdoYXQgdG8gc2F5XG5JIGFsd2F5cyBsb29rIHRoZSBvdGhlciB3YXlcbknigJltIGJsaW5kLCBJ4oCZbSBibGluZFxuSW4geW91ciBleWVzIHlvdSBsaWUgYnV0IEkgZG9u4oCZdCBsZXQgaXQgZGVmaW5lIHlvdVxuT2ggZGVmaW5lIHlvdVxuSW4geW91ciBleWVzXG5JIHNlZSB0aGVyZeKAmXMgc29tZXRoaW5nIGJ1cm5pbmcgaW5zaWRlIHlvdVxuT2ggaW5zaWRlIHlvdVxuWW91IGFsd2F5cyB0cnkgdG8gaGlkZSB0aGUgcGFpblxuWW91IGFsd2F5cyBrbm93IGp1c3Qgd2hhdCB0byBzYXlcbkkgYWx3YXlzIGxvb2sgdGhlIG90aGVyIHdheVxuSeKAmW0gYmxpbmQsIEnigJltIGJsaW5kXG5JbiB5b3VyIGV5ZXMgeW91IGxpZSBidXQgSSBkb27igJl0IGxldCBpdCBkZWZpbmUgeW91XG5PaCBkZWZpbmUgeW91XG5cbiNUaGVXZWVrbmQgI0luWW91ckV5ZXMgI0FmdGVySG91cnNcblxuXG5NdXNpYyB2aWRlbyBieSBUaGUgV2Vla25kIHBlcmZvcm1pbmcgSW4gWW91ciBFeWVzLiDCqSAyMDIwIFRoZSBXZWVrbmQgWE8sIEluYy4sIG1hbnVmYWN0dXJlZCBhbmQgbWFya2V0ZWQgYnkgUmVwdWJsaWMgUmVjb3JkcywgYSBkaXZpc2lvbiBvZiBVTUcgUmVjb3JkaW5ncywgSW5jLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2RxUlpEZWJQSUdzL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZHFSWkRlYlBJR3MvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZHFSWkRlYlBJR3MvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2RxUlpEZWJQSUdzL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZHFSWkRlYlBJR3MvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDU0LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJkcVJaRGViUElHcyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJkcVJaRGViUElHcyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wMy0yM1QxNjowMDoxMFoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAibGdiRlUxOXZsSXFkRjRyZHpWNWRVRWZKVDZFIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM1R09EWTNSRFV6T0RVM01VSTJPVEUyIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDMtMDZUMDA6MTU6MzFaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIlBPUCBTTU9LRSAtIERJT1IgKE9GRklDSUFMIFZJREVPKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkRpb3IgLSAoT2ZmaWNpYWwgVmlkZW8pIGJ5IFBvcCBTbW9rZSBcbkRvd25sb2FkIGhlcmU6IGh0dHBzOi8vUG9wU21va2UubG5rLnRvL01lZXRUaGVXb29ZRFxuIFxuU3Vic2NyaWJlIHRvIFBvcCBTbW9rZeKAmXMgY2hhbm5lbDpcbmh0dHBzOi8vUG9wU21va2UubG5rLnRvL1N1YnNjcmliZSBcbiBcbkZvbGxvdyBQb3AgU21va2U6XG5odHRwczovL2luc3RhZ3JhbS5jb20vcmVhbHBvcHNtb2tlIFxuaHR0cHM6Ly9mYWNlYm9vay5jb20vcmVhbHBvcHNtb2tlXG5odHRwczovL3R3aXR0ZXIuY29tL3BvcHNtb2tlMTBcbmh0dHBzOi8vc291bmRjbG91ZC5jb20vYmlnZ2F2ZWxpcHJvXG4gXG5DcmVkaXRzOlxuVmlkZW8gRGlyZWN0b3I6IEpMU2hvdFRoYXRcblZpZGVvIFByb2R1Y2VyOiBKTFNob3RUaGF0XG5WaWRlbyBFZGl0b3I6IEpMU2hvdFRoYXRcbiBcbiNQb3BTbW9rZSAjRGlvciAjUmVhbFBvcFNtb2tlXG4gXG5NdXNpYyB2aWRlbyBieSBQb3AgU21va2UgcGVyZm9ybWluZyBEaW9yLiBWaWN0b3IgVmljdG9yIFdvcmxkd2lkZTsgIMKpIDIwMTkgUmVwdWJsaWMgUmVjb3JkcywgYSBkaXZpc2lvbiBvZiBVTUcgUmVjb3JkaW5ncywgSW5jLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL29vclZXVzl5d0cwL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb29yVldXOXl3RzAvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb29yVldXOXl3RzAvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL29vclZXVzl5d0cwL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb29yVldXOXl3RzAvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDU1LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJvb3JWV1c5eXdHMCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJvb3JWV1c5eXdHMCIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxOS0wOS0wM1QyMTowMDoxMVoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiNDJINWVLTWQ2M0dINjk3RTF5NjBrQU9QRlQwIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM1RFFURkJRMFkwTWpBNU5VVkdSRGhDIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6MDM6MDZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIlN0YXlTb2xpZFJvY2t5LSBQYXJ0eSBHaXJsIChPZmZpY2lhbCBNdXNpYyBWaWRlbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJGb2xsb3cgbXkgaW5zdGFncmFtIGZvciBtb3JlIHVwZGF0ZXMgQHN0YXlzb2xpZHJvY2t5XG5ORVc6IFNvZnQgQWdncmVzc2lvbiAoT2ZmaWNpYWwgQXVkaW8pOlxuaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1QZjluVHdYc0lpRVxuIEdFVCBUSElTIFRPIDIwSyBWSUVXUyBBTkQgSSdMTCBEUk9QIEFOT1RIRVIgVklERU8uIFBSRVNTIFRISVMgTElOSzpcbmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9aVlmWW03Y29seDgiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xS2xORFpwQ2tIYy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzFLbE5EWnBDa0hjL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzFLbE5EWnBDa0hjL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xS2xORFpwQ2tIYy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzFLbE5EWnBDa0hjL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA1NiwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiMUtsTkRacENrSGMiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiMUtsTkRacENrSGMiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTktMTItMjRUMjM6MTU6MDBaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIkd2N3JJSTFMM3lyMWhDUTdoYWtTbGVJMEJfMCIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNUNOREJHTTBWRU4wUXdRamsyTmprMSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjAzOjE1WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJMaWwgQmFieSAtIFNvY2lhbCBEaXN0YW5jaW5nIChBdWRpbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJMaXN0ZW4gdG8gdGhlIG9mZmljaWFsIGF1ZGlvIGZvciBMaWwgQmFieSdzIOKAnFNvY2lhbCBEaXN0YW5jaW5n4oCdXG5cblN0cmVhbS9Eb3dubG9hZCDigJxNeSBUdXJuIC0gRGVsdXhl4oCdIEhlcmU6IGh0dHBzOi8vcXVhbGl0eWNvbnRyb2wubG5rLnRvL015VHVybllEXG5cbkZvbGxvdyBMaWwgQmFieSBFdmVyeXdoZXJlOlxuaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9saWxiYWJ5XzEvXG5odHRwczovL3R3aXR0ZXIuY29tL2xpbGJhYnk0UEZcbmh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS80cGZsaWxiYWJ5XG5cblRleHQgTGlsIEJhYnkgYXQgNjc4LTQ5Ni03NzU3XG5cblNvY2lhbCBEaXN0YW5jaW5nIEx5cmljczpcblxuW0ludHJvXVxuKFNlY3Rpb24gOCBqdXN0IHN0cmFpZ2h0IGNvb2tlZCB0aGlzIG1vdGhlcmZ1Y2tlciB1cClcbihXaGF0J3MgaGFwcGVuaW4nLCBDaGkgQ2hpPylcblxuW1ZlcnNlIDFdXG5JIHRvbGQgaGVyIHRvIGZseeKAhWFuZOKAhXNoZSBzY2FyZWQgb2bigIV0aGUgdmlydXMsIEkgc2VudCBoZXIgYeKAhXByaXZhdGUgdG8gZ2V0IGhlcmVcbkkgbWFkZSBmb3VyIGh1bmRyZWQgZG9sbGFycyBvZmYgb2YgZWFjaCBvZiB0aGVzZSBwb3VuZHMsIEkgYWluJ3QgdHJpcHBpbicsIGl0J3MgZ29uJyBiZSBhIGdvb2QgeWVhclxuU29sb21vbiBkcml2aW4nIHdoaWxlIEkgZ290IG15IGhhbmRzIG9uIHRoZSBjaG9wcGVyLCBJJ20ga2VlcGluJyBteSBleWVzIGluIHRoZSByZWFydmlld1xuSSdtIGZyb20gQXRsYW50YSB3aGVyZSB0aGV5IHBheSB0byB0cmlwbGUgY3Jvc3MgbmlnZ2FzLCB0aGV5J2xsIGRhcCB5b3UgdXAsIHRoZW4gdGhleSdsbCBraWxsIHlvdVxuVGhlc2UgbmlnZ2FzIGZha2UgYW5kIEknbSByZWFsLCBJIGRvbid0IGZlZWwgJ2VtXG5NeSBuaWdnYXMgdGFrZXJzLCBhaW4ndCB3b3JyaWVkICdib3V0ICdlbSBzdGVhbGluZ1xuSSBydW4gd2l0aCBhcGVzIGFuZCBzb21lIGJhYnkgZ29yaWxsYXNcbkkga25vdyBhIGZldyAoU2hoKSwgSSBjYW4gYnV5IG1lIGEgbmlnZ2FcblNhaWQgSSB3b3VsZG4ndCBjaGFuZ2UgYnV0IG15IGNoYW5nZSBhIGxpbCcgYmlnZ2VyXG5Gb3VyLWNhcmF0IHJpbmcgbGVhdmUgYSBzY2FyIGlmIEkgaGl0IHlvdVxuTG9vayBsaWtlIGEgc3BhY2VzaGlwLCBnb3Qgc3RhcnMgaW4gbXkgdmVoaWNsZVxuVGhlc2UgbmlnZ2FzIGZha2UgYW5kIEkgZG9uJ3Qgd2FubmEgZGVhbCB3aXRoICdlbSBhbGxcblxuW0Nob3J1c11cbkknbSBzb2NpYWwgZGlzdGFuY2luZ1xuTWFuLCB0aGVzZSBuaWdnYXMgY2FuJ3QgdG91Y2ggbWUsIEkgY2FuJ3QgZ2V0IHNpY2tcbkdvb2QgZXhjdXNlIGZvciBtZSB0byBwb3VyIHVwIG1lZGljaW5lIChTeXJ1cClcblNoZSBzYXkgSSBhaW4ndCBnb3Qgbm8gaGVhcnQgYW5kIEknbSBkZXZpbC1zZW50XG5JJ20gb24gc29tZSBzYXZhZ2Ugc2hpdCwgYWhcbkkgZ290IHRoZSBkcm9wIG9uIHRoZSBvcHBzLCBzd2l0Y2hlZCB0aGUgY2Fyc1xuSSBnb3QgYSBodW5kcmVkIGluc2lkZSBvZiBhIGRydW1cbldlIHB1bGwgdXAgY2xhcHBpbmcsIGEgcm91bmQgb2YgYXBwbGF1c2VcbldlIGp1c3QgZ29uJyBzYXkgdGhhdCB0aGV5IHdvbiB0aGUgYXdhcmRcblxuXG5bVmVyc2UgMl1cblNsaWRlIGluIHRoZSBkYXl0aW1lLCB0aGVuIGNvbWUgYmFjayBhdCBuaWdodFxuV2UgZ29uJyBtYWtlIHN1cmUgdGhhdCBub2JvZHkgcGxheSB3aXRoIHVzXG5UaGV5IG1ha2UgbWUgbWFkLCBJJ21hIHR1cm4gdXBcbkxldCdzIHRhbGsgYWJvdXQgbW9uZXksIEkgc3dlYXIgSSBiZWVuIHNhdmluJyB1cFxuSSdtIHJlYWxseSBzaWNrIHdpdGggdGhpcyBzaGl0LCBnb3QgJ2VtIHRocm93aW4nIHVwXG5IZSBoaXQgYSBsaWNrIGZvciBhIGJyaWNrLCBub3cgaGUgZ29pbicgdXBcbk15IG5pZ2dhcyByYXBwaW5nLCB5b3Ugc2VlIHVzLCB3ZSBibG93aW4nIHVwXG5IaXQgdGhlIGJpdGNoIGZvciBhIHJhY2ssIHRoZW4gaWdub3JlIGhlclxuSSdtIHNvIHNpY2sgb2YgdGhlc2UgcmF0cyBhbmQgdGhlc2Ugd2hvcmVzXG5JIG1pZ2h0IG1hcnJ5IG15IGdpcmwgYW5kIGp1c3QgZ28gYXdheVxuRWF0IGhlciBvdXQgaWYgc2hlIHJpY2gsIGdvdCBleHBlbnNpdmUgdGFzdGVcbldlIGFpbid0IGdvdCBydXNoLCB0b2xkIHRoZSBwaWxvdCB0byBmdWNraW4nIHdhaXRcbkFpbid0IG5vIHdheSBJIGNhbiBnbyBvbiBubyBmdWNraW4nIGRhdGVcbkkgZG9uJ3Qga25vdyBoZXIgYW5kIHNoZSBkb24ndCBrbm93IG1lXG5NeSBsaWwnIGJveSAnZGVtIHR1cm50IHVwIGF0IGEgeW91bmcgYWdlXG5Zb3UgY2FuIHNheSB0aGF0IGl0IHJ1biBpbiBteSBnZW5lc1xuXG5bQ2hvcnVzXVxuSSdtIHNvY2lhbCBkaXN0YW5jaW5nXG5NYW4sIHRoZXNlIG5pZ2dhcyBjYW4ndCB0b3VjaCBtZSwgSSBjYW4ndCBnZXQgc2lja1xuR29vZCBleGN1c2UgZm9yIG1lIHRvIHBvdXIgdXAgbWVkaWNpbmUgKFN5cnVwKVxuU2hlIHNheSBJIGFpbid0IGdvdCBubyBoZWFydCBhbmQgSSdtIGRldmlsLXNlbnRcbkknbSBvbiBzb21lIHNhdmFnZSBzaGl0LCBhaFxuSSBnb3QgdGhlIGRyb3Agb24gdGhlIG9wcHMsIHN3aXRjaGVkIHRoZSBjYXJzXG5JIGdvdCBhIGh1bmRyZWQgaW5zaWRlIG9mIGEgZHJ1bVxuV2UgcHVsbCB1cCBjbGFwcGluZywgYSByb3VuZCBvZiBhcHBsYXVzZVxuV2UganVzdCBnb24nIHNheSB0aGF0IHRoZXkgd29uIHRoZSBhd2FyZFxuSSdtIHNvY2lhbCBkaXN0YW5jaW5nXG5NYW4sIHRoZXNlIG5pZ2dhcyBjYW4ndCB0b3VjaCBtZSwgSSBjYW4ndCBnZXQgc2lja1xuR29vZCBleGN1c2UgZm9yIG1lIHRvIHBvdXIgdXAgbWVkaWNpbmUgKFN5cnVwKVxuU2hlIHNheSBJIGFpbid0IGdvdCBubyBoZWFydCBhbmQgSSdtIGRldmlsLXNlbnRcbkknbSBvbiBzb21lIHNhdmFnZSBzaGl0LCBhaFxuSSBnb3QgdGhlIGRyb3Agb24gdGhlIG9wcHMsIHN3aXRjaGVkIHRoZSBjYXJzXG5JIGdvdCBhIGh1bmRyZWQgaW5zaWRlIG9mIGEgZHJ1bVxuV2UgcHVsbCB1cCBjbGFwcGluZywgYSByb3VuZCBvZiBhcHBsYXVzZVxuV2UganVzdCBnb24nIHNheSB0aGF0IHRoZXkgd29uIHRoZSBhd2FyZFxuXG5cbltPdXRyb11cbkknbSBzb2NpYWwgZGlzdGFuY2luZ1xuTWFuLCB0aGVzZSBuaWdnYXMgY2FuJ3QgdG91Y2ggbWUsIEkgY2FuJ3QgZ2V0IHNpY2tcblxuI0xpbEJhYnkgI1NvY2lhbERpc3RhbmNpbmcgI015VHVyblxuXG5NdXNpYyB2aWRlbyBieSBMaWwgQmFieSBwZXJmb3JtaW5nIFNvY2lhbCBEaXN0YW5jaW5nIChBdWRpbykuIMKpIDIwMjAgUXVhbGl0eSBDb250cm9sIE11c2ljLCBMTEMsIHVuZGVyIGV4Y2x1c2l2ZSBsaWNlbnNlIHRvIFVNRyBSZWNvcmRpbmdzLCBJbmMuXG5cbmh0dHA6Ly92ZXZvLmx5L2tFMk5tMiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2xhVmtXZ1pFOXB3L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbGFWa1dnWkU5cHcvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbGFWa1dnWkU5cHcvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2xhVmtXZ1pFOXB3L3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbGFWa1dnWkU5cHcvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDU3LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJsYVZrV2daRTlwdyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJsYVZrV2daRTlwdyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wNS0wMVQwNDowMDoyM1oiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiTk1ZRTZoRDF6b0YwSzlsazZaaHltRDBlMlM4IiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0eU5rUTBPRVV5TVVWQ1JrVTNNVGMwIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6MDM6MzhaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIkRpcGxvIHByZXNlbnRzOiBUaG9tYXMgV2VzbGV5IC0gSGVhcnRsZXNzIGZlYXQuIE1vcmdhbiBXYWxsZW4gKE9mZmljaWFsIE11c2ljIFZpZGVvKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkRpcGxvIHByZXNlbnRzOiBUaG9tYXMgV2VzbGV5IC0gSGVhcnRsZXNzIGZlYXQuIE1vcmdhbiBXYWxsZW4gKE9mZmljaWFsIE11c2ljIFZpZGVvKSBcblxuU3Vic2NyaWJlIHRvIERpcGxvIFlvdVR1YmUgQ2hhbm5lbCAtIGh0dHA6Ly9kaXBsby5mbS9Zb3VUdWJlXG5cbkxpc3RlbiB0byDigJhIZWFydGxlc3PigJkgaHR0cHM6Ly9kaXBsby5sbmsudG8vSGVhcnRsZXNzICBcblNwb3RpZnk6IGh0dHBzOi8vZGlwbG8ubG5rLnRvL0hlYXJ0bGVzcy9TcG90aWZ5IFxuQXBwbGUgTXVzaWM6IGh0dHBzOi8vZGlwbG8ubG5rLnRvL0hlYXJ0bGVzcy9BcHBsZU11c2ljICAgXG5cbkRpcmVjdGVkIGJ5IEJyYW5kb24gRGVybWVyXG5Qcm9kdWNlZCBieSBKb25hcyBEb2xrYXJ0XG5EaXJlY3RvciBvZiBQaG90b2dyYXBoeSAtIFdvamNpZWNoIEtpZWxhciBcbjJuZCBVbml0IC0gR2VvcmdlIE5pZW5odWlzIFxuUHJvZHVjdGlvbiBEZXNpZ24gLSBSYWNleSBOb3J0aCBcbkVkaXRlZCBieSBTcGxpY2UgSm9uZXNcbkNvbG9yZWQgYnkgUktNIFN0dWRpb3NcblxuRm9sbG93IERpcGxvOlxuRmFjZWJvb2s6IGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9kaXBsbyBcblR3aXR0ZXI6IGh0dHBzOi8vdHdpdHRlci5jb20vZGlwbG8gXG5JbnN0YWdyYW06IGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vZGlwbG8gXG5Tb3VuZENsb3VkOiBodHRwczovL3NvdW5kY2xvdWQuY29tL2RpcGxvIFxuIFxuRm9sbG93IE1vcmdhbiBXYWxsZW46IFxuRmFjZWJvb2s6IGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9tb3JnYW5jd2FsbGVuLyBcblR3aXR0ZXI6IGh0dHBzOi8vdHdpdHRlci5jb20vbW9yZ2Fud2FsbGVuIFxuSW5zdGFncmFtOiBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL21vcmdhbndhbGxlbi8gXG5cbkx5cmljczogXG5IZWFydGxlc3MgaGVhcnRsZXNzIGhlYXJ0bGVzc1xuU28gaGVhcnRsZXNzIHNvIGhlYXJ0bGVzcyBzbyBoZWFydGxlc3NcblNheSB5b3XigJlyZSBnb2luZyBvdXQgbGF0ZSBcbkkgY291bnQgZG93biB0aWxsIHlvdSBjYWxsIG1lIFxuSXTigJlzIGp1c3Qgb25lIG9mIHRob3NlIHRoaW5ncyBcblRoYXQgeW91IGRvIHdoZW4geW914oCZcmUgbG9uZWx5IFxuQW5kIHlvdeKAmXJlIGFsbCBhYm91dCB0aGUgY2hhc2UgXG5CdXQgeW91IHdvbuKAmXQgZXZlciBsZXQgbWUgY2F0Y2ggeW91IFxuQW5kIEkgd2lzaCBJIHdhcyB0aGUgc2FtZSBcbkJ1dCBJIGtub3cgSeKAmW0gZ3VubmEgbGV0IHlvdSBpbiBhZ2FpbiBhbmQgd2hlbiBJIGRvIFxuSXRzIGd1bm5hIGh1cnQgbGlrZSBoZWxsIGFuZCB5b3UgZG9u4oCZdCBtZWFuIHRvIFxuVGhhdOKAmXMgd2hhdCBJIHRlbGwgbXlzZWxmIFxuIFxuQnV0LCB3aHkgeW91IGdvdHRhIGJlIHNvIGhlYXJ0bGVzcyBcbkkga25vdyB5b3UgdGhpbmsgaXTigJlzIGhhcm1sZXNzXG5Zb3XigJlyZSB0ZWFyaW5nIG1lIGFwYXJ0IFxuQW5kIGdpcmwgdGhlIGhhcmRlc3QgcGFydCBpcyBcbllvdeKAmXJlIHNvIGhpZ2ggb24gYXR0ZW50aW9uIFxuVGFraW5nIG1pbGVzIGZyb20gaW5jaGVzIFxuTGVhdmUgbWUgaW4gdGhlIGRhcmtuZXNzIFxuTmV2ZXIgZmluaXNoIHdoYXQgd2Ugc3RhcnRlZCBcbkdpcmwgd2h5IHlvdSBnb3R0YSBiZSBzbyBoZWFydGxlc3MgKHNvIGhlYXJ0bGVzcylcbldoeSB5b3UgZ290dGEgYmUgc28gaGVhcnRsZXNzIChzbyBoZWFydGxlc3MpIFxuIFxuTW9uZGF5IG5pZ2h0IHdhcyBkZWZpbml0ZWx5IG5vdCBvdXIgbmlnaHQgXG5UdWVzZGF5IG5pZ2h0IHdhcyBqdXN0IGFub3RoZXIgZmlnaHQgXG5XZWRuZXNkYXkgSSB0aG91Z2h0IGV2ZXJ5dGhpbmcgd291bGQgY2hhbmdlXG5UaHVyc2RheSBjYW1lIGFuZCBpdCB3YXMgc3RpbGwgdGhlIHNhbWVcbkZyaWRheSBuaWdodCB3ZSB3ZW50IG91dCBvbiB0aGUgdG93biBcblNhdHVyZGF5IHdlIHNob3VsZCBoYXZlIGJ1cm5lZCBpdCBkb3duIFxuU3VuZGF5IG1vcm5pbmcgY2FtZSBhbmQgbm93IHlvdeKAmXJlIGdvbmUgXG5JIHNob3VsZCBwcm9iYWJseSBrbm93IHRoaXMgc2hpdCBieSBub3dcbkFoIG9oaCBcbkkgc2hvdWxkIHByb2JhYmx5IGtub3cgdGhpcyBzaGl0IGJ5IG5vdyBcbkJ1dCBubywgbm9cbiBcbldoeSB5b3UgZ290dGEgYmUgc28gaGVhcnRsZXNzIFxuSSBrbm93IHlvdSB0aGluayBpdOKAmXMgaGFybWxlc3NcbllvdeKAmXJlIHRlYXJpbmcgbWUgYXBhcnQgXG5BbmQgZ2lybCB0aGUgaGFyZGVzdCBwYXJ0IGlzIFxuWW914oCZcmUgc28gaGlnaCBvbiBhdHRlbnRpb24gXG5UYWtpbmcgbWlsZXMgZnJvbSBpbmNoZXMgXG5MZWF2ZSBtZSBpbiB0aGUgZGFya25lc3MgXG5OZXZlciBmaW5pc2ggd2hhdCB3ZSBzdGFydGVkIFxuR2lybCB3aHkgeW91IGdvdHRhIGJlIHNvIGhlYXJ0bGVzcyAoc28gaGVhcnRsZXNzKVxuV2h5IHlvdSBnb3R0YSBiZSBzbyBoZWFydGxlc3MgKHNvIGhlYXJ0bGVzcykgXG4gXG5HaXJsIHdoeSB5b3UgZ290dGEgYmUgc28gaW4gYmV0d2VlbiBcbkxvdmluZyBtZSBhbmQgbGVhdmluZywgbGVhdmluZyBcbkFoIG9oaFxuSSBzaG91bGQgcHJvYmFibHkga25vdyB0aGlzIHNoaXQgYnkgbm93IFxuQnV0IG5vLCBub1xuXG5XaHkgeW91IGdvdHRhIGJlIHNvIGhlYXJ0bGVzcyBcbkkga25vdyB5b3UgdGhpbmsgaXTigJlzIGhhcm1sZXNzXG5Zb3XigJlyZSB0ZWFyaW5nIG1lIGFwYXJ0IFxuQW5kIGdpcmwgdGhlIGhhcmRlc3QgcGFydCBpcyBcbllvdeKAmXJlIHNvIGhpZ2ggb24gYXR0ZW50aW9uIFxuVGFraW5nIG1pbGVzIGZyb20gaW5jaGVzIFxuTGVhdmUgbWUgaW4gdGhlIGRhcmtuZXNzIFxuTmV2ZXIgZmluaXNoIHdoYXQgd2Ugc3RhcnRlZCBcbkdpcmwgd2h5IHlvdSBnb3R0YSBiZSBzbyBoZWFydGxlc3MgKHNvIGhlYXJ0bGVzcylcbldoeSB5b3UgZ290dGEgYmUgc28gaGVhcnRsZXNzIChzbyBoZWFydGxlc3MpIFxuXG4jRGlwbG9cbiNNb3JnYW5XYWxsZW5cbiNIZWFydGxlc3NcbiNUaG9tYXNXZXNsZXkiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9MT1FueDFIQm1pSS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0xPUW54MUhCbWlJL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0xPUW54MUhCbWlJL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9MT1FueDFIQm1pSS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0xPUW54MUhCbWlJL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA1OCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiTE9RbngxSEJtaUkiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiTE9RbngxSEJtaUkiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTktMDktMDVUMTQ6MDA6MTFaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIlJRSG5ZcHFodXlkMzdUdzhZTUx3Q3hRcmxwWSIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNDRNRFJETTBRM056ZzRSRE00TVVFMSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjA0OjI4WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJOTEUgQ2hvcHBhIC0gV2FsayBFbSBEb3duIGZlYXQuIFJvZGR5IFJpY2NoIChPZmZpY2lhbCBNdXNpYyBWaWRlbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJMaXN0ZW4gdG8gXCJXYWxrIEVtIERvd25cIjogaHR0cHM6Ly9ubGVjaG9wcGEubG5rLnRvL3dhbGtlbWRvd25cblxuaHR0cHM6Ly9ubGVjaG9wcGEuY29tXG5odHRwczovL2luc3RhZ3JhbS5jb20vbmxlY2hvcHBhbXVzaWNcbmh0dHBzOi8vZmFjZWJvb2suY29tL25sZWNob3BwYW11c2ljXG5odHRwczovL3R3aXR0ZXIuY29tL25sZWNob3BwYTFcbmh0dHBzOi8vc25hcGNoYXQuY29tL2FkZC9ubGVjaG9wcGFtdXNpY1xuVGlrVG9rOiBATkxFQ2hvcHBhTXVzaWNcblRyaWxsZXI6IEBOTEVDaG9wcGFcblxuQSBQc3ljaG8gRmlsbXMgUHJvZHVjdGlvblxuRGlyZWN0b3I6IENocmlzdGlhbiBTdXR0b25cbkVQOiBTYW0gQ2FudGVyXG5Qcm9kdWNlcnM6IEdlZW5haCBLcmlzaHQgJiBNYXJ5IE1hcmdhcmV0IE1lcnJpdHRcbkRQOiBEYW5uZWwgRXNjYWxsb25cblBEOiBEcmUgRGF5IERlc2lnbnpcbjFzdCBBRDogRXJpayBNYXRlb1xuRWRpdG9yOiBUeWxlciBTb2JlbC1NYXNvblxuVkZYOiBXYXJtICYgRnV6enksIE51Y2xlYXIgQ3JlYXRpdmUsIE1heCBHb29kcmljaCwgJiBXaWxsIFRvb2tlXG5Db2xvcmlzdDogU3RlcGhlbiBEZXJsdWd1aWFuXG5MYXNlcnM6IEZ1dHVyZVdlYXBvbnMgTGFzZXJzXG5cblxuI1dhbGtFbURvd24gI05MRUNob3BwYSAjUm9kZHlSaWNjaCAjV2Fsa0VtRG93bkNoYWxsZW5nZSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2Z5SWNRMVhsLXJzL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZnlJY1ExWGwtcnMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZnlJY1ExWGwtcnMvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2Z5SWNRMVhsLXJzL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZnlJY1ExWGwtcnMvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDU5LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJmeUljUTFYbC1ycyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJmeUljUTFYbC1ycyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wMy0xOVQyMzowNTozM1oiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAicWVqTXBUa1ptVE82b1RGT0JzOFVRWHN5QUd3IiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM1RU16TkRPREUwUWpNNU1UTkJORFpFIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6MDQ6MzVaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIktlbm55IENoZXNuZXkgLSBIZXJlIEFuZCBOb3cgKE9mZmljaWFsIE11c2ljIFZpZGVvKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIktlbm55IENoZXNuZXkgLSBIZXJlIEFuZCBOb3cgKE9mZmljaWFsIE11c2ljIFZpZGVvKSBcblxuTGlzdGVuIHRvIEtlbm55J3MgbmV3IGFsYnVtIEhlcmUgQW5kIE5vdzogaHR0cHM6Ly93bW5hLnNoL2hlcmVhbmRub3dhbGJ1bVxuXG5MWVJJQ1M6IFxuXG5J4oCZdmUgc2VlbiB0aGUgc2t5bGluZSBpbiBOZXcgWW9yayBDaXR5XG5GaXJlZmxpZXMgaW4gVGVubmVzc2VlXG5TaXBwZWQgYSBsaXR0bGUg4oCYc2hpbmUgZnJvbSBhIHBhcGVyIHNhY2tcblRoYXTigJlsbCBrbm9jayB0aGUgaG9ybnMgb2ZmIGEgQ2FkaWxsYWNcbkkgbXVzdOKAmXZlIHNhdCBvbiBhIGRvemVuIGlzbGFuZHNcbknigJl2ZSB3YXRjaGVkIHRoZSBzdW4gc2luayBpbnRvIHRoZSBzZWFcbkJlZW4gdGhlcmUgZG9uZSB0aGF0IGdvdCB0aGUgdC1zaGlydCBhbmQgaGF0XG5CdXQgbXkgZmF2b3JpdGUgcGxhY2UgdG8gYmUgaXNcbkhlcmUgYW5kIG5vd1xuXG5Ob3doZXJlIGVsc2UgaW4gdGhpcyB3b3JsZCB0b25pZ2h0XG5Zb3UgYW5kIG1lLCBhaW7igJl0IGl0IGdvb2QgdG8gYmUgYWxpdmVcbkFpbuKAmXQgbm8gYmV0dGVyIHBsYWNlLCBhaW7igJl0IG5vIGJldHRlciB0aW1lXG5UaGFuIGhlcmUgYW5kIG5vd1xuRXZlcnlib2R54oCZcyB3YWl0aW7igJksIGJ1dCB0aGV54oCZcmUgd2FpdGlu4oCZIG9uIHdoYXRcbkJldHRlciBnZXQgdG8gbGl2aW7igJkg4oCZY2F1c2UgYWxsIHdlIGdvdCBpc1xuSGVyZSBhbmQgbm93XG5cblRoaW5rIEkgZmVsbCBpbiBsb3ZlIGZvciB0aGUgZmlyc3QgdGltZVxuV2l0aCB0aGUgR3VsZiBvZiBNZXhpY29cblRob3VnaHQgSSBmb3VuZCBhIHRydWUgbG92ZSBpbiBNYWxpYnUsIGJ1dFxuVGhhdCB3YXRlciB3YXMgYSBsaXR0bGUgdG9vIGNvbGRcblllYWggSSBsZWZ0IGEgZmV3IHRlYXJzIGluIHRoZSByZWFydmlld1xuT25lIG9yIHR3byB0aGF0IHdlcmUgaGFyZCB0byBmb3JnZXRcbldoeSB5b3UgdGhpbmsgd2UgY2FsbCB0aGUgcHJlc2VudCB0aGUgcHJlc2VudFxu4oCZQ2F1c2UgdGhlcmUgYWlu4oCZdCBubyBiZXR0ZXIgZ2lmdCB0aGFuXG5IZXJlIGFuZCBub3dcblxuTm93aGVyZSBlbHNlIGluIHRoaXMgd29ybGQgdG9uaWdodFxuWW91IGFuZCBtZSwgYWlu4oCZdCBpdCBnb29kIHRvIGJlIGFsaXZlXG5BaW7igJl0IG5vIGJldHRlciBwbGFjZSwgYWlu4oCZdCBubyBiZXR0ZXIgdGltZVxuVGhhbiBoZXJlIGFuZCBub3dcbkV2ZXJ5Ym9keeKAmXMgd2FpdGlu4oCZLCBidXQgdGhleeKAmXJlIHdhaXRpbuKAmSBvbiB3aGF0XG5CZXR0ZXIgZ2V0IHRvIGxpdmlu4oCZIOKAmWNhdXNlIGFsbCB3ZSBnb3QgaXNcbkhlcmUgYW5kIG5vd1xuXG5BIGxvdCBvZiBwZW9wbGUgZHJlYW1pbuKAmSDigJlib3V0IGEgb25lIGRheVxuU29tZWRheXMgd2FpdGlu4oCZIGp1c3QgYXJvdW5kIHRoZSBiZW5kXG5JIHVzZWQgdG8gYmUgb25lLCB3b25kZXJpbuKAmSB3aGVuIHRoZXnigJlkIGNvbWVcbkJ1dCBub3cgSeKAmW0gbGl2aW5nIGluIChidXQgbm93IEnigJltIGxpdmluZyBpbilcbihIZXJlIGFuZCBub3cpXG5ZZWFoIEnigJltIGxpdmluZyBpbiB0aGVcblxuSGVyZSBhbmQgbm93XG5Ob3doZXJlIGVsc2UgaW4gdGhpcyB3b3JsZCB0b25pZ2h0XG5Zb3UgYW5kIG1lLCBhaW7igJl0IGl0IGdvb2QgdG8gYmUgYWxpdmVcbkFpbuKAmXQgbm8gYmV0dGVyIHBsYWNlLCBhaW7igJl0IG5vIGJldHRlciB0aW1lXG5UaGFuIGhlcmUgYW5kIG5vd1xuRXZlcnlib2R54oCZcyB3YWl0aW7igJksIGJ1dCB0aGV54oCZcmUgd2FpdGlu4oCZIG9uIHdoYXRcbkJldHRlciBnZXQgdG8gbGl2aW7igJkg4oCZY2F1c2UgYWxsIHdlIGdvdCBpc1xuSGVyZSBhbmQgbm93XG5cbkNoZWNrIG91dCB0aGUgS2VubnkgQ2hlc25leSBPZmZpY2lhbCBNdXNpYyBWaWRlb3MgUGxheWxpc3QhXHJcbmh0dHBzOi8vYml0Lmx5LzJISlBQeTNcclxuXHJcblN1YnNjcmliZSB0byBLZW5ueeKAmXMgY2hhbm5lbCBmb3IgYWxsIHRoZSBiZXN0IGFuZCBsYXRlc3Qgb2ZmaWNpYWwgbXVzaWMgdmlkZW9zLCBvZmZpY2lhbCBhdWRpbywgYWxidW1zLCBiZWhpbmQgdGhlIHNjZW5lcywgbGl2ZSBwZXJmb3JtYW5jZXMgYW5kIG1vcmUhXHJcbmh0dHBzOi8vYml0Lmx5LzJUNVE4N2tcclxuXHJcblNlZSBLZW5ueSBvbiB0aGUgcm9hZCEgXHJcbmh0dHBzOi8vd3d3Lmtlbm55Y2hlc25leS5jb20vZXZlbnRzIFxyXG5cclxuR2V0IHlvdXIgS2VubnkgQ2hlc25leSBtZXJjaGFuZGlzZSBoZXJlIVxyXG5odHRwczovL3d3dy5rZW5ueWNoZXNuZXkuY29tL3N0b3JlXHJcblxyXG5FeHBsb3JlIEtlbm554oCZcyBpY29uaWMgbXVzaWMgY2F0YWxvZyEgXHJcbmh0dHBzOi8vS2VubnlDaGVzbmV5Lmxuay50by9kaXNjb2dyYXBoeVxyXG5cclxuU3RheSBpbiB0b3VjaCB3aXRoIEtlbm55IVxyXG5XZWJzaXRlOiBodHRwOi8vd3d3Lmtlbm55Y2hlc25leS5jb20vXHJcbkZhY2Vib29rOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vS2VubnlDaGVzbmV5L1xyXG5Ud2l0dGVyOiBodHRwczovL3R3aXR0ZXIuY29tL2tlbm55Y2hlc25leVxyXG5JbnN0YWdyYW06IGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20va2VubnljaGVzbmV5L1xyXG5cclxuVGhlIG9mZmljaWFsIFlvdVR1YmUgY2hhbm5lbCBvZiBLZW5ueSBDaGVzbmV5LiBcclxuIFxyXG5BbiBlaWdodC10aW1lIEVudGVydGFpbmVyIG9mIHRoZSBZZWFyIGF3YXJkIHdpbm5lciwgS2VubnkgQ2hlc25leSBpcyBhIGNvdW50cnkgbXVzaWMgaWNvbiB3aXRoIDMwICMxIGhpdCBzb25ncyBsaWtlIOKAnFRoZXJlIEdvZXMgTXkgTGlmZeKAnSwg4oCcVGhlIEdvb2QgU3R1ZmbigJ0sIOKAnEhvdyBGb3JldmVyIEZlZWxz4oCdLCBhbmQg4oCcR2V0IEFsb25n4oCdIGFzIHdlbGwgYXMgMTYgIzEgYWxidW1zIHN1Y2ggYXMgTm8gU2hvZXMsIE5vIFNoaXJ0LCBObyBQcm9ibGVtcywgV2hlbiBUaGUgU3VuIEdvZXMgRG93biwgVGhlIFJvYWQgYW5kIHRoZSBSYWRpbywgYW5kIFNvbmdzIEZvciBUaGUgU2FpbnRzLiBIaXMgbGVnZW5kYXJ5IGNhdGFsb2cgYWxzbyBpbmNsdWRlcyBwb3B1bGFyIGR1ZXRzIGxpa2Ug4oCcSeKAmW0gQWxpdmXigJ0gd2l0aCBEYXZlIE1hdHRoZXdzLCDigJxFdmVyeWJvZHkgV2FudHMgdG8gR28gdG8gSGVhdmVu4oCdIHdpdGggVGhlIFdhaWxlcnMgYW5kIHRoZSBHUkFNTVktbm9taW5hdGVkIGhpdHMg4oCcRG93biBUaGUgUm9hZOKAnSB3aXRoIE1hYyBNY0FuYWxseSwg4oCcU2hpZnR3b3Jr4oCdIHdpdGggR2VvcmdlIFN0cmFpdCwg4oCcWW91ICYgVGVxdWlsYeKAnSB3aXRoIEdyYWNlIFBvdHRlciwgYW5kIOKAnFNldHRpbmcgdGhlIFdvcmxkIG9uIEZpcmXigJ0gd2l0aCBQIU5LLiBBbGwgdGhlIGhpdHMgYW5kIGF3YXJkcyBhc2lkZSwgS2VubnkgaXMgcmVub3duZWQgZm9yIGhpcyBpbnNwaXJpbmcgbGl2ZSBzaG93cyBhdHRlbmRlZCBieSBoaXMgbGVnaW9ucyBvZiBmYW5zLCBrbm93biBhcyBObyBTaG9lcyBOYXRpb24sIGVhY2ggeWVhci5cclxuICBcclxuI0tlbm55Q2hlc25leSAjSGVyZUFuZE5vdyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0JQWXJYN201VmNzL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQlBZclg3bTVWY3MvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQlBZclg3bTVWY3MvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0JQWXJYN201VmNzL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogNjAsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIkJQWXJYN201VmNzIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIkJQWXJYN201VmNzIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTAzLTI1VDE1OjAwOjA2WiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJxT3NfUVlCU1BTY1JFVGlDaG9YQ3pieU5PNXciLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzR4UWpCRk1VWkJOa05HUWtGRk1rTkYiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTowNDo1M1oiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiSW5ncmlkIEFuZHJlc3MgLSBNb3JlIEhlYXJ0cyBUaGFuIE1pbmUgKE9mZmljaWFsIE11c2ljIFZpZGVvKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkluZ3JpZCBBbmRyZXNzIC0gTW9yZSBIZWFydHMgVGhhbiBNaW5lIChPZmZpY2lhbCBNdXNpYyBWaWRlbylcblxuTGlzdGVuIHRvIFwiTW9yZSBIZWFydHMgVGhhbiBNaW5lXCIgaGVyZTogaHR0cDovL3dtbmEuc2gvbWh0bVxuXG5TdWJzY3JpYmUgZm9yIG1vcmUgY29udGVudDogaHR0cHM6Ly93bW5hLnNoL2luZ3JpZHN1YnNjcmliZVxuXG5MWVJJQ1M6IFxuXG5JIGNhbuKAmXQgd2FpdCB0byBzaG93IHlvdSB3aGVyZSBJIGdyZXcgdXBcbldhbGsgeW91IOKAmXJvdW5kIHRoZSBmb290aGlsbHMgb2YgbXkgdG93blxuUHJvYmFibHkgZmVlbCBsaWtlIHlvdeKAmXZlIGJlZW4gdGhlcmUgYmVmb3JlXG5BZnRlciBoZWFyaW5nIGFsbCB0aGUgc3RvcmllcyBJ4oCZdmUgYmVlbiB0ZWxsaW5nIHlvdVxuRm9yIHNpeCBtb250aHMgbm93XG5cbldl4oCZbGwgcHJvYmFibHkgaGF2ZSB0byBzbGVlcCBpbiBzZXBhcmF0ZSBiZWRyb29tc1xuUGFjayBhIHNoaXJ0IGZvciBjaHVyY2ggYmVjYXVzZSB3ZeKAmWxsIGdvXG5J4oCZbSBub3QgdHJ5aW5nIHRvIHNjYXJlIHlvdSBvZmYgXG5CdXQgSSBqdXN0IHRob3VnaHQgdGhhdCB3ZSBzaG91bGQgdGFsayBhIGZldyB0aGluZ3Mgb3V0XG5CZWZvcmUgd2UgaGl0IHRoZSByb2FkXG5cbklmIEkgYnJpbmcgeW91IGhvbWUgdG8gTWFtYVxuSSBndWVzcyBJIGJldHRlciB3YXJuIHlhXG5TaGUgZmFsbHMgaW4gbG92ZSBhIGxpdHRsZSBmYXN0ZXIgdGhhbiBJIGRvXG5BbmQgbXkgZGFkIHdpbGwgY2hlY2sgeW91ciB0aXJlc1xuUG91ciB5b3Ugd2hpc2tleSBvdmVyIGljZVxuQW5kIHRha2UgeW91IGZpc2hpbmcgYnV0IHByZXRlbmQgdGhhdCBoZSBkb27igJl0IGxpa2UgeW91XG5JZiB3ZSBicmVhayB1cCwgSeKAmWxsIGJlIGZpbmVcbkJ1dCB5b3XigJlsbCBiZSBicmVha2luZyBtb3JlIGhlYXJ0cyB0aGFuIG1pbmVcblxuTXkgc2lzdGVy4oCZcyBnb25uYSBhc2sgYSBtaWxsaW9uIHF1ZXN0aW9uc1xuU2F5IGFueXRoaW5nIHNoZSBjYW4gdG8gdHVybiB5b3UgcmVkXG5BbmQgd2hlbiB5b3UgbWVldCBteSBoaWdoIHNjaG9vbCBmcmllbmRzXG5UaGV54oCZbGwgYnV5IHlvdSBkcmlua3MgYW5kIGZpbGwgeW91IGluXG5PbiBhbGwgdGhlIGNyYXp5IG5pZ2h0cyBJIGNhbuKAmXQgb3V0bGl2ZVxuXG5TbyBpZiBJIGJyaW5nIHlvdSBob21lIHRvIE1hbWFcbkkgZ3Vlc3MgSSBiZXR0ZXIgd2FybiB5YVxuU2hlIGZhbGxzIGluIGxvdmUgYSBsaXR0bGUgZmFzdGVyIHRoYW4gSSBkb1xuQW5kIG15IGRhZCB3aWxsIGNoZWNrIHlvdXIgdGlyZXNcblBvdXIgeW91IHdoaXNrZXkgb3ZlciBpY2VcbkFuZCBidXkgeW91IGRpbm5lciBidXQgcHJldGVuZCB0aGF0IGhlIGRvbuKAmXQgbGlrZSB5b3VcbklmIHdlIGJyZWFrIHVwLCBJ4oCZbGwgYmUgZmluZVxuQnV0IHlvdeKAmWxsIGJlIGJyZWFraW5nIG1vcmUgaGVhcnRzIHRoYW4gbWluZVxuXG5JZiBJIGJyaW5nIHlvdSBob21lIHRvIE1hbWFcbkkgZ3Vlc3MgSSBiZXR0ZXIgd2FybiB5YVxuU2hlIGZlZWxzIGV2ZXJ5IGhlYXJ0YWNoZSBJIGdvIHRocm91Z2hcbkFuZCBpZiBteSBkYWQgc2VlcyBtZSBjcnlpbmdcbkhl4oCZbGwgcG91ciBzb21lIHdoaXNrZXkgb3ZlciBpY2VcbkFuZCB0ZWxsIGEgbGllIGFuZCBzYXkgaGUgbmV2ZXIgcmVhbGx5IGxpa2VkIHlvdVxuSWYgd2UgYnJlYWsgdXAsIEnigJlsbCBiZSBmaW5lXG5CdXQgeW914oCZbGwgYmUgYnJlYWtpbmcgbW9yZSBoZWFydHMgdGhhbiBtaW5lXG5Zb3XigJlsbCBiZSBicmVha2luZyBtb3JlIGhlYXJ0cyB0aGFuIG1pbmVcblxuV2hhdCBpcyBhbiBJbmdyaWQ/IExlYXJuIG1vcmU6IGh0dHA6Ly9pbmdyaWRhbmRyZXNzLmNvbS8gXG5cbkZvbGxvdyBJbmdyaWQ6IFxuaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9pbmdyaWRhbmRyZXNzL1xuaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0luZ3JpZEFuZHJlc3MvXG5odHRwczovL3R3aXR0ZXIuY29tL2luZ3JpZGFuZHJlc3NcblxuTXVzaWMgdmlkZW8gYnkgSW5ncmlkIEFuZHJlc3MuIMKpMjAxOSBXYXJuZXIgTXVzaWMgTmFzaHZpbGxlLlxuXG4jSW5ncmlkQW5kcmVzcyAjTW9yZUhlYXJ0c1RoYW5NaW5lIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkval9BOFpqd3I5bTAvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9qX0E4Wmp3cjltMC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9qX0E4Wmp3cjltMC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkval9BOFpqd3I5bTAvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9qX0E4Wmp3cjltMC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogNjEsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogImpfQThaandyOW0wIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogImpfQThaandyOW0wIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDE5LTA0LTI0VDE2OjAwOjQyWiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJRdU9oRzcyVG51V1BxVXVicUkwMmpHQmJSdW8iLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzQzT1VZeU1qazNPRVF3UmpsQk9EVkciLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTowNTowMloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiRGVtaSBMb3ZhdG8gLSBJIExvdmUgTWUiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJMaXN0ZW4gdG8g4oCcSSBMb3ZlIE1l4oCdOiBodHRwczovL0RlbWlMb3ZhdG8ubG5rLnRvL0lMT1ZFTUVcblNob3A6IGh0dHBzOi8vc2hvcC5kZW1pbG92YXRvLmNvbS8gXG5cbkRpcmVjdGVkIGJ5IEhhbm5haCBMdXggRGF2aXNcblByb2R1Y2VkIGJ5IEJyYW5kb24gQm9uZmlnbGlvXG5Qcm9kdWN0aW9uIENvbXBhbnk6IExvbmRvbiBBbGxleVxuXG5Db25uZWN0IHdpdGggRGVtaTpcblN1YnNjcmliZTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci90aGVyZWFsZGVtaWxvdmF0by8/c3ViX2NvbmZpcm1hdGlvbj0xXG5JbnN0YWdyYW0gaHR0cDovL2luc3RhZ3JhbS5jb20vZGRsb3ZhdG9cblR3aXR0ZXIgaHR0cDovL3R3aXR0ZXIuY29tL2RkbG92YXRvXG5GYWNlYm9vayBodHRwOi8vZmFjZWJvb2suY29tL2RlbWlsb3ZhdG9cbk9mZmljaWFsIHNpdGUgaHR0cDovL2RlbWlsb3ZhdG8uY29tXG5cbkpvaW4gaGVyIG1haWxpbmcgbGlzdCB0byBzdGF5IHVwIHRvIGRhdGU6IFxuaHR0cDovL3d3dy5kZW1pbG92YXRvLmNvbS8jbWFpbGluZy1saXN0XG5cbkx5cmljczpcblxuRmxpcHBpbmcgdGhyb3VnaCBhbGwgb2YgdGhlc2UgbWFnYXppbmVzXG5UZWxsaW5nIG1lIHdobyBJ4oCZbSBzdXBwb3NlZCB0byBiZVxuV2F5IHRvbyBnb29kIGF0IGNhbW91ZmxhZ2VcbkNhbuKAmXQgc2VlIHdoYXQgSSBhbSxcbkkganVzdCBzZWUgd2hhdCBJ4oCZbSBub3RcbknigJltIGd1aWx0eSDigJhib3V0IGV2ZXJ5dGhpbmcgdGhhdCBJIGVhdCAoZXZlcnkgc2luZ2xlIHRoaW5nKVxuRmVlbGluZyBteXNlbGYgaXMgYSBmZWxvbnlcbkplZGkgbGV2ZWwgc2Fib3RhZ2VcblZvaWNlcyBpbiBteSBoZWFkIG1ha2UgdXAgbXkgZW50b3VyYWdlXG5cbkNhdXNlIEnigJltIGEgYmxhY2sgYmVsdCB3aGVuIEnigJltIGJlYXRpbmcgdXAgb24gbXlzZWxmXG5CdXQgSeKAmW0gYW4gZXhwZXJ0IGF0IGdpdmluZyBsb3ZlIHRvIHNvbWVib2R5IGVsc2Vcbkkg4oCTIG1lIGFuZCBteXNlbGYgYW5kXG5JIOKAkyBkb27igJl0IHNlZSBleWUgdG8gXG5FeWUg4oCTIG1lIGFuZCBteXNlbGYgYW5kXG5JIOKAkyBcblxuT2gsIHdoeSBkbyBJIGNvbXBhcmUgbXlzZWxmIHRvIGV2ZXJ5b25lXG5BbmQgSSBhbHdheXMgZ290IG15IGZpbmdlciBvbiB0aGUgc2VsZiBkZXN0cnVjdFxuSSB3b25kZXIgd2hlbiBJIGxvdmUgbWUgaXMgZW5vdWdoICh5ZWFoLCB5ZWFoLCB5ZWFoKVxuSSB3b25kZXIgd2hlbiBJIGxvdmUgbWUgaXMgZW5vdWdoICh5ZWFoLCB5ZWFoLCB5ZWFoKVxuXG5XaHkgYW0gSSBhbHdheXMgbG9va2luZyBmb3IgYSByaWRlIG9yIGRpZVxuQ2F1c2UgbWluZeKAmXMgdGhlIG9ubHkgaGVhcnQgSeKAmW0gZ29ubmEgaGF2ZSBmb3IgbGlmZVxuQWZ0ZXIgYWxsIHRoZSB0aW1lcyBJIHdlbnQgYW5kIGZ1Y2tlZCBpdCB1cCAoYWxsIHRoZSB0aW1lcyBJIHdlbnQgYW5kIGZ1Y2tlZCBpdCB1cClcbkkgd29uZGVyIHdoZW4gSSBsb3ZlIG1lIGlzIGVub3VnaCAoeWVhaCwgeWVhaCwgeWVhaClcblxuWWVhaCwgeWVhaFxuWWVhaCwgeWVhaFxuWWVhaCwgeWVhaFxuWWVhaCwgeWVhaFxuSSB3b25kZXIgd2hlbiBJIGxvdmUgbWUgaXMgZW5vdWdoXG5JIHdvbmRlciB3aGVuIEkgbG92ZSBtZSBpcyBlbm91Z2hcblxuSGF0ZXJzIHRoYXQgbGl2ZSBvbiB0aGUgaW50ZXJuZXRcbkxpdmUgaW4gbXkgaGVhZCwgc2hvdWxkIGJlIHBheWluZyByZW50XG5J4oCZbSB3YXkgdG9vIGdvb2QgYXQgbGlzdGVuaW5nXG5BbGwgdGhlc2UgY29tbWVudHMgZnVja2luZyB1cCBteSBlbmVyZ3lcblxuQ2F1c2UgSeKAmW0gYSBibGFjayBiZWx0IHdoZW4gSeKAmW0gYmVhdGluZyB1cCBvbiBteXNlbGZcbkJ1dCBJ4oCZbSBhbiBleHBlcnQgYXQgZ2l2aW5nIGxvdmUgdG8gc29tZWJvZHkgZWxzZVxuSSDigJMgbWUgYW5kIG15c2VsZiBhbmRcbkkg4oCTIGRvbuKAmXQgc2VlIGV5ZSB0byBcbkV5ZSDigJMgbWUgYW5kIG15c2VsZiBhbmRcbkkg4oCTIFxuXG5PaCwgd2h5IGRvIEkgY29tcGFyZSBteXNlbGYgdG8gZXZlcnlvbmVcbkFuZCBJIGFsd2F5cyBnb3QgbXkgZmluZ2VyIG9uIHRoZSBzZWxmIGRlc3RydWN0XG5JIHdvbmRlciB3aGVuIEkgbG92ZSBtZSBpcyBlbm91Z2ggKHllYWgsIHllYWgsIHllYWgpXG5JIHdvbmRlciB3aGVuIEkgbG92ZSBtZSBpcyBlbm91Z2ggKHllYWgsIHllYWgsIHllYWgpXG5cbldoeSBhbSBJIGFsd2F5cyBsb29raW5nIGZvciBhIHJpZGUgb3IgZGllXG5DYXVzZSBtaW5l4oCZcyB0aGUgb25seSBoZWFydCBJ4oCZbSBnb25uYSBoYXZlIGZvciBsaWZlXG5BZnRlciBhbGwgdGhlIHRpbWVzIEkgd2VudCBhbmQgZnVja2VkIGl0IHVwIChhbGwgdGhlIHRpbWVzIEkgd2VudCBhbmQgZnVja2VkIGl0IHVwKVxuSSB3b25kZXIgd2hlbiBJIGxvdmUgbWUgaXMgZW5vdWdoICh5ZWFoLCB5ZWFoLCB5ZWFoKVxuXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5JIHdvbmRlciB3aGVuIEkgbG92ZSBtZSBpcyBlbm91Z2hcbkkgd29uZGVyIHdoZW4gSSBsb3ZlIG1lIGlzIGVub3VnaFxuXG5J4oCZbSBteSBvd24gd29yc3QgY3JpdGljXG5UYWxrIGEgd2hvbGUgbG90IG9mIHNoaXRcbkJ1dCBJ4oCZbSBhIHRlbiBvdXQgb2YgdGVuXG5FdmVuIHdoZW4gSSBmb3JnZXRcbkktSS1JLUkgKEnigJltIGEgdGVuIG91dCBvZiB0ZW4sIGRvbid0IHlvdSBldmVyIGZvcmdldCBpdClcblxuSeKAmW0gbXkgb3duIHdvcnN0IGNyaXRpY1xuVGFsayBhIHdob2xlIGxvdCBvZiBzaGl0XG5CdXQgSeKAmW0gYSB0ZW4gb3V0IG9mIHRlblxuRXZlbiB3aGVuIEkgZm9yZ2V0XG5JLUktSS1JIFxuXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5JIHdvbmRlciB3aGVuIEkgbG92ZSBtZSBpcyBlbm91Z2hcbkkgd29uZGVyIHdoZW4gSSBsb3ZlIG1lIGlzIGVub3VnaFxuXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5ZZWFoLCB5ZWFoXG5cbiNJTG92ZU1lICNEZW1pTG92YXRvXG5cbk11c2ljIHZpZGVvIGJ5IERlbWkgTG92YXRvIHBlcmZvcm1pbmcgSSBMb3ZlIE1lLiDCqSAyMDIwIElzbGFuZCBSZWNvcmRzLCBhIGRpdmlzaW9uIG9mIFVNRyBSZWNvcmRpbmdzLCBJbmMuIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdkltdnpRQ2IwbzgvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS92SW12elFDYjBvOC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS92SW12elFDYjBvOC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdkltdnpRQ2Iwbzgvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS92SW12elFDYjBvOC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogNjIsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogInZJbXZ6UUNiMG84IgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogInZJbXZ6UUNiMG84IiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTAzLTA2VDA1OjAwOjEwWiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICI0d2RSLUhtWDlvczhBYlFFaUJBYktnWGNZS0kiLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzR6UmtZME5UbEdRall3TmpKRE1FSkIiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTowNToxMFoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiSlAgU2F4ZSAtIElmIHRoZSBXb3JsZCBXYXMgRW5kaW5nIChPZmZpY2lhbCBWaWRlbykgZnQuIEp1bGlhIE1pY2hhZWxzIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiT2ZmaWNpYWwgTXVzaWMgVmlkZW8gfCBKUCBTYXhlIGZ0LiBKdWxpYSBNaWNoYWVscyDigJMgSWYgVGhlIFdvcmxkIFdhcyBFbmRpbmdcblxuTGlzdGVuIHRvIEhvbGQgSXQgVG9nZXRoZXJcbmh0dHBzOi8vSlBTYXhlLmxuay50by9Ib2xkSXRUb2dldGhlciAgXG5cblN1YnNjcmliZSB0byB0aGUgSlAgU2F4ZSBZb3VUdWJlIENoYW5uZWxcbmh0dHBzOi8vSlBTYXhlLmxuay50by9Zb3VUdWJlXG5cbkxpc3RlbiB0byBJZiBUaGUgV29ybGQgV2FzIEVuZGluZ1xuaHR0cHM6Ly9KUFNheGUubG5rLnRvL0lmVGhlV29ybGRXYXNFbmRpbmdcblxuRm9sbG93IEpQIFNheGVcbldlYnNpdGU6IGh0dHBzOi8vd3d3Lmpwc2F4ZS5jb21cbkluc3RhZ3JhbTogaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9qcHNheGUvXG5GYWNlYm9vazogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2pwc2F4ZS9cblR3aXR0ZXI6IGh0dHBzOi8vdHdpdHRlci5jb20vanBzYXhlXG5cbkRpcmVjdGVkIGJ5IEphc29uIExlc3RlclxuUHJvZHVjZWQgYnkgTGF1cmEgQnVyaGVubiBmb3IgT3VyIFNlY3JldCBIYW5kc2hha2VcbkNpbmVtYXRvZ3JhcGh5IGJ5IFBvd2VsbCBSb2JpbnNvblxuXG5MeXJpY3Ncbkkgd2FzIGRpc3RyYWN0ZWQgXG5hbmQgaW4gdHJhZmZpYyBcbkkgZGlkbuKAmXQgZmVlbCBpdCBcbndoZW4gdGhlIGVhcnRocXVha2UgaGFwcGVuZWQgXG4gXG5idXQgaXQgcmVhbGx5IGdvdCBtZSB0aGlua2lu4oCZIFxud2VyZSB5b3Ugb3V0IGRyaW5raW7igJkgXG53ZXJlIHlvdSBpbiB0aGUgbGl2aW5nIHJvb20gXG5jaGlsbGluJyB3YXRjaGlu4oCZIHRlbGV2aXNpb24gXG5haCBpdOKAmXMgYmVlbiBhIHllYXIgbm93IFxudGhpbmsgSSd2ZSBmaWd1cmVkIG91dCBob3cgXG5ob3cgdG8gbGV0IHlvdSBnbyBhbmQgbGV0IFxuY29tbXVuaWNhdGlvbiBkaWUgb3V0IFxuXG5JIGtub3cgeW91IGtub3cgd2Uga25vdyB5b3Ugd2VyZW7igJl0IGRvd24gZm9yIGZvcmV2ZXIgYW5kIGl04oCZcyBmaW5lIFxuSSBrbm93IHlvdSBrbm93IHdlIGtub3cgd2Ugd2VyZW7igJl0IG1lYW50IGZvciBlYWNoIG90aGVyIGFuZCBpdOKAmXMgZmluZSBcblxuYnV0IGlmIHRoZSB3b3JsZCB3YXMgZW5kaW5nIFxueW914oCZZCBjb21lIG92ZXIgcmlnaHQgXG55b3XigJlkIGNvbWUgb3ZlciBhbmQgeW914oCZZCBzdGF5IHRoZSBuaWdodCBcbndvdWxkIHlvdSBsb3ZlIG1lIGZvciB0aGUgaGVsbCBvZiBpdCBcbmFsbCBvdXIgZmVhcnMgd291bGQgYmUgaXJyZWxldmFudCBcbmlmIHRoZSB3b3JsZCB3YXMgZW5kaW5nIFxueW914oCZZCBjb21lIG92ZXIgcmlnaHQgXG50aGUgc2t54oCZZCBiZSBmYWxsaW5nIGFuZCBJ4oCZZCBob2xkIHlvdSB0aWdodCBcbmFuZCB0aGVyZSB3b3VsZG7igJl0IGJlIGEgcmVhc29uIHdoeSBcbndlIHdvdWxkIGV2ZW4gaGF2ZSB0byBzYXkgZ29vZGJ5ZSBcbmlmIHRoZSB3b3JsZCB3YXMgZW5kaW5nIFxueW914oCZZCBjb21lIG92ZXIgcmlnaHQgXG5SaWdodD8gXG5JZiB0aGUgd29ybGQgd2FzIGVuZGluZyAgXG5Zb3XigJlkIGNvbWUgb3ZlciByaWdodCBcblJpZ2h0PyBcblxuSSB0cmllZCB0byBpbWFnaW5lIFxueW91ciByZWFjdGlvbiBcbmRpZG7igJl0IHNjYXJlIG1lIHdoZW4gdGhlIGVhcnRocXVha2UgaGFwcGVuZWQgXG5CdXQgaXQgcmVhbGx5IGdvdCBtZSB0aGlua2lu4oCZIFxudGhhdCBuaWdodCB3ZSB3ZW50IGRyaW5raW7igJkgXG5zdHVtYmxlZCBpbiB0aGUgaG91c2UgXG5hbmQgZGlkbuKAmXQgbWFrZSBpdCBwYXN0IHRoZSBraXRjaGVuIFxuYWggaXTigJlzIGJlZW4gYSB5ZWFyIG5vdyBcbnRoaW5rIEkndmUgZmlndXJlZCBvdXQgaG93IFxuaG93IHRvIHRoaW5rIGFib3V0IHlvdSBcbndpdGhvdXQgaXQgcmlwcGlu4oCZIG15IGhlYXJ0IG91dCBcblxuSSBrbm93IHlvdSBrbm93IHdlIGtub3cgeW91IHdlcmVu4oCZdCBkb3duIGZvciBmb3JldmVyIGFuZCBpdOKAmXMgZmluZSBcbkkga25vdyB5b3Uga25vdyB3ZSBrbm93IHdlIHdlcmVu4oCZdCBtZWFudCBmb3IgZWFjaCBvdGhlciBhbmQgaXTigJlzIGZpbmUgXG5cbiNqcHNheGUgfCAjSWZUaGVXb3JsZFdhc0VuZGluZyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzFqTzJ3U3BBb3hBL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMWpPMndTcEFveEEvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMWpPMndTcEFveEEvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzFqTzJ3U3BBb3hBL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMWpPMndTcEFveEEvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDYzLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICIxak8yd1NwQW94QSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICIxak8yd1NwQW94QSIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxOS0xMC0xN1QxNzowMDowMFoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiTDdoQzEtby15bzc0Mm9WUEQ4RUR5andsZFRFIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM1Rk5ERkVOVEpGTURsRk5FUXlPRFUzIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6MDU6MjBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIlNhbSBTbWl0aCwgRGVtaSBMb3ZhdG8gLSBJ4oCZbSBSZWFkeSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIidJ4oCZbSBSZWFkeeKAmSBvdXQgbm93OiBodHRwOi8vc2Ftc21pdGgud29ybGQvSW1SZWFkeUlEXG4gXG5MaXN0ZW4gdG8gU2FtIFNtaXRo4oCZcyBDb21wbGV0ZSBDb2xsZWN0aW9uIGhlcmU6IGh0dHA6Ly9zYW1zbWl0aC53b3JsZC9DYXRhbG9ndWVJRFxuIFxuRGlyZWN0ZWQgYnkgSm9yYSBGcmFudHppc1xuUHJvZHVjZWQgYnkgUFJFVFRZQklSRFxuVmlkZW8gQ29tbWlzc2lvbmVyIC0gS2V2aW4gS2xvZWNrZXJcblZQIC8gRXhlY3V0aXZlIFByb2R1Y2VyIC0gQ2FuZGljZSBEcmFnb25hc1xuRXhleGN1dGl2ZSBQcm9kdWNlciAtIENocmlzIENsYXZhZGV0c2NoZXJcbkRpcmVjdG9yIG9mIFBob3RvZ3JhcGh5IC0gUm9iIFdpdHRcbkNob3Jlb2dyYXBoZXIgLSAgU2VhbiBCYW5raGVhZFxuSGVhZCBvZiBQcm9kdWN0aW9uIC0gUmlrYSBPc2VuYmVyZ1xuTGluZSBQcm9kdWNlciAtIEF1dHVtbiBIeW1lc1xuUHJvZHVjdGlvbiBTdXBlcnZpc29yIC0gS2VuaWEgR3V0aWVycmV6XG5TYW0gU21pdGggU3R5bGlzdCAtIEFkYW0gV2luZGVyXG5TYW0gU21pdGggSE1VIC0gU2llbnJlZSBEdVxuRGVtaSBMb3ZhdG8gU3R5bGlzdCAtIFNpZW5hIE1vbnRlc2Fub1xuRGVtaSBMb3ZhdG8gSE1VIC0gUGF1bCBOb3J0b24sIFJva2FlbCBMaXphbWFcblxuTHlyaWNzXG5JdOKAmXMgYSBjb2xkIG5pZ2h0IGluIG15IGJlZCBpbiB0aGUgaGVhdCBvZiB0aGUgc3VtbWVyXG5J4oCZdmUgYmVlbiB3YWl0aW5nIHBhdGllbnRseSBmb3IgYSBiZWF1dGlmdWwgbG92ZXJcbkhl4oCZcyBub3QgYSBjaGVhdGVyXG5BIGJlbGlldmVyXG5IZeKAmXMgYSB3YXJtLCB3YXJtIGJsb29kZWQgYWNoaWV2ZXJcbkl04oCZcyBhIGxvbmVseSBuaWdodCBpbiBteSBiZWQgaW4gdGhlIGhlYXQgb2YgdGhlIHN1bW1lclxuXG5JdOKAmXMgc28gaGFyZCB3aGVuIHlvdeKAmXJlIHdpdGggc29tZW9uZVxuWW91ciBoZWFydCBicmVha3MgYW5kIGl0IGFpbuKAmXQgbm8gZnVuXG5CdXQgSSBnb3R0YSB0YWtlIHRoYXQgcmlzayB0b25pZ2h0XG5cbknigJltIHJlYWR5LCBJ4oCZbSByZWFkeSwgSeKAmW0gcmVhZHksIEnigJltIHJlYWR5XG5Gb3Igc29tZW9uZSB0byBsb3ZlIG1lXG5J4oCZbSByZWFkeSwgSeKAmW0gcmVhZHksIEnigJltIHJlYWR5LCBJ4oCZbSByZWFkeVxuRm9yIHNvbWVvbmUgdG8gbG92ZSBtZVxuRm9yIHNvbWVvbmUgdG8gbG92ZSBtZVxuXG5JdOKAmXMgYSBob3QgbmlnaHQgaW4gbXkgaGVhZCBpbiB0aGUgY2hpbGwgb2YgdGhlIHdpbnRlciwgbm9cbknigJl2ZSBiZWVuIGxvb2tpbmcgaGFyZCBmb3IgYSBsb3ZlciBkaXNndWlzZWQgYXMgYSBzaW5uZXIsIG5vXG5Ob3QgYSBjaGVhdGVyXG5BIHJlZGVlbWVyXG5IZeKAmXMgYSBjb2xkLCBjb2xkIGJsb29kZWQgZGVmZWF0ZXJcbkl04oCZcyBhIGhvdCBuaWdodCBpbiBteSBoZWFkIGluIHRoZSBjaGlsbCBvZiB0aGUgd2ludGVyLCBub1xuXG5JdOKAmXMgc28gaGFyZCB3aGVuIHlvdeKAmXJlIHdpdGggc29tZW9uZVxuWW91ciBoZWFydCBicmVha3MgYW5kIGl0IGFpbuKAmXQgbm8gZnVuXG5CdXQgSSBnb3R0YSB0YWtlIHRoYXQgcmlzayB0b25pZ2h0XG5cbknigJltIHJlYWR5LCBJ4oCZbSByZWFkeSwgSeKAmW0gcmVhZHksIEnigJltIHJlYWR5XG5Gb3Igc29tZW9uZSB0byBsb3ZlIG1lXG5J4oCZbSByZWFkeSwgSeKAmW0gcmVhZHksIEnigJltIHJlYWR5LCBJ4oCZbSByZWFkeVxuRm9yIHNvbWVvbmUgdG8gbG92ZSBtZVxuRm9yIHNvbWVvbmUgdG8gbG92ZSBtZVxuXG5JdOKAmXMgYSBjb2xkIG5pZ2h0IGluIG15IGJlZCBpbiB0aGUgaGVhdCBvZiB0aGUgc3VtbWVyXG5ObywgSeKAmXZlIGJlZW4gbG9va2luZyBoYXJkIGZvciBhIGxvdmVyIGRpc2d1aXNlZCBhcyBhIHNpbm5lclxuXG5J4oCZbSByZWFkeSwgSeKAmW0gcmVhZHksIEnigJltIHJlYWR5LCBJ4oCZbSByZWFkeVxuRm9yIHNvbWVvbmUgdG8gbG92ZSBtZVxuSeKAmW0gcmVhZHksIEnigJltIHJlYWR5LCBJ4oCZbSByZWFkeSwgSeKAmW0gcmVhZHlcbkZvciBzb21lb25lIHRvIGxvdmUgbWVcbkZvciBzb21lb25lIHRvIGxvdmUgbWVcblxuTGlzdGVuIHRvIFNhbSBTbWl0aCdzIENvbXBsZXRlIENvbGxlY3Rpb24gaGVyZTogaHR0cDovL3NhbXNtaXRoLndvcmxkL0NhdGFsb2d1ZUlEXG5cbkZvbGxvdyBTYW0gU21pdGg6XG5odHRwOi8vc2Ftc21pdGh3b3JsZC5jb21cbmh0dHA6Ly9mYWNlYm9vay5jb20vc2Ftc21pdGh3b3JsZFxuaHR0cDovL2luc3RhZ3JhbS5jb20vc2Ftc21pdGhcbmh0dHA6Ly90d2l0dGVyLmNvbS9zYW1zbWl0aFxuXG5Db25uZWN0IHdpdGggRGVtaTpcblN1YnNjcmliZSBodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL3RoZXJlYWxkZW1pbG92YXRvXG5JbnN0YWdyYW0gaHR0cDovL2luc3RhZ3JhbS5jb20vZGRsb3ZhdG9cblR3aXR0ZXIgaHR0cDovL3R3aXR0ZXIuY29tL2RkbG92YXRvXG5GYWNlYm9vayBodHRwOi8vZmFjZWJvb2suY29tL2RlbWlsb3ZhdG9cbk9mZmljaWFsIHNpdGUgaHR0cDovL2RlbWlsb3ZhdG8uY29tXG5Kb2luIGhlciBtYWlsaW5nIGxpc3QgdG8gc3RheSB1cCB0byBkYXRlIGh0dHA6Ly93d3cuZGVtaWxvdmF0by5jb20vI21haWxpbmctbGlzdFxuIFxuU3BlY2lhbCB0aGFua3MgdG8gVGhlIFRyZXZvciBQcm9qZWN0LCB0aGUgd29ybGTigJlzIGxhcmdlc3Qgc3VpY2lkZSBwcmV2ZW50aW9uIGFuZCBjcmlzaXMgaW50ZXJ2ZW50aW9uIG9yZ2FuaXphdGlvbiBmb3IgTEdCVFEgeW91bmcgcGVvcGxlLCBmb3IgdGhlIG9yZ2FuaXphdGlvbidzIHN1cHBvcnQgaW4gdGhlIG1ha2luZyBvZiB0aGlzIHZpZGVvLlxuXG4jU2FtU21pdGggI0RlbWlMb3ZhdG8gI0ltUmVhZHlcblxuTXVzaWMgdmlkZW8gYnkgU2FtIFNtaXRoLCBEZW1pIExvdmF0byBwZXJmb3JtaW5nIEnigJltIFJlYWR5LiDCqSAyMDIwIFVuaXZlcnNhbCBNdXNpYyBPcGVyYXRpb25zIExpbWl0ZWRcblxuaHR0cDovL3Zldm8ubHkvaHJzMlNYIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZ2xEMU00MThiQzAvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9nbEQxTTQxOGJDMC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9nbEQxTTQxOGJDMC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZ2xEMU00MThiQzAvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9nbEQxTTQxOGJDMC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogNjQsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogImdsRDFNNDE4YkMwIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogImdsRDFNNDE4YkMwIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTA0LTE2VDIzOjAwOjExWiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICI2TWVPVFEyUHY5OVNQRnpoc2NTM0NwSktvTVUiLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzVHUkRWR01FUkJPRU16UTBGRk16TXoiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTozODo1NVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiWW8gUGVycmVvIFNvbGEgLSBCYWQgQnVubnkgKCBWaWRlbyBPZmljaWFsICkiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJZbyBQZXJyZW8gU29sYSAtIEJhZCBCdW5ueVxuI1lITFFNRExHXG5cbkRPV05MT0FEIFlITFFNRExHOiBodHRwczovL3JpbWFzLmlvL1lITFFNRExHXG5cbk1FUkNIOiBodHRwczovL1lITFFNRExHLmNvbVxuXG4tQ2xpY2sgcGFyYSBzdXNjcmliaXJ0ZTogaHR0cDovL2JpdC5seS9iYWRidW5ueXByXG5cbkZvbGxvdyBNZSAvIFNpZ3VlbWUgZW46IFxuXG5JbnN0YWdyYW06IGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vYmFkYnVubnlwci9cbkZhY2Vib29rOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vQmFkQnVubnlPZmZpY2lhbC9cblR3aXR0ZXI6IGh0dHBzOi8vdHdpdHRlci5jb20vc2FuYmVuaXRvXG5cbmJvb2tpbmdAcmltYXNtdXNpYy5jb21cblxuI0JhZEJ1bm55IFxuXG7CqSAyMDIwIFJpbWFzIEVudGVydGFpbm1lbnQiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9HdFNSS3dEQ2FaTS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0d0U1JLd0RDYVpNL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0d0U1JLd0RDYVpNL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9HdFNSS3dEQ2FaTS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0d0U1JLd0RDYVpNL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA2NSwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiR3RTUkt3RENhWk0iCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiR3RTUkt3RENhWk0iLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMjAtMDMtMjdUMTk6MDA6MDNaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIlUzTEg0VFphckFMVzNaMThicy1DQWFLMVRyYyIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNDVPRFkwUkRBMU4wWkJNa0UxTTBFMSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjM5OjE2WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJSZWdhcmQgLSBSaWRlIEl0IChPZmZpY2lhbCBWaWRlbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJSZWdhcmQgLSBSaWRlIEl0OiBPdXQgTm93ICBodHRwczovL2xuay50by9ESlJlZ2FyZFJpZGVJdHlkXG5cblJlZ2FyZCBTcG90aWZ5IFBsYXlsaXN0XG5odHRwczovL29wZW4uc3BvdGlmeS5jb20vcGxheWxpc3QvNUFPQk02REdXWkRWQWUwWm5xcUdDaz9zaT1uaUZWclk2bFNCU3ZVQjlLckFHRThnXG4gXG5cbkZvbGxvdyBSZWdhcmRcbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vZGpyZWdhcmRvZmZpY2lhbFxuaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0RqUmVnYXJkT2ZmaWNpYWxcbmh0dHBzOi8vdHdpdHRlci5jb20vRGFyZGFuUmVnYXJkXG5odHRwczovL3d3dy50aWt0b2suY29tL0BkanJlZ2FyZFxuaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL2FydGlzdC80b2ZDQm95RWlHU2VQRkFHNTAweGV2P3NpPThBaWNZZUQ1UjJ5ZGQ2THAtbnJJRlFcblxuXG5NdXNpYyB2aWRlbyBieSBESiBSZWdhcmQgcGVyZm9ybWluZyBSaWRlIEl0IChPZmZpY2lhbCBBdWRpbykuIFxuKEMpIDIwMTkgTWluaXN0cnkgb2YgU291bmQgUmVjb3JkaW5nc1xuXG5cblJlZ2FyZCBNYW5hZ2VtZW50XG53d3cubGVhZm1hbmFnZW1lbnQubmV0XG5sZWFmLm1hbmFnZW1lbnQxQGdtYWlsLmNvbVxuXG4jUmVnYXJkICNSaWRlSXQiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS91Y1ZVRW1qS3Nrby9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3VjVlVFbWpLc2tvL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3VjVlVFbWpLc2tvL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS91Y1ZVRW1qS3Nrby9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3VjVlVFbWpLc2tvL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA2NiwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAidWNWVUVtaktza28iCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAidWNWVUVtaktza28iLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTktMTAtMDRUMDg6MDA6MDlaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogImdBLWgwTDFGLVFvem5JemNwV29YZXVQMU92cyIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNDROamcxTURVM1FqSTBSVFF5UmpkRCIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjM5OjMxWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJILkUuUi4gLSBTbGlkZSAoT2ZmaWNpYWwgVmlkZW8pIGZ0LiBZRyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIuKAnFNsaWRl4oCdIGZlYXQuIFlHIE91dCBOb3chIGh0dHBzOi8vc21hcnR1cmwuaXQvelNsaWRlXG5cbkZvbGxvdyBILkUuUi5cbmh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9vZmZpY2lhbEhFUm11c2ljL1xuaHR0cHM6Ly90d2l0dGVyLmNvbS9IRVJNdXNpY3hcbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaGVybXVzaWNvZmZpY2lhbCBcblxuRm9sbG93IFlHOiBcbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20veWcvXG5odHRwczovL3R3aXR0ZXIuY29tL1lHIFxuaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL1lnNDAwL1xuXG4jSEVSICNTbGlkZSAjWUciLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9TVUpsb3lsbUVaTS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1NVSmxveWxtRVpNL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1NVSmxveWxtRVpNL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9TVUpsb3lsbUVaTS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1NVSmxveWxtRVpNL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA2NywKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiU1VKbG95bG1FWk0iCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiU1VKbG95bG1FWk0iLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTktMTAtMTdUMTg6MDA6MDNaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogInJWWFN1WklNaG9udzU4SUhycG1TSi00SUhnVSIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNDVPVFE0T0VNeU5EZzNSREpETWpaRSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjM5OjQ3WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJNaXJhbmRhIExhbWJlcnQgLSBCbHVlYmlyZCAoT2ZmaWNpYWwgVmlkZW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiTGlzdGVuIHRvIE1pcmFuZGEgTGFtYmVydOKAmXMgYWxidW0g4oCYV2lsZGNhcmQnLCBmZWF0dXJpbmcg4oCcQmx1ZWJpcmTigJ0sIG91dCBub3c6IGh0dHBzOi8vTWlyYW5kYS5sbmsudG8vV2lsZGNhcmRBWSAgIFxuXG5BcHBsZSBNdXNpYzogaHR0cHM6Ly9NaXJhbmRhLmxuay50by9XaWxkY2FyZEFZL2FwcGxlbXVzaWMgXG5TcG90aWZ5OiBodHRwczovL01pcmFuZGEubG5rLnRvL1dpbGRjYXJkQVkvc3BvdGlmeSBcbkFtYXpvbjogaHR0cHM6Ly9NaXJhbmRhLmxuay50by9XaWxkY2FyZEFZL2FtYXpvbm11c2ljIFxuWW91VHViZSBNdXNpYzogaHR0cHM6Ly9NaXJhbmRhLmxuay50by9XaWxkY2FyZEFZL3lvdXR1YmVtdXNpYyBcbllvdVR1YmU6IGh0dHBzOi8vTWlyYW5kYS5sbmsudG8vV2lsZGNhcmRBWS95b3V0dWJlIFxuUGFuZG9yYTogaHR0cHM6Ly9NaXJhbmRhLmxuay50by9XaWxkY2FyZEFZL3BhbmRvcmEgXG5cblNpZ24gdXAgdG8gcmVjZWl2ZSBlbWFpbCB1cGRhdGVzIGZyb20gTWlyYW5kYSBMYW1iZXJ0OiBodHRwOi8vMm1sLnVzL3l0LXVwZGF0ZXNcblN1YnNjcmliZSB0byBNaXJhbmRhIExhbWJlcnTigJlzIENoYW5uZWw6IGh0dHBzOi8vTWlyYW5kYS5sbmsudG8vcHJvZmlsZUFZL3lvdXR1YmUgXG5TZWUgTWlyYW5kYSBMYW1iZXJ0IG9uIFRvdXI6IGh0dHA6Ly8ybWwudXMveXQtdG91clxuIFxuRm9sbG93IE1pcmFuZGE6XG5GYWNlYm9vazogaHR0cHM6Ly9NaXJhbmRhLmxuay50by9wcm9maWxlQVkvZmFjZWJvb2sgXG5JbnN0YWdyYW06IGh0dHBzOi8vTWlyYW5kYS5sbmsudG8vcHJvZmlsZUFZL2luc3RhZ3JhbSBcblR3aXR0ZXI6IGh0dHBzOi8vTWlyYW5kYS5sbmsudG8vcHJvZmlsZUFZL3R3aXR0ZXIgXG5UaWtUb2s6IGh0dHBzOi8vTWlyYW5kYS5sbmsudG8vcHJvZmlsZUFZL3Rpay10b2sgXG5WaXNpdCBXZWJzaXRlOiBodHRwczovL01pcmFuZGEubG5rLnRvL3Byb2ZpbGVBWS9vZmZpY2lhbHNpdGUgXG4gXG4jTWlyYW5kYUxhbWJlcnQgI0JsdWViaXJkICNPZmZpY2lhbFZpZGVvICNXaWxkY2FyZCIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL25VQjhvZ3Z6ZV84L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvblVCOG9ndnplXzgvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvblVCOG9ndnplXzgvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL25VQjhvZ3Z6ZV84L3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvblVCOG9ndnplXzgvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDY4LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJuVUI4b2d2emVfOCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJuVUI4b2d2emVfOCIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wMy0yMFQxNjoxNToxMVoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAibGhOVW1BT2VDWGlVSlRtWUtsN3NZYXpoT2RNIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0eE5qY3hOelk1TnpNek1VSkZRMFE0IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6NDA6MTBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIkpBQ0tCT1lTICYgVHJhdmlzIFNjb3R0IGZlYXQuIFlvdW5nIFRodWcgLSBPVVQgV0VTVCAoT2ZmaWNpYWwgTXVzaWMgVmlkZW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSkFDS0JPWVMgT1VUIE5PVzogaHR0cHM6Ly9KQUNLQk9ZUy5sbmsudG8vSkFDS0JPWVNcbk9GRklDSUFMIFNUT1JFOiBodHRwczovL0pBQ0tCT1lTLnRyYXZpc3Njb3R0LmNvbS9cblxuRGlyZWN0ZWQgYnkgQ0FDVFVTIEpBQ0sgJiBXSElURSBUUkFTSCBUWUxFUiBcblxuaHR0cHM6Ly9pbnN0YWdyYW0uY29tL3RyYXZpc3Njb3R0XG5odHRwczovL2luc3RhZ3JhbS5jb20vc2hlY2t3ZXNcbmh0dHBzOi8vaW5zdGFncmFtLmNvbS9kb250b2xpdmVyXG5odHRwczovL2luc3RhZ3JhbS5jb20vb2djaGFzZWJcbmh0dHBzOi8vaW5zdGFncmFtLmNvbS9jYWN0dXNqYWNrXG5odHRwczovL3RyYXZpc3Njb3R0LmNvbVxuXG4oQykgMjAyMCBFcGljIFJlY29yZHMuIFdpdGggQ2FjdHVzIEphY2suIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcUFsRjcwTWRmd1UvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9xQWxGNzBNZGZ3VS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9xQWxGNzBNZGZ3VS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcUFsRjcwTWRmd1Uvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9xQWxGNzBNZGZ3VS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogNjksCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogInFBbEY3ME1kZndVIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogInFBbEY3ME1kZndVIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTAzLTIwVDIzOjAwOjEyWiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJqaFF6OHJDdXJlaFVkNlJOZlhYVFlCTmJwdHciLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzQxT0VZMk1UZ3hNMFk1TkRreFJVWTIiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTo0MDoyNloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiQnJldHQgWW91bmcgLSBDYXRjaCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIk11c2ljIHZpZGVvIGJ5IEJyZXR0IFlvdW5nIHBlcmZvcm1pbmcgQ2F0Y2guIMKpIDIwMTkgQmlnIE1hY2hpbmUgTGFiZWwgR3JvdXAsIExMQ1xuXG5odHRwOi8vdmV2by5seS8xUjF3YnYiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9TQnFQTEkwT3NrYy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1NCcVBMSTBPc2tjL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1NCcVBMSTBPc2tjL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9TQnFQTEkwT3NrYy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1NCcVBMSTBPc2tjL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA3MCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiU0JxUExJME9za2MiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiU0JxUExJME9za2MiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTktMDYtMDRUMDQ6MDA6MDJaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIkMwTEZRbHNZLVhqWTVqRzdPOV9SNkwzM0VuSSIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNUVSREV5TWtNNU9ERkZRVFF4UkRCRSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjQ3OjUyWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJKaGVuw6kgQWlrbyAtIFAqJCRZIEZBSVJZIChPVFcpIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiRVhQTElDSVQgTFlSSUNTXG5cblAqJCRZIEZBSVJZIChPVFcpXG5odHRwczovL2poZW5lYWlrby5sbmsudG8vUHVzc3lGYWlyeU9UV1xuXG5cIkNoaWxvbWJvXCIgaHR0cHM6Ly9qaGVuZWFpa28ubG5rLnRvL0NoaWxvbWJvXG5cbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vamhlbmVhaWtvL1xuaHR0cHM6Ly90d2l0dGVyLmNvbS9qaGVuZWFpa29cbmh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9qaGVuZS5haWtvLjU4OS9cblxuI1B1c3N5RmFpcnlcbiNDSElMT01CT1xuXG5WaWRlbyBieTpcbkJyYW5kb24gUGFya2VyXG5odHRwOi8vd3d3LmJyYW5kb25wYXJrZXIuTEFcbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vYnJhbmRvbnBhcmtlci8iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS93eTJ1akNVdENIVS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3d5MnVqQ1V0Q0hVL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3d5MnVqQ1V0Q0hVL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogNzEsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogInd5MnVqQ1V0Q0hVIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogInd5MnVqQ1V0Q0hVIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTAxLTE3VDIzOjQ5OjI1WiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJrbmgwWHhlS2x5TVo2OWJHR2JndmdPS1M3dG8iLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzVFTkRCQlFrTkdNREk1UmpreE5rWkMiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTo0ODoxMloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiUEFSVFlORVhURE9PUiAmIFJpaGFubmEgLSBCRUxJRVZFIElUIChPZmZpY2lhbCBBdWRpbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgb2ZmaWNpYWwgYXVkaW8gb2YgXCJCRUxJRVZFIElUXCIgYnkgUEFSVFlORVhURE9PUiAmIFJpaGFubmEgZnJvbSB0aGUgYWxidW0gUEFSVFlNT0JJTEUuIFxuXG5MaXN0ZW4gdG8gUEFSVFlNT0JJTEU6IFxuaHR0cHM6Ly9PVk9TT1VORC5sbmsudG8vUEFSVFlNT0JJTEVcblxuUEFSVFlNT0JJTEUgTWVyY2ggYXZhaWxhYmxlIG5vdzpcbmh0dHBzOi8vb3Zvc291bmQubG5rLnRvL1BORE1lcmNoXG5cbkluc3RhZ3JhbTogaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9wYXJ0eW5leHRkb29yXG5Ud2l0dGVyOiBodHRwczovL3R3aXR0ZXIuY29tL3BhcnR5bmV4dGRvb3JcbldlYnNpdGU6IGh0dHA6Ly9wYXJ0eW9tby5jb21cbkZhY2Vib29rOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vUGFydHlvbW9cblNvdW5kY2xvdWQ6IGh0dHBzOi8vc291bmRjbG91ZC5jb20vUGFydHlvbW9cblNwb3RpZnk6IGh0dHBzOi8vcGxheS5zcG90aWZ5LmNvbS9hcnRpc3QvMkhQYVVncWV1dHpyM2p4NWE5V3lEVlxuXG4jUEFSVFlORVhURE9PUiAjUklIQU5OQSAjT1ZPU09VTkQiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9nZWpiYkwxQWFKay9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2dlamJiTDFBYUprL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2dlamJiTDFBYUprL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9nZWpiYkwxQWFKay9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2dlamJiTDFBYUprL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA3MiwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiZ2VqYmJMMUFhSmsiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiZ2VqYmJMMUFhSmsiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMjAtMDMtMjdUMDQ6MDU6NDVaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogImRmYlUwSFdqUFRWUVRFUk9mV0VlakIwZ0I1OCIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNDBOall4UVVZeE5qQXlSRVZCTkRVMSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjQ4OjI3WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJMaWwgQmFieSAtIExvdyBEb3duIChPZmZpY2lhbCBBdWRpbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJMaXN0ZW4gdG8gdGhlIG9mZmljaWFsIGF1ZGlvIGZvciBMaWwgQmFieSdzIOKAnExvdyBEb3duLuKAnVxuXG5TdHJlYW0vRG93bmxvYWQg4oCcTXkgVHVybiAtIERlbHV4ZeKAnSBIZXJlOiBodHRwczovL3F1YWxpdHljb250cm9sLmxuay50by9NeVR1cm5ZRFxuXG5Gb2xsb3cgTGlsIEJhYnkgRXZlcnl3aGVyZTpcbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vbGlsYmFieV8xL1xuaHR0cHM6Ly90d2l0dGVyLmNvbS9saWxiYWJ5NFBGXG5odHRwczovL3d3dy5mYWNlYm9vay5jb20vNHBmbGlsYmFieVxuXG5UZXh0IExpbCBCYWJ5IGF0IDY3OC00OTYtNzc1N1xuXG7igJxMb3cgRG93buKAnSBMeXJpY3M6XG5cbltJbnRyb11cbihDb29rIHRoYXQgc2hpdCB1cCwgUXVheSlcblxuW1ZlcnNlIDFdXG5HbyB0byBsdW5jaCBpbiB0aGUgSmV3aXNoIGNvbW11bml0eSAoWWVhaClcbkkgd291bGRuJ3QgdGVsbCBvbuKAhXRoZeKAhWJyb3Mgd2l0aCBpbW11bml0eeKAhShOYWgpXG5QbGF5aW4nIHZpY3RpbSwgdGhhdCBzaGl0IGFpbid0IGdvbifigIVydWluIG1lXG5JJ20gdGhlIG9ubHkgbm93IHRoYXQgb3V0ZG8gbWVcbkkgZ290IGhvZXPigZ9ieeKBn3RoZeKBn2dyb3VwIHRyeW5hIGRv4oGfbWVcbk15IGxpZmUgbGlrZeKBn2EgbW92aWUsIGdldCBoZWFkIGluIHRoZSB3YXRlclxuRG9uJ3QgZ290dGEgcHV0IGluIG5vIHdvcmssIEkgc2VuZCBvcmRlcnNcblRoaXMgc2hpdCBkb25lIGdvdCBzZXJpb3VzLCB0aGVtIG1pbGxpb25zIGNvbWUgcGx1cmFsLCBJJ20gbGl2aW5nIGJ5IG1vcmFsc1xuV2Ugc3dpcGUgJ2VtLCBhaW4ndCBrZWVwaW4nLCBubyBEb3JhIEV4cGxvcmVyXG5JJ20geW91bmcgYW5kIEknbSB0dXJudCwgSSBnb3QgYml0Y2hlcyBnYWxvcmVcbk15IGJhYnksIG15IHdoaXAgY29zdCB0d28tZmlmdHksIEknbSBzcGx1cmdpbidcbkdvdCBmaXZlIG1pbGxpb24gY2FzaCBqdXN0IGluIGNhc2Ugb2YgZW1lcmdlbmN5XG5NeSB5b3VuZyBuaWdnYXMga2lsbCwgZ2V0IGF3YXksIHRoZXkgYmUgcHVyZ2luJ1xuSXQgaGFwcGVuZWQgbGlrZSB0aGlzLCBJIGFpbid0IGRvIGl0IG9uIHB1cnBvc2VcbkknbSB3b3JraW5nIG15IG1vdmUsIG5pZ2dhLCB3aGljaCBvbmUgb2YgeW91IHdvcmtpbic/XG5JIHR1cm5lZCBvbiBteSBjcmV3LCBib3VnaHQgYSBjb3VwZSBvZmYgb2YgdmVyc2VzXG5JJ20gdGlyZWQgb2YgdGhlc2Ugc3RyaXBwZXJzLCBJJ20gZ29pbmcgYXQgbnVyc2VzIGFuZCBkb2N0b3JzIGFuZCBkZW50aXN0c1xuWW91IHN0YXJ0ZWQsIEkgZmluaXNoZWQsIEkgdG9sZCB5b3Ugd2Ugd2l0aCBpdFxuTXkgd29yZCBpcyBsaWtlIGdvbGQgdG8gbXkgY2l0eVxuSSB0ZWxsICdlbSB0byBnbywgdGhleSBnb24nIGdldCBpdFxuSSBoZWFyZCB0aGF0IHlvdSBmcm96ZSB3aGVuIHRoZXkgaGl0IGl0XG5QdXR0aW5nIHRoZXNlIGhvZXMgaW4gdGhlIGJ1c2luZXNzLCB5b3Uga25vdyB0aGF0IHlvdSB0cmlwcGluZ1xuSSB0ZWxsICdlbSBubywgdGhleSBnb24nIGxpc3RlblxuS25vd2luJyB0aGVzZSBuaWdnYXMgYmUgc3dlZXQgYW5kIHNvbWUgYml0Y2hlcywgSSdtIGRpZmZlcmVudFxuXG5bQ2hvcnVzXVxuU2hlIHRyeW5hIGxlYXZlIG1lLCBJJ20gbG93IGRvd25cbkkgaGFuZyB3aXRoIHNhdmFnZXMsIGRvbid0IGJyaW5nIHlvdXIgaG8gJ3JvdW5kXG5JJ20gZ29pbmcgYm91Z2llLCBJJ20gc3dpdGNoaW4nIG15IHByb2ZpbGVcbkFsbCBvZiBteSBjYXJzIGdldCBkZWxpdmVyZWQgd2l0aCBubyBtaWxlc1xuVGhleSB0aGluayB0aGV5IGRvIGFuZCB3ZSBkb24ndCwgSSBkb24ndCBrbm93IGhvd1xuUnVuIHRocm91Z2ggdGhlIGxvYWQsIGNhbGwgdGhlIHBsdWcsIEkgbmVlZCBtb3JlIHBvdW5kc1xuSSBwdXQgb24gZHJpcCBldmVyeSBkYXkgZnJvbSB0aGUgZmxvb3IgdXBcbkknbSBnZXR0aW5nIHNpY2sgb2YgdGhpcyBzaGl0LCBwb3VyIHNvbWUgbW9yZSB1cCwgeWVhaFxuXG5bVmVyc2UgMl1cbkN1bGxpbmFuIHNob3QgaW4sIG15IGRyaXZlciBuYW1lZCBTb2xpZFxuSSBrZWVwIGhpbSBvbiBwb2ludCwgbWFrZSBzdXJlIG5vYm9keSBmb2xsb3cgdXNcbkkgZ290IGEgR2xvY2sgd2l0aCBhIHNob3QgdGhhdCBjYW4gc3RvcCBhIHRydWNrXG5JIGdldCB0aGUgbW9uZXkgZWlnaHQgd2F5cyBsaWtlIGFuIG9jdG9wdXNcbk5vIHdheSBpbiBoZWxsIEknbWEgZ2l2ZSBhbGwgdGhlc2UgY2hvcHBlcnMgdXBcblRlYW0gZnVsbCBvZiBwbGF5ZXJzLCBhaW4ndCBub2JvZHkgc3RvcHBpbmcgdXNcbkhlIG91dCBvZiBsaW5lLCBnaXZlIGEgZnVjaywgdGhlbiB3ZSBwb3BwaW4nIGhpbVxuQmVlbiByYWlzaW4nIGhlbGwsIGJhY2sgaW4gc2Nob29sLCBJIHdhcyBwb3B1bGFyLCB5ZWFoXG5BbGwgb2YgbXkgaG9lcyBnZXQgZmFjaWFscywgZmFjZSBtZVxuTWFrZSBoZXIgbXkgYml0Y2ggdG9vIG11Y2gsIHNoZSBsYXp5XG5JIHdhcyB0aGlua2luZyBwcmljZXMgdG9vIGhpZ2gsIHRoZW4gSSByYWlzZWQgJ2VtXG5TaGl0IGluIG15IGJhbmsgYWNjb3VudCBnZXR0aW4nIG91dHJhZ2VvdXNcbk5pZ2dhcyBzbWVsbGluJyBsaWtlIHRoYXQsIGhhZCB0byBzd2l0Y2ggdXAgbXkgZnJhZ3JhbmNlXG5BbmQgSSdtIHNlbmRpbmcgb3V0IHNob3RzIGlmIHRoZSBmb3VscyBnZXQgZmxhZ3JhbnRcblN3aXRjaCB1cCBteSByb3V0ZSB0byB0aGUgaG91c2UsIGhhZCB0byBjaGFuZ2UgaXRcblN0aWxsIHdpdGggdGhlIHNoaXQsIEkgZm9yZ2V0IHRoYXQgSSdtIGZhbW91c1xuXG5bQ2hvcnVzXVxuU2hlIHRyeW5hIGxlYXZlIG1lLCBJJ20gbG93IGRvd25cbkkgaGFuZyB3aXRoIHNhdmFnZXMsIGRvbid0IGJyaW5nIHlvdXIgaG8gJ3JvdW5kXG5JJ20gZ29pbmcgYm91Z2llLCBJJ20gc3dpdGNoaW4nIG15IHByb2ZpbGVcbkFsbCBvZiBteSBjYXJzIGdldCBkZWxpdmVyZWQgd2l0aCBubyBtaWxlc1xuVGhleSB0aGluayB0aGV5IGRvIGFuZCB3ZSBkb24ndCwgSSBkb24ndCBrbm93IGhvd1xuUnVuIHRocm91Z2ggdGhlIGxvYWQsIGNhbGwgdGhlIHBsdWcsIEkgbmVlZCBtb3JlIHBvdW5kc1xuSSBwdXQgb24gZHJpcCBldmVyeSBkYXkgZnJvbSB0aGUgZmxvb3IgdXBcbkknbSBnZXR0aW5nIHNpY2sgb2YgdGhpcyBzaGl0LCBwb3VyIHNvbWUgbW9yZSB1cCwgeWVhaFxuU2hlIHRyeW5hIGxlYXZlIG1lLCBJJ20gbG93IGRvd25cbkkgaGFuZyB3aXRoIHNhdmFnZXMsIGRvbid0IGJyaW5nIHlvdXIgaG8gJ3JvdW5kXG5JJ20gZ29pbmcgYm91Z2llLCBJJ20gc3dpdGNoaW4nIG15IHByb2ZpbGVcbkFsbCBvZiBteSBjYXJzIGdldCBkZWxpdmVyZWQgd2l0aCBubyBtaWxlc1xuVGhleSB0aGluayB0aGV5IGRvIGFuZCB3ZSBkb24ndCwgSSBkb24ndCBrbm93IGhvd1xuUnVuIHRocm91Z2ggdGhlIGxvYWQsIGNhbGwgdGhlIHBsdWcsIEkgbmVlZCBtb3JlIHBvdW5kc1xuSSBwdXQgb24gZHJpcCBldmVyeSBkYXkgZnJvbSB0aGUgZmxvb3IgdXBcbkknbSBnZXR0aW5nIHNpY2sgb2YgdGhpcyBzaGl0LCBwb3VyIHNvbWUgbW9yZSB1cCwgeWVhaFxuXG5bT3V0cm9dXG5JJ20gZ2V0dGluZyBzaWNrIG9mIHRoaXMgc2hpdCwgcG91ciBzb21lIG1vcmUgdXBcbkkgcHV0IG9uIGRyaXAgZXZlcnkgZGF5IGZyb20gdGhlIGZsb29yIHVwXG5JJ20gZ2V0dGluZyBzaWNrIG9mIHRoaXMgc2hpdCwgcG91ciBzb21lIG1vcmUgdXBcbkkgcHV0IG9uIGRyaXAgZXZlcnkgZGF5XG5cbiNMaWxCYWJ5ICNMb3dEb3duICNNeVR1cm5cblxuTXVzaWMgdmlkZW8gYnkgTGlsIEJhYnkgcGVyZm9ybWluZyBMb3cgRG93biAoQXVkaW8pLiDCqSAyMDIwIFF1YWxpdHkgQ29udHJvbCBNdXNpYywgTExDLCB1bmRlciBleGNsdXNpdmUgbGljZW5zZSB0byBVTUcgUmVjb3JkaW5ncywgSW5jLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL05UYkZuMDlMTHVFL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTlRiRm4wOUxMdUUvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTlRiRm4wOUxMdUUvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL05UYkZuMDlMTHVFL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTlRiRm4wOUxMdUUvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDczLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJOVGJGbjA5TEx1RSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJOVGJGbjA5TEx1RSIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wNS0wMVQwNDowMDowOVoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiSWdiVTJLOU1LUEQza3FGeVh1eTdmcWp1WnRVIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0NU5FVXpSa1kwTVRnek1qSXdNVE5CIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6NDg6MzhaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIkVtaW5lbSAtIEdvZHppbGxhIGZ0LiBKdWljZSBXUkxEIChEaXIuIGJ5IEBfQ29sZUJlbm5ldHRfKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkluIExvdmluZyBNZW1vcnkgb2YgSmFyYWQgXCJKdWljZSBXUkxEXCIgSGlnZ2luc1xuXG5MeXJpY2FsIExlbW9uYWRlIFByZXNlbnRzOlxuXG5FbWluZW0gLSBHb2R6aWxsYSBmdC4gSnVpY2UgV1JMRCAoT2ZmaWNpYWwgTXVzaWMgVmlkZW8pXG5cbkRpcmVjdG9yLCBXcml0ZXIsIEVkaXRvciAtIENvbGUgQmVubmV0dFxuVkZYIC0gU2Npc3NvciBGaWxtc1xuVkZYIFN1cGVydmlzb3IgLSBTYW0gTWFsa29cblZGWCBQcm9kdWNlciAtIEpvZSBHcmF5ZW1cbkRpcmVjdG9yIG9mIFBob3RvZ3JhcGh5IC0gVGF5bG9yIFJhbmRhbGxcblN0ZWFkaWNhbSAtIFJlbmFyZCBDaGVyZW5cbkV4ZWN1dGl2ZSBQcm9kdWNlciAtIFBhdWwgUm9zZW5iZXJnXG5FeGVjdXRpdmUgUHJvZHVjZXIgLSBTYWx2YXRvcmUgVGFyYW50aW5vXG5Qcm9kdWNlciAtIEthdGh5IEFuZ3N0YWR0IFxuUHJvZHVjZXIgLSBKYXkgVGF1emluXG5MaW5lIFByb2R1Y2VyIC0gS3Jpc3RhIFdvcmJ5XG5HYWZmZXI6IFJvbm5pZSBHb3RjaCAmIDd0aCBMaWdodCBFbnRlcnRhaW5tZW50XG5Qcm9kdWN0aW9uIERlc2lnbmVyIC0gQ29keSBGdXNpbmFcbkFydCBEaXJlY3RvciAtIFJhc2hpIEphaW5cblByb2R1Y3Rpb24gTWFuYWdlciAtIEhlbnJpIENvbGVtYW5cbktleSBXYXJkcm9iZSAtIERhd24gQm9vbnlhY2hsaXRvICYgQW5nZWxhIE1jQnJpZGVcbktleSBHcm9vbWVyIC0gTWljaGVsbGUgV2lsbGlzIFxuQmFja2dyb3VuZCBXYXJkcm9iZSAtIFJhc2hlZWRhIEFtZWVyYVxuQmFja2dyb3VuZCBDYXN0aW5nIC0gTWlsbCBUaWNrZXQgRW50ZXJ0YWlubWVudFxuQXNzaXN0YW50IERpcmVjdG9yIC0gQmFzaGlyIFRheWxvclxuQXNzaXN0YW50IERpcmVjdG9yIC0gS2VsbyBUaG9tcHNvblxuUHJvZHVjdCBHcmFwaGljIERlc2lnbiAtIEdlb3JnZSBIYW1tb25kICYgSmFrZSBCcm9kZVxuU3VwZXJ2aXNpbmcgUHJvZHVjZXIgLSBKYWtlIFdpbHNvblxuU3VwZXJ2aXNpbmcgUHJvZHVjZXIgLSBCZXJuYXJkIFwiQnVydVwiIE5peW9uemltYVxuXG5TcGVjaWFsIEd1ZXN0IEFwcGVhcmFuY2VzIGZyb20gTWlrZSBUeXNvbiAmIERyIERyZVxuXG5cbi0tXG5cbk9mZmljaWFsIENoYW5uZWwgb2YgTHlyaWNhbCBMZW1vbmFkZSBcblxuU3Vic2NyaWJlIGZvciB1cGRhdGVzIG9uIG11c2ljIHZpZGVvcywgaW50ZXJ2aWV3cywgcGVyZm9ybWFuY2UgdmlkZW9zLCBldGMuXG5cbkx5cmljYWwgTGVtb25hZGUncyBIb3QgMjUgU3BvdGlmeSBQbGF5bGlzdDpcbmh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS91c2VyL2doM3Zkejc3NW95MThhaDF3cDl1Y3hzajUvcGxheWxpc3QvNVV1UGVXRFIySThhOHBPUnZXOXZtclxuXG5MeXJpY2FsIExlbW9uYWRlIFNvY2lhbHM6XG5cbmh0dHA6Ly93d3cudHdpdHRlci5jb20vbHlyaWNhbGVtb25hZGVcbmh0dHA6Ly93d3cuaW5zdGFncmFtLmNvbS9seXJpY2FsZW1vbmFkZVxuaHR0cDovL3d3dy5mYWNlYm9vay5jb20vbHlyaWNhbGVtb25hZGVcbmh0dHA6Ly93d3cubHlyaWNhbGxlbW9uYWRlLmNvbVxuXG5cbkNvbGUgQmVubmV0dCBTb2NpYWxzOlxuXG5odHRwOi8vd3d3LnR3aXR0ZXIuY29tL19jb2xlYmVubmV0dF9cbmh0dHA6Ly93d3cuaW5zdGFncmFtLmNvbS9fY29sZWJlbm5ldHRfXG5cbkxFTk5ZIH4gb3VyIGhpZGRlbiBjaGFyYWN0ZXIgcmVwcmVzZW50aW5nIGhhcHBpbmVzcyAmIGdvb2QgZW5lcmd5XG5odHRwOi8vaW5zdGFncmFtLmNvbS9sZW5ueSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3JfMEpqWVVlNWpvL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcl8wSmpZVWU1am8vbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcl8wSmpZVWU1am8vaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3JfMEpqWVVlNWpvL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcl8wSmpZVWU1am8vbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDc0LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJyXzBKallVZTVqbyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJyXzBKallVZTVqbyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wMy0wOVQxOTowMDoxMVoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiZ3RPM0dqeW1XY1phY0U0R2JHRTBVUFpJNEo4IiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM1RlFrSkJOekl6UWpReU1UYzROREU1IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6NDg6NTJaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIkRhQmFieSAtIFwiSlVNUFwiIGZlYXQgTkJBIFlvdW5nYm95IChPZmZpY2lhbCBWaWRlbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJcIkJsYW1lIGl0IG9uIEJhYnlcIiBcbkRhQmFieSAtIEp1bXAgZmVhdCBOQkEgWW91bmdib3lcblNvbmcgUHJvZHVjZWQgYnkgREogS2lkXG5EaXJlY3RlZCBieSBSZWVsIEdvYXRzIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveGptQzRsU2stMlUvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS94am1DNGxTay0yVS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS94am1DNGxTay0yVS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveGptQzRsU2stMlUvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS94am1DNGxTay0yVS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogNzUsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogInhqbUM0bFNrLTJVIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogInhqbUM0bFNrLTJVIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTA0LTE3VDEzOjAwOjM0WiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICI2cmU4MFd2al9ldkZhaUNlS1BoUEg1dXRDRDgiLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzVCUkRnMFJFVkVRakEyUVRNelF6a3kiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTo0OTowNFoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiRG9uIFRvbGl2ZXIgLSBBZnRlciBQYXJ0eSBbT2ZmaWNpYWwgTXVzaWMgVmlkZW9dIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiRG9uIFRvbGl2ZXIgLSBBZnRlciBQYXJ0eVxuU3RyZWFtL0Rvd25sb2FkIHRoZSBuZXcgYWxidW0gJ0hlYXZlbiBvciBIZWxsJzogaHR0cHM6Ly9Eb25Ub2xpdmVyLmxuay50by9IZWF2ZW5PckhlbGxJRCBcbk9mZmljaWFsIFN0b3JlOiBodHRwczovL3Nob3AuZG9udG9saXZlcm11c2ljLmNvbS9cblxuRm9sbG93IERvbiBUb2xpdmVyXG5odHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2RvbnRvbGl2ZXJcbmh0dHBzOi8vdHdpdHRlci5jb20vZG9udG9saXZlclxuaHR0cHM6Ly9zb3VuZGNsb3VkLmNvbS9kb250b2xpdmVyXG5odHRwczovL3d3dy5mYWNlYm9vay5jb20vRG9uVG9saXZlci9cblxuI0RvblRvbGl2ZXIgI0FmdGVyUGFydHkgI0hlYXZlbk9ySGVsbCIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzRJYWh2Q0lxZU9jL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvNElhaHZDSXFlT2MvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvNElhaHZDSXFlT2MvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzRJYWh2Q0lxZU9jL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvNElhaHZDSXFlT2MvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDc2LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICI0SWFodkNJcWVPYyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICI0SWFodkNJcWVPYyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wMy0xOFQxOTowMTowNVoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiRzF5VlpZNUVlZ1lxLVNWVTVITlZBZVI4eVVjIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0M05VVkNSVU14UWpVME1rTTVRakkyIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6NDk6MjBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIlNjb3R0eSBNY0NyZWVyeSAtIEluIEJldHdlZW4gKE9mZmljaWFsIE11c2ljIFZpZGVvKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIldhdGNoIHRoZSBvZmZpY2lhbCBtdXNpYyB2aWRlbyBmb3IgXCJJbiBCZXR3ZWVuXCIgYnkgU2NvdHR5IE1jQ3JlZXJ5XG5MaXN0ZW4gdG8gU2NvdHR5IE1jQ3JlZXJ5OiBodHRwczovL1Njb3R0eU1jQ3JlZXJ5Lmxuay50by9saXN0ZW5ZRFxuXG5TdWJzY3JpYmUgdG8gdGhlIG9mZmljaWFsIFNjb3R0eSBNY0NyZWVyeSBZb3VUdWJlIGNoYW5uZWw6IGh0dHBzOi8vU2NvdHR5TWNDcmVlcnkubG5rLnRvL3N1YnNjcmliZVlEXG5cbldhdGNoIG1vcmUgU2NvdHR5IE1jQ3JlZXJ5IHZpZGVvczogaHR0cHM6Ly9TY290dHlNY0NyZWVyeS5sbmsudG8vbGlzdGVuWUMveW91dHViZVxuXG5Gb2xsb3cgU2NvdHR5IE1jQ3JlZXJ5OlxuRmFjZWJvb2s6IGh0dHBzOi8vU2NvdHR5TWNDcmVlcnkubG5rLnRvL2ZvbGxvd0ZJXG5JbnN0YWdyYW06IGh0dHBzOi8vU2NvdHR5TWNDcmVlcnkubG5rLnRvL2ZvbGxvd0lJXG5Ud2l0dGVyOiBodHRwczovL1Njb3R0eU1jQ3JlZXJ5Lmxuay50by9mb2xsb3dUSVxuV2Vic2l0ZTogaHR0cHM6Ly9TY290dHlNY0NyZWVyeS5sbmsudG8vZm9sbG93V0lcblNwb3RpZnk6IGh0dHBzOi8vU2NvdHR5TWNDcmVlcnkubG5rLnRvL2ZvbGxvd1NJXG5Zb3VUdWJlOiBodHRwczovL1Njb3R0eU1jQ3JlZXJ5Lmxuay50by9zdWJzY3JpYmVZRFxuXG5DaG9ydXM6XG5JJ20gaW4gYmV0d2VlblxuRnJpZGF5IG5pZ2h0IHdpbGRcbkFuZCBxdWlldCBTdW5kYXkgbW9ybmluZ1xuQmV0d2VlblxuRG9uZSBhZnRlciBvbmVcbkFuZCBrZWVwIG9uIHBvdXJpbmdcbkFpbid0IHRvbyBoaWdoXG5BaW4ndCB0b28gbG93XG5KdXN0IGhvbGRpbmcgZG93biB0aGUgbWlkZGxlXG5JJ20gc3RlYWR5IGFzIEkgZ29cbkkgYWluJ3QgYWxsIGhvbHkgd2F0ZXJcbkFuZCBJIGFpbid0IGFsbCBKaW0gQmVhbVxuSSdtIHNvbWV3aGVyZSBpbiBiZXR3ZWVuXG5cbiNTY290dHlNY0NyZWVyeSAjSW5CZXR3ZWVuICNPZmZpY2lhbE11c2ljVmlkZW8iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9kLW4xQ2psc3dzOC9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2QtbjFDamxzd3M4L21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2QtbjFDamxzd3M4L2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9kLW4xQ2psc3dzOC9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2QtbjFDamxzd3M4L21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA3NywKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiZC1uMUNqbHN3czgiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiZC1uMUNqbHN3czgiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTktMDYtMjBUMDc6MDA6MDJaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogInV1OTBUNmpjRzhLYkg0MmFrNFkyS2x0c1JIMCIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNUNNalUzTURReFF6SkdRVGs0UVROQiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjQ5OjM3WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJMaWwgQmFieSAtIEh1bWJsZSAoT2ZmaWNpYWwgQXVkaW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiTGlzdGVuIHRvIHRoZSBvZmZpY2lhbCBhdWRpbyBmb3IgTGlsIEJhYnkncyDigJxIdW1ibGUu4oCdXG5cblN0cmVhbS9Eb3dubG9hZCDigJxNeSBUdXJuIC0gRGVsdXhl4oCdIEhlcmU6IGh0dHBzOi8vcXVhbGl0eWNvbnRyb2wubG5rLnRvL015VHVybllEXG5cbkZvbGxvdyBMaWwgQmFieSBFdmVyeXdoZXJlOlxuaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9saWxiYWJ5XzEvXG5odHRwczovL3R3aXR0ZXIuY29tL2xpbGJhYnk0UEZcbmh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS80cGZsaWxiYWJ5XG5cblRleHQgTGlsIEJhYnkgYXQgNjc4LTQ5Ni03NzU3XG5cbuKAnEh1bWJsZeKAnSBMeXJpY3M6XG5cbltJbnRybzrCoExvcmkgUGVycnnCoCYgTGlsIEJhYnldXG5EYXkgYWZ0ZXIgZGF5XG5TZWVtcyBsaWtlIEkgcHVzaCBhZ2FpbnN0IHRoZSBjbG91ZHNcbihTZWN0aW9uIDgganVzdCBzdHJhaWdodCBjb29rZWQgdGhpcyBtb3RoZXJmdWNrZXLigIV1cClcblRoZXnigIVqdXN0IGtlZXAgYmxvY2tpbmfigIVvdXQgdGhlIHN1blxuSXQgc2VlbXMgc2luY2UgSeKAhXdhcyBib3JuIFxuSSd2ZSB3YWtlbmVkIGV2ZXJ5IGJsZXNzZWQgbW9ybmluZ1xuSSBiZWVuIHRoaW5raW4nIHRvIG15c2VsZuKBn2xhdGVseVxuV29uZGVyaW4n4oGfZGlk4oGfc2hlIG1lYW4gaXTigZ93aGVuIHNoZSBzYXnigZ9zaGUgaGF0ZSBtZT9cbk9yIHdvbmRlcmluJyBkaWQgc2hlIG1lYW4gaXQgd2hlbiBzaGUgc2F5IHNoZSB3aXNoZWQgc2hlIGRpZG4ndCBrZWVwIHRoZSBiYWJ5PyAoRG93biBvbiBteSBsdWNrIGFuZCB1cCBhZ2FpbnN0IHRoZSB3aW5kKVxuXG5bVmVyc2UgMV1cblRvbGQgU29saWQgdG8gc3BlZWQgaXQgdXAsIHlvdSBhaW4ndCBkcml2aW5nIE1pc3MgRGFpc3lcblJvbGxzIFJveWNlIHRydWNrIHBsdXMsIHllYWgsIHlvdSBkcml2aW5nIExpbCBCYWJ5XG5IaXQgZnJvbSB0aGUgYmFjayBhbmQgZ3JhYiBoZXIgbmVjaywgaXQgYmUgZHJpdmluJyBoZXIgY3JhenlcbkFpbid0IHdvcmsgbm8gam9iIHNpbmNlIHdlIG1ldCwgSSdtIHRoZSByZWFzb24gc2hlIGxhenlcbkkgZ290IHNvbWUgY2hlY2tzIHRoYXQgSSBhaW4ndCB0b3VjaCwgdGhleSBmb3IgTG95YWwgYW5kIEphc29uXG5SZWFsbHkgd2FubmEgaGF2ZSBhIGRhdWdodGVyIGp1c3Qgc28gSSBjYW4gc3BvaWwgaGVyXG5NYXliZSBsb29rIGF0IHdvbWVuIGRpZmZlcmVudFxuRmF0aGVyIEdvZCwgZm9yZ2l2ZSBtZSwgSSdtYSBiZWVuIHNpbm5pbmcgZm9yIGEgbWludXRlXG5XZSBib3VnaHQgc3RpY2tzIHdoZW4gaXQgd2FzIHRlbnNpb25cbkZ1Y2sgdGhhdCBiaXRjaCwgc2hlIHdhbnQgYXR0ZW50aW9uXG5TaGUgZ2V0IGZhbW91cyBpZiBJIG1lbnRpb25cbkkgYWluJ3QgZ29uJyBzYXkgaGVyIG5hbWUgYXQgYWxsSSB3YXMganVzdCBzaXR0aW4nIGluIHByaXNvbiwgZGFtbiBuZWFyIGxpdmluJyBsaWtlIGEgZG9nXG5JIHJlbWVtYmVyIHRoYXQgc2hpdCB2aXZpZGx5LCBJIGRvIHRoaXMgc2hpdCBmb3IgeSdhbGxcbkknbSBub3QgbG9va2luJyBmb3Igbm8gc3ltcGF0aHksIHdvbid0IGNyeSBhYm91dCBubyBsb3NzXG5JIGdvdCBkZW1vbnMgYWxsIG9uIG15IGJhY2sgYW5kIGFybXMsIEknbSB0cnluYSBzaGFrZSAnZW0gb2ZmXG5JIGNhbid0IG5ldmVyIGZ1Y2sgd2l0aCBsaWwnIE1pbGwgYWdhaW4sIGhlIHRyaWVkIHRvIHRha2UgbWUgb2ZmXG5JIGNhbid0IGxpZSwgeW91IHdhcyBteSBkYXdnLCBJIGhlYXJkIHRoYXQgc2hpdCwgaXQgYnJva2UgbXkgaGVhcnRcbkNhbid0IG5vIG5pZ2dhIHNheSBJIGRpZCBzb21ldGhpbicgZmxhd2VkLCBiZWVuIHNvbGlkIGZyb20gdGhlIHN0YXJ0XG5FdmVyeSBzaXR1YXRpb24gZXZlciBoYXBwZW5lZCwgQmFieSBwbGF5ZWQgaGlzIHBhcnRcbkkgYWluJ3QgbmV2ZXIgZGlkIHNoaXQgdG8gYnJhZyBhYm91dCBpdCwgSSBkbyB0aGF0IHNoaXQgd2l0aCBob25vcnNcbkluIG15IGJhZywgYnV0IEkgYmVlbiBsYXlpbicgYmFjaywgSSdtIHR1cm5pbicgdXAgdGhpcyBzdW1tZXJcbkd1ZXNzIHlvdSBtYWQgJ2NhdXNlIEkndmUgYmVlbiBoYXZpbicsIHRlbGxpbicgaG9lcyBJIHdhcyBhIHJ1bm5lclxuSWYgSSB3YXMsIEkgd2FzIHRoZSByaWNoZXN0IHJ1bm5lciBpbiBHZW9yZ2lhLCBvbiBteSBtYW1hXG5BbmQgSSBhaW4ndCBuZXZlciBiZWVuIG5vIHdvcmtlciwgaGFkIG15IG93biBudW1iZXIsIGFzayBicnVoXG5TZXZlbiBzdW1tZXJzIHN0cmFpZ2h0IHdlIHdlbnQgY3JhenksIGNhbGxlZCBpdCBnb29kIGx1Y2tcblxuW0Nob3J1c11cbkkgYmVlbiBrZWVwaW4nIG15IGRpc3RhbmNlLCBJIHN3aXRjaGVkIHVwIG15IG51bWJlclxuSSBkb25lIG1hZGUgYWxsIHRoZXNlIG1pbGxpb25zLCBJJ20ga2VlcGluJyBteSBodW5nZXJcbkFsbCB0aGlzIGZvb2QgaW4gYSBiaWcgaG91c2UsIG15IHN0b21hY2ggc3RpbGwgcnVtYmxlXG5Hb3QgdGhlIGJhbGwsIEkgd29uJ3QgZnVtYmxlXG5JIGp1c3QgdG91Y2ggZG93biwgc3RheSBodW1ibGVcbkkgYmVlbiBrZWVwaW4nIG15IGRpc3RhbmNlLCBJIHN3aXRjaGVkIHVwIG15IG51bWJlclxuSSBkb25lIG1hZGUgYWxsIHRoZXNlIG1pbGxpb25zLCBJJ20ga2VlcGluJyBteSBodW5nZXJcbkFsbCB0aGlzIGZvb2QgaW4gYSBiaWcgaG91c2UsIG15IHN0b21hY2ggc3RpbGwgcnVtYmxlXG5Hb3QgdGhlIGJhbGwsIEkgd29uJ3QgZnVtYmxlXG5JIGp1c3QgdG91Y2ggZG93biwgc3RheSBodW1ibGUsIHllYWhcblxuW1ZlcnNlIDJdXG5UaGlua2luJyAnYm91dCB0aGF0IHNoaXQgeW91IHNhaWQsIEkgY2FuJ3QgZ2V0IGl0IG91dCBteSBoZWFkXG5JIGtub3cgdGhhdCBteSBoZWFydCBpcyBibGFjaywgc28gYWxsIG15IGNhcnMnIGluc2lkZXMgaXMgcmVkXG5JIGRvbid0IHdhbm5hIGFyZ3VlIHdpdGggbm8gb25lLCBsZXQncyBnZXQgdGhpcyBndWFwIGluc3RlYWRcbkkgYWluJ3QgdHJ5bmEgYmVlZiB3aXRoIG5vbmUgdGhlc2UgbmlnZ2FzICdjYXVzZSBhbGwgbXkgb3BwcyBpcyBkZWFkXG5JZiB5b3UgZXZlciBydW4gaW50byBwb2xpY2UsIHlvdSBiZXR0ZXIgbm90IHRlbGxcblR1cm4gaXQgdXAsIEkgbWlnaHQgYXMgd2VsbCwgeW91IGtub3cgSSdtIHNvIDRQRlxuJ0ZvcmUgSSBnbywgSSBnb3R0YSBzYXkgd2hhdCdzIHVwIHRvIGFsbCB0aGUgYnJvcyBpbiBqYWlsXG5JIGtub3cgdGhhdCB0aGV5IGJlIGxpc3RlbmluJywgSSBrbm93IHRoYXQgaGUnbGwgYmUgd2l0aCBtZVxuQW5kIGhpcyBsYXd5ZXIgY29zdCBvbmUtc2l4dHksIEkgaG9wZSB0aGV5IHVuLWNvbnZpY3QgaGltIHdoZW4gaGUgZ28gYmFja1xuRm9sbG93IGhpbSB3aXRoIGEgbG93IGphY2ssIHRoZW4gc3RlcCBvbiBoaW0gbGlrZSBhIGRvb3JtYXRcbkRvaW4nIGRpcnQsIGNhbid0IGdvIGJhY2ssIG15IG1pbmQgc3RyYWlnaHQsIGFpbid0IG5vIHNsYWNraW4nXG5HdW5zIGFsbCBpbiBSZW5lZSBob3VzZSwgeW91IGFpbid0IGZyb20gdGhlIGhvb2QgaWYgeW91IGRvbid0IGtub3cgTWFkaXNvblxuXG5bQ2hvcnVzXVxuSSBiZWVuIGtlZXBpbicgbXkgZGlzdGFuY2UsIEkgc3dpdGNoZWQgdXAgbXkgbnVtYmVyXG5JIGRvbmUgbWFkZSBhbGwgdGhlc2UgbWlsbGlvbnMsIEknbSBrZWVwaW4nIG15IGh1bmdlclxuQWxsIHRoaXMgZm9vZCBpbiBhIGJpZyBob3VzZSwgbXkgc3RvbWFjaCBzdGlsbCBydW1ibGVcbkdvdCB0aGUgYmFsbCwgSSB3b24ndCBmdW1ibGVcbkkganVzdCB0b3VjaCBkb3duLCBzdGF5IGh1bWJsZVxuSSBiZWVuIGtlZXBpbicgbXkgZGlzdGFuY2UsIEkgc3dpdGNoZWQgdXAgbXkgbnVtYmVyXG5JIGRvbmUgbWFkZSBhbGwgdGhlc2UgbWlsbGlvbnMsIEknbSBrZWVwaW4nIG15IGh1bmdlclxuQWxsIHRoaXMgZm9vZCBpbiBhIGJpZyBob3VzZSwgbXkgc3RvbWFjaCBzdGlsbCBydW1ibGVcbkdvdCB0aGUgYmFsbCwgSSB3b24ndCBmdW1ibGVcbkkganVzdCB0b3VjaCBkb3duLCBzdGF5IGh1bWJsZSwgeWVhaFxuXG4jTGlsQmFieSAjSHVtYmxlICNNeVR1cm5cblxuTXVzaWMgdmlkZW8gYnkgTGlsIEJhYnkgcGVyZm9ybWluZyBIdW1ibGUgKEF1ZGlvKS4gwqkgMjAyMCBRdWFsaXR5IENvbnRyb2wgTXVzaWMsIExMQywgdW5kZXIgZXhjbHVzaXZlIGxpY2Vuc2UgdG8gVU1HIFJlY29yZGluZ3MsIEluYy5cblxuaHR0cDovL3Zldm8ubHkvcTBySGJ4IiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTG5LT3hid0ZBVnMvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9MbktPeGJ3RkFWcy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9MbktPeGJ3RkFWcy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTG5LT3hid0ZBVnMvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9MbktPeGJ3RkFWcy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogNzgsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIkxuS094YndGQVZzIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIkxuS094YndGQVZzIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTAxVDA0OjAwOjA5WiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJSZzJwb0M2QU9lenREWUNMV2MwYUVVaFZzNU0iLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzVETnpsQ04wRTRSVFkzTkRNM016ZEYiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTo0OTo0NVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiTHVrZSBCcnlhbiAtIE9uZSBNYXJnYXJpdGEgKE9mZmljaWFsIE11c2ljIFZpZGVvKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBvZmZpY2lhbCBtdXNpYyB2aWRlbyBmb3IgTHVrZSBCcnlhbuKAmXMgT25lIE1hcmdhcml0YS5cbiBcblN1YnNjcmliZSB0byB0aGlzIGNoYW5uZWw6IGh0dHBzOi8vdW1nbi51cy9MdWtlQnJ5YW5TdWJzY3JpYmVcbldhdGNoIG1vcmUgb2ZmaWNpYWwgdmlkZW9zIGZyb20gTHVrZSBCcnlhbjogaHR0cHM6Ly91bWduLnVzL0x1a2VCcnlhblZpZGVvc1xuU2lnbiB1cCB0byByZWNlaXZlIGVtYWlsIHVwZGF0ZXMgZnJvbSBMdWtlIEJyeWFuOiBodHRwczovL3VtZ24udXMvbHVrZWJyeWFudXBkYXRlcyBcbkxpc3RlbiB0byBMdWtlIEJyeWFu4oCZcyBsYXRlc3QgbXVzaWM6IGh0dHBzOi8vc3RybS50by9MdWtlQnJ5YW5NdXNpY1xuIFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5XZWJzaXRlOiBodHRwOi8vd3d3Lmx1a2Vicnlhbi5jb20vXG5GYWNlYm9vazogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2x1a2VicnlhblxuSW5zdGFncmFtOiBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2x1a2VicnlhblxuVHdpdHRlcjogaHR0cHM6Ly90d2l0dGVyLmNvbS9MdWtlQnJ5YW5PbmxpbmVcbiBcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuI0x1a2VCcnlhbiAjT25lTWFyZ2FyaXRhICNDb3VudHJ5TXVzaWNcblxuTXVzaWMgdmlkZW8gYnkgTHVrZSBCcnlhbiBwZXJmb3JtaW5nIE9uZSBNYXJnYXJpdGEuIMKpIDIwMjAgUm93IENyb3AgUmVjb3JkcywgTExDLCB1bmRlciBleGNsdXNpdmUgbGljZW5zZSB0byBVTUcgUmVjb3JkaW5ncywgSW5jLlxuXG5odHRwOi8vdmV2by5seS90THZ3dkMiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ZRXEtY3ZxX2NLNC9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1lFcS1jdnFfY0s0L21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1lFcS1jdnFfY0s0L2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ZRXEtY3ZxX2NLNC9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1lFcS1jdnFfY0s0L21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA3OSwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiWUVxLWN2cV9jSzQiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiWUVxLWN2cV9jSzQiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMjAtMDMtMTNUMDQ6MDA6MTBaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIkFFR3RmdTc0RTBvOVMzVDlmUFhCWlNPQk52NCIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNUZOMFk0UTBSQk9URTJSVFEyTVRrMCIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjUwOjAwWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJMaWwgQmFieSAmIDQyIER1Z2cgLSBHcmFjZSAoT2ZmaWNpYWwgVmlkZW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU3RyZWFtL0Rvd25sb2FkIExpbCBCYWJ54oCZcyBOZXcgQWxidW0g4oCcTXkgVHVybuKAnTogaHR0cHM6Ly9xdWFsaXR5Y29udHJvbC5sbmsudG8vTXlUdXJuWURcblxuRm9sbG93IExpbCBCYWJ5IEV2ZXJ5d2hlcmU6XG5odHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2xpbGJhYnlfMS9cbmh0dHBzOi8vdHdpdHRlci5jb20vbGlsYmFieTRQRlxuaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLzRwZmxpbGJhYnlcblxud3d3LmlhbWxpbGJhYnkuY29tXG5cbltWZXJzZSAxOiA0MiBEdWdnICYgTGlsIEJhYnldXG5Hb3QgYSBsb3R0YSBuZXcgZmxhbWVzIG5lZWQgJ2VtIGJsdWVcblRocmVlIGh1bmRyZWQgZmlmdHkgdGhvdScsIHRpbWVzIHRoYXQgYnkgdHdvXG5OZXfigIVkb3du4oCFdGhlIHJvb2YsIEnigIVzdGlsbCB0aGUgc2t5XG5QZWFjZSB0byBteSBncmFuZG1hLOKAhUkgc3RpbGwgc2VlIG15IGd1eXNcbkh1cnRpbicgdGhpcyBiYWQgbXVzdCBmZWVsIGxpa2XigZ9keWluJ1xuSGVhcmTigZ9h4oGfdGhvdScgc2V2ZW4gaHVuZHJlZCzigZ93aGF0IHlvdSBnb24n4oGfYmV0IG5vdz9cblllYWgsIHlvdSB1c2VkIHRvIHR3ZXJrIGJpdGNoLCBhIHZldCBub3dcbkx1a2UsIGdldCB1cCwgZG9nZ3ksIEkgbmVlZCB5b3Vcbk9ubHkgbmlnZ2EgbWFkZSBzdXJlIHRoYXQgSSB3YXMgZWF0aW4nXG5GcmVlIE5lZiBzdGlsbCwgbmlnZ2EsIFJJUCBSZWVzZVxuR2V0IGhlciBuYWlscyBkb25lLCBzdGlsbCBjaGFyZ2UgZm9yIHRoZSBmZWF0dXJlXG5CYWJ5LCB3ZSBhaW4ndCB0aGF0LCBuYWgsIHdlIGFpbid0IHRoaXNcbkFsbCB0aGF0IGZ1Y2tpbicsIEkgZG9uJ3QgZG8gbm8ga2lzc1xuQml0Y2ggYWluJ3Qgc2hpdCwgd29yZCB0byBteSBuaWdnYXNcbkFsbCBpbiBteSBtYW5zaW9ucyAoWWVhaClcbkJpdGNoIHJlYWxseSB3YW5uYSBnZXQgaGlnaGVyXG5UZWxsIHRoZSBsaWwnIGhvZXMgSSdtIEJyeXNvblxuSSBkb25lIGhpdCBtb3JlIHNoaXQgdGhhbiBNaWtlIFR5c29uXG5HZXQgcG9wcGVkLCBuaWdnYSwgSSBhaW4ndCBkb2luJyBubyBmaWdodFxuU2VuZGluJyBteSBjYXNoLCBJIGFpbid0IGRvaW4nIG5vIHJpZ2h0XG5DYXIgdG9vIGZhc3QsIGNhbid0IHN0b3AgYXQgbm8gbGlnaHRcbkkgaGl0IHRoZSBnYXMsIHNrcnJ0IGFuZCBJIHB1bGwgb2ZmXG5JJ20gb24gdGhleSBhc3MsIEkganVzdCB0b29rIGEgeWVhciBvZmZcblNoZSBzaGFraW4nIGhlciBhc3MsIGNhbGwgbWUgd2hlbiBzaGUgZ2V0IG9mZlxuVG9vayBoYWxmIGEgbWlsJyBmb3IgbXkgbGlsJyBicm8gdG8gZ2V0IG91dFxuVGhhdCBuZXcgUmljaGFyZCBNaWxsZSBtYWRlIG1lIGZlZWwgbGlrZSBhIGJvc3NcbkZlZWwgbGlrZSBJJ20gTWVlY2ggd2hlbiBJJ20gcnVubmluJyB0aGVzZSBjYXJzXG5XaG8geW91IGtub3c/IFB1bGwgdXAsIHdob2xlIGVudG91cmFnZSBpbiBhIGZvcmVpZ25cbkkgZ290IGRlc2lnbmVyIGZvciBkYXlzIGJ1dCBpdCdzIHNvbWV0aGluJyBhYm91dCAnZW1cbkdvIGNyYXp5IGZvciB3aGl0ZSBBaXIgRm9yY2UgT25lLCBtYXliZSAnY2F1c2UgSSdtIGEgZG9wZSBib3lcbkhlIGJlIGxpdmUgYnV0IGhlIGFpbid0IG1ha2luJyBubyBub2lzZVxuJ1ZlbnRhZG9yIG9uIHRoZSBncm91bmQgbGlrZSBhIHNrYXRlYm9hcmRcbklmIEkgd2FudCBpdCwgSSBnZXQgaXQsIEkgcGF5IGZvciBpdFxuSSBwYXkgZXh0cmEsIEkgYWluJ3QgdHJ5bmEgd2FpdCBmb3IgaXRcbkV2ZXJ5dGhpbmcgdGhhdCBJIGdvdCwgaXQgd2FzIG1hZGUgZm9yIG1lXG5JIHdhcyBzZXJ2aW4nIHRoZW0gdHJhcCBob3VzZXMgZmFpdGhmdWxseVxuRXZlcnlib2R5IHdpdGggbWUgZ290dGEgZWF0XG5TYXkgeW91IGdyYWNlIHdpdGggbWVcblxuW0Nob3J1czogTGlsIEJhYnldXG5UaG91IHNoYWxsIG5vdCB0cnkgb25lIG9mIHVzLCBpZiB0aGV5IGRvIEknbWEgYnVzdFxuUGxlYXNlIGRvbid0IHJlYWNoIGZvciBubyBjaGFpblxuTm90ICdib3V0IHRoZSBzZXQsIGJ1dCBpdCdzIG1vcmUgJ2JvdXQgcmVzcGVjdFxuSWYgdGhleSBnZXQgbWUgdXBzZXQsIHRoZXkgZ29uJyBkaWUsIHRoYXQncyBvbiBnYW5nXG5SYW4gdXAgbXkgY2hlY2ssIHdoZW4gSSB3YWxrIGluIHRoZSBiYW5rXG5UaGV5IGdyZWV0IG1lIGF0IHRoZSBkb29yIGJ5IG15IGdvdmVybm1lbnQgbmFtZVxuSSBtYWRlIGEgcHJvbWlzZSwgSSdtIG5ldmVyIGdvbicgY2hhbmdlXG5Sb2xscyBSb3ljZSB1bWJyZWxsYSwgSSdtIGhvcGluJyBpdCByYWluLCB5ZWFoXG5cbltWZXJzZSAyOiBMaWwgQmFieV1cblJpZ2h0IGJhY2sgb24gaXQsIGRlc2lnbmVyIG15IGdhcm1lbnRzXG5Db3JuZXIgc3RvcmUgbW9ybmluZ3MsIHRoZXJlIHVudGlsIHRoZSBzdW4gZG93blxuSSBkb24ndCB0cnVzdCBubyBvbmUsIEkgY2FuJ3QgcHV0IG15IGd1biBkb3duXG5Hb2luJyBudW1iZXIgb25lIG5vdywgaG93IHRoaXMgc291bmQ/XG5IYW5kcyBkb3duLCBiYW5kcyBvdXQsIHBhbnRzIGRvd24sIHllYWgsIEknbSB0aHVnZ2luJ1xuSSBkb25lIGdvdCByaWNoLCBldmVyeWJvZHkgbXkgY291c2luXG5IZSBhaW4ndCBzZXJ2aW4nIG5vIHBhY2tzIHdpdGggbWUsIGhlIGFpbid0IG15IGJyb3RoZXJcbkVsIENoYXBvIGdvIHRocm91Z2ggc2hpdCwgSSBjYWxsIGhlciBcIlwiVGhlIEN1dHRlclwiXCJcbkkganVzdCBib3VnaHQgYSBuZXcgd2hpcCwgSSB3ZW50IGJvdWdodCBhbm90aGVyXG5NeSBtb3RoZXIsIHNoZSBoYXBweSBub3dcbkFpbid0IG5vIGNhcCBhbmQgZ293biwgYnV0IEkgZ3JhZHVhdGVkXG5IZXIgaG91c2UgcGFpZCBmb3IsIGFuZCB0aGF0IG5ldyBNZXJjZWRlc1xuS25vdyB5b3UgdGhhdCB0aGV5IGJlZW4gdHJ5bmEgYmUgbWUgbGF0ZWx5XG5JJ20gYSBoZWF2eSBoaXR0ZXIgbGlrZSBHZXJ2b250YSBEYXZpc1xuVGhhdCBzaGl0IGFpbid0IGdvbicgc2F2ZSAnZW0sIGxlYXZlICdlbSBvbiB0aGUgcGF2ZW1lbnRcbkFsbCBJIGtub3cgaXMgZ2V0IHRoaXMgbW90aGVyZnVja2luJyBwYXBlclxuXG5bQ2hvcnVzOiBMaWwgQmFieV1cblRob3Ugc2hhbGwgbm90IHRyeSBvbmUgb2YgdXMsIGlmIHRoZXkgZG8gSSdtYSBidXN0XG5QbGVhc2UgZG9uJ3QgcmVhY2ggZm9yIG5vIGNoYWluXG5Ob3QgJ2JvdXQgdGhlIHNldCwgYnV0IGl0J3MgbW9yZSAnYm91dCByZXNwZWN0XG5JZiB0aGV5IGdldCBtZSB1cHNldCwgdGhleSBnb24nIGRpZSwgdGhhdCdzIG9uIGdhbmdcblJhbiB1cCBteSBjaGVjaywgd2hlbiBJIHdhbGsgaW4gdGhlIGJhbmtcblRoZXkgZ3JlZXQgbWUgYXQgdGhlIGRvb3IgYnkgbXkgZ292ZXJubWVudCBuYW1lIChIZWxsbz8pXG5JIG1hZGUgYSBwcm9taXNlLCBJJ20gbmV2ZXIgZ29uJyBjaGFuZ2VcblJvbGxzIFJveWNlIHVtYnJlbGxhLCBJJ20gaG9waW4nIGl0IHJhaW4sIHllYWhcblxuW1ZlcnNlIDM6IDQyIER1Z2ddXG5CaXRjaGVzIGFpbid0IHNoaXQsIGRvZ2d5Ym9uZSwgSSBnZXQgaXRcbkZlbGwgaW4gbG92ZSB0d2ljZSwgaGFkIG1lIGluIG15IGZlZWxpbmdzXG5UaHJlZSBtb250aHMsIGRyb3BwZWQgZGFtbiBuZWFyIGEgaGFsZiBhIG1pbGxpb25cbk5pZ2dhLCBmdWNrIGEgaG91c2UsIEkgZGFtbiBuZWFyIGxvc3QgYSBidWlsZGluZ1xuRnVja2VkIG5pZ2dhJ3MgaG9lcywgc28gaGUgc2F5IGhlIHdhbm5hIGtpbGwgbWVcbkkgbWlzcyBUZXJyaSwgc2hlIHdhcyBkaWZmZXJlbnRcbkkgbWlzcyBOZWYsIHJlc3QgaW4gcGVhY2UgdG8gbXkgbmlnZ2FcbkRhbW4gbmVhciB3YXNuJ3QgdGhlcmUgd2hlbiB0aGV5IHRvbGQgbWUgdGhleSBraWxsZWQgeW91XG5UcnkgYW5kIHJhdD8gTmlnZ2EsIGZ1Y2sgb25cblRoaXJ0ZWVuIHRob3UnIFZWUywgQnVmZnMgb25cblN0aWxsIGEgZmxvb2RlZCBuaWdnYSwgdGltZSB3b3J0aCBhIHRydWNrbG9hZFxuR2V0IHRvIGhhdGluJywgSSdtIG91dCwgSSBkb24ndCB0cnVzdCBob2VzXG5JZiB0aGUgZmVkcyBpbiB0aGUgaG91c2UsIGEgbmlnZ2EgdG9sZCBvbiBtZVxuSSBwcmF5IHRvIEdvZCBteSBzb3VsIHRvIGtlZXBcbkc1LCBqdXN0IGJlIGFzIG11cmRlclxuR290dGEgZ2V0IHBpY2tlZCB1cCwgZG9nZ3kgSSdtIGh1cnRcblN0aWxsIHBhaWQgdGhlIGxhd3llciBldmVuIHRob3VnaCBJJ20gbmVydm91c1xuXG5bQ2hvcnVzOiBMaWwgQmFieV1cblRob3Ugc2hhbGwgbm90IHRyeSBvbmUgb2YgdXMsIGlmIHRoZXkgZG8gSSdtYSBidXN0XG5QbGVhc2UgZG9uJ3QgcmVhY2ggZm9yIG5vIGNoYWluXG5Ob3QgJ2JvdXQgdGhlIHNldCwgYnV0IGl0J3MgbW9yZSAnYm91dCByZXNwZWN0XG5JZiB0aGV5IGdldCBtZSB1cHNldCwgdGhleSBnb24nIGRpZSwgdGhhdCdzIG9uIGdhbmdcblJhbiB1cCBteSBjaGVjaywgd2hlbiBJIHdhbGsgaW4gdGhlIGJhbmtcblRoZXkgZ3JlZXQgbWUgYXQgdGhlIGRvb3IgYnkgbXkgZ292ZXJubWVudCBuYW1lXG5JIG1hZGUgYSBwcm9taXNlLCBJJ20gbmV2ZXIgZ29uJyBjaGFuZ2VcblJvbGxzIFJveWNlIHVtYnJlbGxhLCBJJ20gaG9waW4nIGl0IHJhaW4sIHllYWhcblxuI0xpbEJhYnkgI0dyYWNlICNNeVR1cm4gXG5cbk11c2ljIHZpZGVvIGJ5IExpbCBCYWJ5LCA0MiBEdWdnIHBlcmZvcm1pbmcgR3JhY2UuIMKpIDIwMjAgUXVhbGl0eSBDb250cm9sIE11c2ljLCBMTEMsIHVuZGVyIGV4Y2x1c2l2ZSBsaWNlbnNlIHRvIFVNRyBSZWNvcmRpbmdzLCBJbmMuXG5cbmh0dHA6Ly92ZXZvLmx5L083TVI2ZSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNucENfMjRJcTlzL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvM25wQ18yNElxOXMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvM25wQ18yNElxOXMvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNucENfMjRJcTlzL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvM25wQ18yNElxOXMvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDgwLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICIzbnBDXzI0SXE5cyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICIzbnBDXzI0SXE5cyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wMy0xM1QxOTowMDowMFoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiNFdFbF9HWkhOT0RmbjFQZExSdVo1LUJEX1lNIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0NU1ESkJNRGhDUlRsR016bEJRVEEwIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6NTA6NDFaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIktlaXRoIFVyYmFuIC0gR29kIFdoaXNwZXJlZCBZb3VyIE5hbWUgKE9mZmljaWFsIE11c2ljIFZpZGVvKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBvZmZpY2lhbCBtdXNpYyB2aWRlbyBmb3IgS2VpdGggVXJiYW7igJlzIOKAnEdvZCBXaGlzcGVyZWQgWW91ciBOYW1l4oCdIC0gYXZhaWxhYmxlIGV2ZXJ5d2hlcmU6IGh0dHBzOi8vc3RybS50by9LVUdXWU4gXG5cblN1YnNjcmliZSB0byB0aGlzIGNoYW5uZWw6IGh0dHBzOi8vdW1nbi51cy9LZWl0aFVyYmFuU3Vic2NyaWJlXG5XYXRjaCBtb3JlIG9mZmljaWFsIHZpZGVvcyBmcm9tIEtlaXRoIFVyYmFuOiBodHRwczovL3VtZ24udXMvS2VpdGhVcmJhblZpZGVvc1xuU2lnbiB1cCB0byByZWNlaXZlIGVtYWlsIHVwZGF0ZXMgZnJvbSBLZWl0aCBVcmJhbjogaHR0cHM6Ly91bWduLnVzL2tlaXRodXJiYW51cGRhdGVzIFxuTGlzdGVuIHRvIEtlaXRoIFVyYmFu4oCZcyBsYXRlc3QgbXVzaWM6IGh0dHBzOi8vc3RybS50by9LZWl0aFVyYmFuTXVzaWNcblxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5XZWJzaXRlOiBodHRwOi8va2VpdGh1cmJhbi5uZXQvXG5GYWNlYm9vazogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2tlaXRodXJiYW5cbkluc3RhZ3JhbTogaHR0cDovL2luc3RhZ3JhbS5jb20vS2VpdGhVcmJhblxuVHdpdHRlcjogaHR0cHM6Ly90d2l0dGVyLmNvbS9rZWl0aHVyYmFuXG5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuI0tlaXRoVXJiYW4gI0dvZFdoaXNwZXJlZFlvdXJOYW1lICNDb3VudHJ5TXVzaWNcblxuTXVzaWMgdmlkZW8gYnkgS2VpdGggVXJiYW4gcGVyZm9ybWluZyBHb2QgV2hpc3BlcmVkIFlvdXIgTmFtZS4gwqkgMjAyMCBIaXQgUmVkIFJlY29yZHMsIHVuZGVyIGV4Y2x1c2l2ZSBsaWNlbnNlIHRvIFVNRyBSZWNvcmRpbmdzLCBJbmMuXG5cbmh0dHA6Ly92ZXZvLmx5L08xSFJiRCIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3l5bjdfdS1zaGE4L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveXluN191LXNoYTgvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveXluN191LXNoYTgvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3l5bjdfdS1zaGE4L3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveXluN191LXNoYTgvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDgxLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJ5eW43X3Utc2hhOCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJ5eW43X3Utc2hhOCIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wNC0wMlQxNjowMDoxMloiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiRGZKUTc1dE8tUkRDeUdyWFIydnBpbC1NUGV3IiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0ME1UWXhNRE15TVRKRVFrSkdPVGN3IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6NTE6MzRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIk5BViAmIEd1bm5hIGZ0LiBUcmF2aXMgU2NvdHQgLSBUdXJrcyAoT2ZmaWNpYWwgVmlkZW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiT2ZmaWNpYWwgbXVzaWMgdmlkZW8gYnkgTkFWICYgR3VubmEgZmVhdC4gVHJhdmlzIFNjb3R0IFwiVHVya3PigJ0gYXZhaWxhYmxlIGV2ZXJ5d2hlcmUgbm93OiBodHRwczovL05hdi5sbmsudG8vVHVya3NcblxuU3Vic2NyaWJlIHRvIE5hdidzIGNoYW5uZWw6XG5odHRwOi8vYml0Lmx5L1N1YnNjcmliZS10by1OYXZcblxuRm9sbG93IE5hdjpcbmh0dHBzOi8vc291bmRjbG91ZC5jb20vbmF2bXVzaWNcbmh0dHBzOi8vdHdpdHRlci5jb20vYmVhdHNieW5hdlxuaHR0cHM6Ly9pbnN0YWdyYW0uY29tL2JlYXRzYnluYXZcblxuVmlkZW8gZGlyZWN0ZWQgYnkgQW1pciBcIkNhc2hcIiBFc21haWxpYW4gJiBaYWMgRmFjdHNcbkV4ZWN1dGl2ZSBwcm9kdWNlZCBieSBBbWlyIFwiQ2FzaFwiIEVzbWFpbGlhbiAmIFphYyBGYWN0c1xuVmlkZW8gcHJvZHVjZWQgYnkgU2luYSBUYXNoICYgT21hciBSZXlub3NvXG5WaWRlbyBlZGl0ZWQgYnkgWmFjIEZhY3RzXG5Qcm9kdWN0aW9uIENvbXBhbnk6IFN0YXNoIEJveCBQcm9kdWN0aW9ucyBcblxuTHlyaWNzOlxuXG5J4oCZbSBhIGxhdGUgYmxvb21lciAzcmQgeWVhciBvbiB0aGUgc2NlbmVcbjIwIFJhY2tzIGRvbuKAmXQgZmVlbCBsaWtlIG5vdGhpbmcgdG8gbWVcbkNhbWUgZnJvbSB0aGUgc3RyZWV0cyBpdCB0dXJuZWQgbWUgdG8gYSBiZWFzdFxuSW52aXNpYmxlIHNldCBkaWFtb25kcyBodWdnaW4gbXkgcGllY2VcblxuQm9vayBtZSBmb3IgYSBzaG93IEkgbmVlZCA4MCBhdCBsZWFzdFxuSSB3YW50IHRoZSBzbW9rZSBhaW7igJl0IG5vIGtlZXBpbmcgdGhlIHBlYWNlXG5LZWVwIG1lIGEgcmF6b3Igd2hlbiBpbSBpbiB0aGUgZWFzdFxuT3BlbiBlbeKAmSB1cCBqdXN0IGxpa2UgYSBzdXJnZXJ5XG5cbkV2ZXJ5dGhpbmcgYnVybmlu4oCZIGFyb3VuZCBtZSBpbSBsaXRcblNob3cgYSBsaXR0bGUgYXR0aXR1ZGUgc3dhcHBlZCBvdXQgYSBiaXRjaFxuSSBzcGVudCAyNTAgZG9u4oCZdCBrbm93IHdoZXJlIGl0IHdlbnRcbk15IGhvb2Qgb24gbXkgYmFjayBJIGdvdHRhIHJlcHJlc2VudFxuXG5Ub3JvbnRvIHlvdSB1c2VsZXNzIHlvdSBkb27igJl0IGhhdmUgYSBwdWxsIFxuV2FybSB0aGF0IGJveSB1cCBoZSBnb3Qgc2hvdCBpbiB0aGUgY29sZFxuMzAgcm91bmRzIGluIHRoZSBjbGlwIGxldCBpdCB1bmxvYWRcbkkgZnVja2VkIGEgYml0Y2ggSSBwaWNrZWQgcmlnaHQgb3V0IG9mIHZvZ3VlXG5cblRvb2sgMjAgYml0Y2hlcyBvbiBteSBmaXJzdCB2YWNheVxuSSBhaW7igJl0IHBpY2tpbiB1cCBpbSBpbiBUdXJrcyBsaWwgYmFieVxuRXZlcnkgb3RoZXIgd2F0Y2ggZ290IGRpYW1vbmRzIGluIHRoZSBmYWNlXG5QdWxsaW4gb3V0IGFjaWQgdGFrZSBhIHRhc3RlIGxpbCBiYWJ5XG5cblB1bGxpbiBvdXQgNTAgcmFja3Mgd2Fsa2luIG91dHRhIGNoYXNlXG5JZiBJIGRyb3AgZGVhZCBpbGwgYmUgaGFyZCB0byByZXBsYWNlXG5IYXJkbHkgZ2V0IHRoaXJzdHkgZ290IHdhdGVyIGxpa2UgYSBsYWtlXG5NeSBicm90aGVyIGdvdCBsb2NrZWQgYW5vdGhlciBib25kIEkgZ290dGEgcGF5XG5GaXJzdCB0aW1lIGluIFR1cmtzIGdvdCBhIHdob2xlIGJ1bmNoIG9mIHdvcmtcbkdvdCB0byBicmluZyB0d28gamV0cyBhbmQgYSB3aG9sZSBsb3Qgb2YgYmFiZXNcbkkgZmlyc3QgdG9vayBhIGdhbWUgY2hhbmdpbmcgdmVyc2VcbldpdGggdGhlIGNoYW5nZSBnb25uYSBodXJ0IGJ1dCBpdCByZWFsbHkgYWlu4oCZdCBhIGdhbWVcblNob3J0eSBsaWtlIHRvIHR3ZXJrIHVwIGluIGEgcmFnZVxuUmVhbGx5IGdldCB0byB0cmlwcGluIG9uIHRoZSBzdGFnZVxuTmV2ZXIgZXZlciBsZXQgdGhlbSBzZWUgdGhlIG1hbiB1bmxlc3MgdGhleSBwYXlcbk5pZ2dhcyBoYXZpbiBiZWVmIG9mZiBvbiB3aGF0IHRoZXkgcHJheSBcbkNhY3R1cyBKYWNrIG1lIHVwIGFuZCBkb3duIG9uIHRoZSB0b3VyXG5NYWtlIHN1cmUgdGhlIG9uZXMgeW91IHdpdGggb24gZ29cbk1ha2Ugc3VyZSB0aGUgb25lcyB5b3Ugd2l0aCBpcyB3aXRoIGl0XG5NYWtlIHN1cmUgdGhlIG9uZXMgeW91IHdpdGggYXJlXG5TaGUgbmVlZCBhIHF1aWNrIHRhbmssIEnigJltbWEgdGV4dCB3aXRoIHRoZSBH4oCZc1xuTW9yZSBmb3IgdGhlIGJvZHksIG5lZWQgbW9yZSB0aGFuIHRoZSBncmVhc2VcbkZpbGxpbiBoZXIgbm9zZSB3aXRoIHNvbWUgc2hpdCBJIGNhbiBza2kgd2l0aFxuSGF0ZXJzIHNheSB0aGUgZmlyc3QgdGltZSBpcyBpdCBoYXJkIHRvIGJlbGlldmVcblxuVG9vayAyMCBiaXRjaGVzIG9uIG15IGZpcnN0IHZhY2F5XG5JIGFpbuKAmXQgcGlja2luIHVwIGltIGluIFR1cmtzIGxpbCBiYWJ5XG5FdmVyeSBvdGhlciB3YXRjaCBnb3QgZGlhbW9uZHMgaW4gdGhlIGZhY2VcblB1bGxpbiBvdXQgYXNzIGFuZCB0YWtlIGEgdGFzdGUgbGlsIGJhYnlcblxuUHVsbGluIG91dCA1MCByYWNrcyB3YWxraW4gb3V0dGEgY2hhc2VcbklmIEkgZHJvcCBkZWFkIGlsbCBiZSBoYXJkIHRvIHJlcGxhY2VcbkhhcmRseSBnZXQgdGhpcnN0eSBnb3Qgd2F0ZXIgbGlrZSBhIGxha2Vcbk15IGJyb3RoZXIgZ290IGxvY2tlZCBhbm90aGVyIGJvbmQgSSBnb3R0YSBwYXlcblxuVHJhcHBpbiBvbiB0aGUgYmxvY2sgXG5JbGwgbmV2ZXIgc2VydmUgYSBjb3BcbkkgYWx3YXlzIGtlcHQgdGhlIGdsb2NrXG5JIGFpbnQgYm91dCB0byBzZWUgdGhlIGdyYXZlXG5cblB1bGwgdXAgSSBtYWtlIHF1aWNrIHN0b3Bcbkkgc2hvdCBvbmUgc3RvcCBJIGRvbuKAmXQgaGF2ZSA3IGRheXNcbldobyBpcyB0aGF0IGxpbCBuaWdnYSBhcyBoZSBob3BwaW4gb3V0IGEgd3JhaXRoXG5DaG9wcGVyIGdldCBpdCBjaG9wcGluIGxpa2UgYSBibGFkZVxuXG5Zb3UgYWludCBnZXQgbm8gbW9uZXkgYnV0IHlvdSBwb3BwaW4gb24geW91ciBwYWdlXG5UcnVzdCBtZSB3ZSBjYW4gbmV2ZXIgYmUgdGhlIHNhbWVcblxuS25vdyBJIGxpa2UgdG8gZmxpcnRcbk5vIHNraXJ0cyBpbiBUdXJrc1xuSW0gcHV0dGluIGluIHdvcmtcbkkgYmVhdCBoZXIgb3V0dGEgZnJhbWVcblxuU2hlIHN3ZWV0IEkgbW92ZSBlbm91Z2ggcGVyYyBcbkkgYm91Z2h0IGhlciBhIEJpcmtpbiBhbmQgYSBiaXJ0aGRheSBjYWtlXG5MaW5lIGhpcyBhc3MgdXAgbGV0IHRoZSBiYXJiZXIgZG8gdGhlIGZhZGUgXG5GZWQgeW91ciBob2UgY3JlcGVzIGFuZCBncmFwZXNcbkNhc2ggdG9sZCBtZSBkb27igJl0IHdvcnJ5IHRoZXJl4oCZcyBhIGJpbGxpb24gb24gdGhlIHdheVxuV2UganVzdCBzcGxpdCBhIGJpbGx5IHdpdGggdGhlIGdhbmdcblxuVG9vayAyMCBiaXRjaGVzIG9uIG15IGZpcnN0IHZhY2F5XG5JIGFpbuKAmXQgcGlja2luIHVwIGltIGluIFR1cmtzIGxpbCBiYWJ5XG5FdmVyeSBvdGhlciB3YXRjaCBnb3QgZGlhbW9uZHMgaW4gdGhlIGZhY2VcblB1bGxpbiBvdXQgYXNzIGFuZCB0YWtlIGEgdGFzdGUgbGlsIGJhYnlcblxuUHVsbGluIG91dCA1MCByYWNrcyB3YWxraW4gb3V0dGEgY2hhc2VcbklmIEkgZHJvcCBkZWFkIGlsbCBiZSBoYXJkIHRvIHJlcGxhY2VcbkhhcmRseSBnZXQgdGhpcnN0eSBnb3Qgd2F0ZXIgbGlrZSBhIGxha2Vcbk15IGJyb3RoZXIgZ290IGxvY2tlZCBhbm90aGVyIGJvbmQgSSBnb3R0YSBwYXlcblxuI05BViAjVHVya3NcblxuTXVzaWMgdmlkZW8gYnkgTkFWLCBHdW5uYSBwZXJmb3JtaW5nIFR1cmtzLiDCqSAyMDIwIFhPIFJlY29yZHMsIExMQyBhbmQgUmVwdWJsaWMgUmVjb3JkcywgYSBkaXZpc2lvbiBvZiBVTUcgUmVjb3JkaW5ncywgSW5jLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1dCMXhUblR3RjNRL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvV0IxeFRuVHdGM1EvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvV0IxeFRuVHdGM1EvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1dCMXhUblR3RjNRL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvV0IxeFRuVHdGM1EvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDgyLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJXQjF4VG5Ud0YzUSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJXQjF4VG5Ud0YzUSIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wMy0zMFQxOTowMDoxMloiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiZ1pMTVJGczhuUVBnMjRvZXRxTUpCdG11dGlVIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0NE16RkdNVFUxTURZek1FWTVNa1EzIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6NTE6NDlaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIkpvcmRhbiBEYXZpcyAtIFNsb3cgRGFuY2UgSW4gQSBQYXJraW5nIExvdCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNsb3cgRGFuY2UgSW4gQSBQYXJraW5nIExvdOKAnSBhcHBlYXJzIG9uIEpvcmRhbiBEYXZpc+KAmXMgYWxidW0gSE9NRSBTVEFURSwgYXZhaWxhYmxlIG5vdyBhdCBodHRwOi8vc3RybS50by9KREhvbWVTdGF0ZS4gXG5cblB1cmNoYXNlIEpvcmRhbiBEYXZpc+KAmXMgbGF0ZXN0IG11c2ljOiBodHRwOi8vdW1nbi51cy9qb3JkYW5kYXZpc3B1cmNoYXNlIFxuU3RyZWFtIHRoZSBsYXRlc3QgZnJvbSBKb3JkYW4gRGF2aXM6IGh0dHA6Ly91bWduLnVzL2pvcmRhbmRhdmlzc3RyZWFtIFxuU2lnbiB1cCB0byByZWNlaXZlIGVtYWlsIHVwZGF0ZXMgZnJvbSBKb3JkYW4gRGF2aXMgYXQgdGhlIOKAnFNJR05VUOKAnSBsaW5rIG9uOiBodHRwOi8vdW1nbi51cy9qb3JkYW5kYXZpc3VwZGF0ZXMgXG5cbldlYnNpdGU6IGh0dHA6Ly93d3cuam9yZGFuZGF2aXNvZmZpY2lhbC5jb20vIFxuRmFjZWJvb2s6IGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9qb3JkYW5kYXZpc29mZmljaWFsL1xuSW5zdGFncmFtOiBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2pvcmRhbmRhdmlzb2ZmaWNpYWwvXG5Ud2l0dGVyOiBodHRwczovL3R3aXR0ZXIuY29tL0pvcmRhbkNXRGF2aXMgXG5cbk11c2ljIHZpZGVvIGJ5IEpvcmRhbiBEYXZpcyBwZXJmb3JtaW5nIFNsb3cgRGFuY2UgSW4gQSBQYXJraW5nIExvdC4gwqkgMjAxOSBVTUcgUmVjb3JkaW5ncywgSW5jLlxuXG5odHRwOi8vdmV2by5seS9lbTZnM0MiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8wRDNWNHM0enp4Yy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzBEM1Y0czR6enhjL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzBEM1Y0czR6enhjL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8wRDNWNHM0enp4Yy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzBEM1Y0czR6enhjL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA4MywKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiMEQzVjRzNHp6eGMiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiMEQzVjRzNHp6eGMiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTktMDctMTVUMTM6MDA6MDBaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIndwUnE3bHVod0VrVHY2TnBfYU9hQjJ5NWxnbyIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNDBNRFUyTnpoR09UQXlNelUxUmtSQiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjUyOjA1WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJKYWtlIE93ZW4gLSBIb21lbWFkZSAoT2ZmaWNpYWwgTXVzaWMgVmlkZW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQmFzZWQgb24gdHJ1ZSBldmVudHMuIFdhdGNoIEpha2UgT3dlbidzIG5ld2VzdCBtdXNpYyB2aWRlbyBmb3IgXCJIb21lbWFkZVwiIFxuXG5MeXJpY3M6XG5cbldoZXJlIEkgZ3JldyB1cCBnZXR0aW5nIGRyZXNzZWQgdXAgbWVhbnNcbkEgYnV0dG9uIGRvd24gc2hpcnQgYW5kIGEgZ29vZCBwYWlyIG9mIGplYW5zXG5XYXNu4oCZdCBTdW5kYXkgc3VwcGVyIHdpdGhvdXQgY29sbGFyZCBncmVlbnNcbkRhZCB3YXMgYm9zcywgQ2hyaXN0IGlzIGtpbmdcbkZyaWRheSBuaWdodCB3YXMgbGl2aW5nIGZvciB0aGVtIGxpZ2h0cyB0byBjb21lIG9uXG5UaGVuIGl0IHR1cm5lZCB0byBNaWxsZXIgTGl0ZXMgd2hlbiBJIHR1cm5lZCAyMVxuVGhlcmXigJlzIHNvbWUgdGhpbmdzIGFib3V0IG1lIHRoYXQgSSBjYW7igJl0IGNoYW5nZVxuSeKAmWxsIGFsd2F5cyBiZSB0aGUgbWFuIHRoYXQgaG9tZSBtYWRlXG5cbkhvbWUgbWFkZSBtZSBhIGxvdmUgYSBkaXJ0IHJvYWRcbkhvbWUgbWFkZSBtZSBjcmF2ZSBzb21lIGljZSBjb2xkXG5Ib21lbWFkZSBzd2VldCB0ZWEgb25seSBtYW1hIGtub3dzIGhvdyB0byBtYWtlLCBob21lbWFkZVxuSG9tZSBtYWRlIG1lIGxvdmUgYSBzbWFsbCB0b3duXG5Ib21lIG1hZGUgbWUgd2FubmEgc2V0dGxlIGRvd25cbkluIGEgaG9tZSBtYWRlIGZvciB0aGUgdHdvIG9mIHVzXG5FdmVyeXRoaW5nIEkgbG92ZSBpcyBIb21lbWFkZVxuXG5NeSBwaWNrdXAgbGluZXMgZGlkbuKAmXQgc2VlbSB0byB3b3JrXG5HdWVzcyBteSBwaWNrdXAgdHJ1Y2sgbXVzdGEgZ290IHRvIGhlclxuV2luZG93cyBkb3duIHNpbmdpbmcgZXZlcnkgd29yZFxuVG8gdGhhdCBHZW9yZ2UgU3RyYWl0IG1peHRhcGUgdGhhdCB3YXMgaG9tZW1hZGVcblxuSG9tZSBtYWRlIG1lIGEgbG92ZSBhIGRpcnQgcm9hZFxuSG9tZSBtYWRlIG1lIGNyYXZlIHNvbWUgaWNlIGNvbGRcbkhvbWVtYWRlIHN3ZWV0IHRlYSBvbmx5IG1hbWEga25vd3MgaG93IHRvIG1ha2UsIGhvbWVtYWRlXG5Ib21lIG1hZGUgbWUgbG92ZSBhIHNtYWxsIHRvd25cbkhvbWUgbWFkZSBtZSB3YW5uYSBzZXR0bGUgZG93blxuSW4gYSBob21lIG1hZGUgZm9yIHRoZSB0d28gb2YgdXNcbkV2ZXJ5dGhpbmcgSSBsb3ZlIGlzIEhvbWVtYWRlXG5cbkhleSB3aGF0IHdlIGdvdCB5b3UgY2Fu4oCZdCBnZXQgZnJvbSBhIHN0b3JlXG5IZXkgdGhlIGdvb2Qgc3R1ZmYgY29tZXMgZnJvbSB0aGUgZ29vZCBsb3JkXG5Ib21lbWFkZVxuXG5Ib21lIG1hZGUgbWUgYSBsb3ZlIGEgZGlydCByb2FkXG5Ib21lIG1hZGUgbWUgY3JhdmUgc29tZSBpY2UgY29sZFxuSG9tZW1hZGUgc3dlZXQgdGVhIG9ubHkgbWFtYSBrbm93cyBob3cgdG8gbWFrZSwgaG9tZW1hZGVcbkhvbWUgbWFkZSBtZSBsb3ZlIGEgc21hbGwgdG93blxuSG9tZSBtYWRlIG1lIHdhbm5hIHNldHRsZSBkb3duXG5JbiBhIGhvbWUgbWFkZSBmb3IgdGhlIHR3byBvZiB1c1xuRXZlcnl0aGluZyBJIGxvdmUgaXMgSG9tZW1hZGVcblxuSG9tZW1hZGUsIGhvbWVtYWRlLCBob21lbWFkZVxuSG9tZW1hZGUsIGhvbWVtYWRlLCB5ZWFoIGl04oCZcyBob21lbWFkZVxuSG9tZW1hZGUsIGhvbWVtYWRlLCBob21lbWFkZVxuXG4tLS1cblxuTGlzdGVuIHRvIFwiSG9tZW1hZGVcIiBoZXJlOiBodHRwczovL0pha2VPd2VuLmxuay50by9HcmVldGluZ3NGcm9tSmFrZVxuR2V0IHVwZGF0ZXMgZnJvbSBKYWtlIE93ZW4gaGVyZTogaHR0cHM6Ly93d3cuamFrZW93ZW4ubmV0L21haWxpbmctbGlzdFxuVG8gc2VlIGFsbCB1cGNvbWluZyB0b3VyIGRhdGVzLCB2aXNpdDogaHR0cHM6Ly93d3cuamFrZW93ZW4ubmV0LyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL05pRkNONjZrN0NzL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTmlGQ042Nms3Q3MvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTmlGQ042Nms3Q3MvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL05pRkNONjZrN0NzL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTmlGQ042Nms3Q3MvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDg0LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJOaUZDTjY2azdDcyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJOaUZDTjY2azdDcyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxOS0wOS0yN1QxNzowMDoxMVoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiMm1yVFEwTEZQU0dTR0hYQ3o4N0JwN1N5Z1ljIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM1RVJrUkNOMFV4TURJNE4wSkNNekZFIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6NTI6MjZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIkhhbHNleSAtIFlvdSBzaG91bGQgYmUgc2FkIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSGFsc2V54oCZcyBuZXcgYWxidW0g4oCYTWFuaWPigJkgb3V0IG5vdyEgaHR0cHM6Ly9oYWxzZXkubG5rLnRvL21hbmljdGhlYWxidW1JRFxuaVR1bmVzOiBodHRwczovL2hhbHNleS5sbmsudG8vbWFuaWN0aGVhbGJ1bUlEL2lUdW5lc1xuU3BvdGlmeTogaHR0cHM6Ly9oYWxzZXkubG5rLnRvL21hbmljdGhlYWxidW1JRC9zcG90aWZ5IFxuQXBwbGUgTXVzaWM6IGh0dHBzOi8vaGFsc2V5Lmxuay50by9tYW5pY3RoZWFsYnVtSUQvYXBwbGVtdXNpY1xuQW1hem9uOiBodHRwczovL2hhbHNleS5sbmsudG8vbWFuaWN0aGVhbGJ1bUlEL2FtYXpvblxuR29vZ2xlIFBsYXk6IGh0dHBzOi8vaGFsc2V5Lmxuay50by9tYW5pY3RoZWFsYnVtSUQvZ29vZ2xlLXBsYXlcblxuR2V0IHRpY2tldHMgdG8gI01hbmljV29ybGRUb3VyISBFYWNoIHRpY2tldCBwdXJjaGFzZSBjb21lcyB3aXRoIGEgcGh5c2ljYWwgY29weSBvZiDigJhNYW5pY+KAmS5cbmh0dHBzOi8vaGFsc2V5Lmxuay50by9NQU5JQ1dvcmxkVG91cklEXG5cbkZvbGxvdyBIYWxzZXkg4oCTXG5Ud2l0dGVyOiBodHRwOi8vdHdpdHRlci5jb20vaGFsc2V5IFxuRmFjZWJvb2s6IGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9IYWxzZXlNdXNpYyBcbkluc3RhZ3JhbTogaHR0cDovL2luc3RhZ3JhbS5jb20vaWFtaGFsc2V5XG5TcG90aWZ5OiBodHRwczovL2hhbHNleS5sbmsudG8vSW5NeUhlYWRJRFxuT2ZmaWNpYWwgU2l0ZTogaHR0cDovL2lhbWhhbHNleS5jb21cblxuI2hhbHNleSAjbWFuaWMgI3lvdXNob3VsZGJlc2FkXG5cbk11c2ljIHZpZGVvIGJ5IEhhbHNleSBwZXJmb3JtaW5nIFlvdSBzaG91bGQgYmUgc2FkLiDCqSAyMDIwIENhcGl0b2wgUmVjb3JkcywgTExDIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOG5CRnFacHBJRjAvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS84bkJGcVpwcElGMC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS84bkJGcVpwcElGMC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOG5CRnFacHBJRjAvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS84bkJGcVpwcElGMC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogODUsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIjhuQkZxWnBwSUYwIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIjhuQkZxWnBwSUYwIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTAxLTEwVDA1OjAwOjEyWiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJiYldna3Vxd2ZBM1BYYXJqMHJ3anR4QjZMeVUiLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzQxUXpjMlF6azBOelk0TmprNE1UZzEiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTo1Mjo0MloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiTWFkZGllICYgVGFlIC0gRGllIEZyb20gQSBCcm9rZW4gSGVhcnQiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgb2ZmaWNpYWwgTXVzaWMgVmlkZW8gZm9yIE1hZGRpZSAmIFRhZeKAmXMgTWFtYSBDYW4gWW91IERpZSBGcm9tIEEgQnJva2VuIEhlYXJ0LlxuXG5TdWJzY3JpYmUgdG8gdGhpcyBjaGFubmVsOiBodHRwczovL3VtZ24udXMvTWFkZGllQW5kVGFlU3Vic2NyaWJlICBcbldhdGNoIG1vcmUgb2ZmaWNpYWwgdmlkZW9zIGZyb20gTWFkZGllICYgVGFlOiBodHRwczovL3VtZ24udXMvTWFkZGllYW5kVGFlVmlkZW9zXG5TaWduIHVwIHRvIHJlY2VpdmUgZW1haWwgdXBkYXRlcyBmcm9tIE1hZGRpZSAmIFRhZTogaHR0cHM6Ly91bWduLnVzL01hZGRpZUFuZFRhZVVwZGF0ZXNcbkxpc3RlbiB0byBNYWRkaWUgJiBUYWXigJlzIGxhdGVzdCBtdXNpYzogaHR0cHM6Ly9zdHJtLnRvL01OVE11c2ljXG5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuV2Vic2l0ZTpodHRwOi8vd3d3Lm1hZGRpZWFuZHRhZS5jb21cbkZhY2Vib29rOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vbWFkZGllYW5kdGFlIFxuSW5zdGFncmFtOiBodHRwOi8vaW5zdGFncmFtLmNvbS9tYWRkaWVhbmR0YWVcblR3aXR0ZXI6IGh0dHBzOi8vdHdpdHRlci5jb20vTWFkZGllYW5kVGFlIFxuIFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4jTWFkZGllJlRhZSAjTWFtYUNhbllvdURpZUZyb21BQnJva2VuSGVhcnQgI0NvdW50cnlNdXNpYyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1hiYW9pLWxpZk9NL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWGJhb2ktbGlmT00vbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWGJhb2ktbGlmT00vaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1hiYW9pLWxpZk9NL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWGJhb2ktbGlmT00vbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDg2LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJYYmFvaS1saWZPTSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJYYmFvaS1saWZPTSIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxOS0wOC0wOFQxOTo1ODo0NFoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiYk1ibE5yakR5dElkS3BVaV9SaEVLa1BIeVlrIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0NE5FWkdRMFUxUlRBMU5qZ3hNMFJGIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6NTI6NTlaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIkJlIEEgTGlnaHQgKEx5cmljIFZpZGVvKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIk11c2ljIHZpZGVvIGJ5IFRob21hcyBSaGV0dCBwZXJmb3JtaW5nIEJlIEEgTGlnaHQgKEx5cmljIFZpZGVvKS4gwqkgMjAyMCBCaWcgTWFjaGluZSBMYWJlbCBHcm91cCwgTExDXG5cbmh0dHA6Ly92ZXZvLmx5L3hXYThlbyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzhZdVdBWm1EMGFVL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOFl1V0FabUQwYVUvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOFl1V0FabUQwYVUvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzhZdVdBWm1EMGFVL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOFl1V0FabUQwYVUvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDg3LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICI4WXVXQVptRDBhVSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICI4WXVXQVptRDBhVSIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wMy0zMFQyMTowMDowMloiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAicTlybEV3LTNhcW1RRHNRVU4tUGJMWGw4MUwwIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0ek5UUXlORFJFUkVORU1EaEdPREl6IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMTJUMTk6NTM6MjNaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIkxpbCBCYWJ5IEZlYXQuIEd1bm5hIC0gSGVhdGluIFVwIChPZmZpY2lhbCBWaWRlbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTdHJlYW0vRG93bmxvYWQgTGlsIEJhYnnigJlzIE5ldyBBbGJ1bSDigJxNeSBUdXJu4oCdOiBodHRwczovL3F1YWxpdHljb250cm9sLmxuay50by9NeVR1cm5ZRFxuXG5Gb2xsb3cgTGlsIEJhYnkgRXZlcnl3aGVyZTpcbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vbGlsYmFieV8xL1xuaHR0cHM6Ly90d2l0dGVyLmNvbS9saWxiYWJ5NFBGXG5odHRwczovL3d3dy5mYWNlYm9vay5jb20vNHBmbGlsYmFieVxuXG53d3cuaWFtbGlsYmFieS5jb21cblxuW0ludHJvXVxuKENvb2sgdGhhdCBzaGl0IHVwLCBRdWF5KVxuNFBGIGxvb2sgbGlrZSB3ZSBoaXQgbGlja3MgaG93IHdlIHNlbGwgYnJpY2tzXG5XZSBkb24ndOKAhXNlbGzigIVzaGl0LCB3ZSBqdXN04oCFbWFrZSBoaXRzLCB5ZWFoXG5UdXJuIHVwXG5cbltWZXJzZSAxOiBMaWwgQmFieV1cbktlZXBpbicgbXkgY29tcG9zdXJlLOKAhW5ldmVyIHNvYmVyXG5OZXZlciBjaG9raW4nLCBhbHdheXMgc21va2luIGRvamFcbkZ1Y2sgJ2VtIGlmIHRoZXkgZ2V0dGluJyBvdmVyXG5Hb3QgYSBNb25jbGVyIGNvYXQgYmVjYXVzZSB0aGUga2lkIHRoZSBjb2xkZXN0XG5JIGFpbid0IGNoYW5nZWQsIEkgc3RheWVkIHRoZSBzYW1lIGFuZCBtYWludGFpbmVkXG5JdCdzIHNhZmUgdG8gc2F5IHRoZSBraWQgZ2V0dGluJyBvbGRlclxuRm9yZXZlciBnYW5nLCBJJ20gbmV2ZXIgc3dpdGNoaW4nIG92ZXJcbk1hZGUgYSBsYW5lIGFuZCBuaWdnYXMgY2FuJ3QgZ2V0IG92ZXJcbkkgY2FuJ3QgbWF0Y2ggd2l0aCByYXBwZXJzLCB0aGV5IGJlIGJvZ3VzXG5SZWFsbHkgZ2V0IGEgcGFjayBhbmQga2VlcCB0aGUgb3ZlclxuQmlnIGRyaXBwZXIsIHN0YW5kIHVwIGluIHRoZSBvY2VhblxuRXZlcnlib2R5IHRyYXBwaW4nLCB3ZSBnZXQgbG9hZHMgaW5cbkhlIGFpbid0IDRQRiBpZiBoZSBhaW4ndCBnb3QgbW90aW9uXG5NYWRlIGEgaGFsZiBhIHRpY2tldCBvZmYgcHJvbW90aW9uXG5TaG91dCBvdXQgU3dpc2hlcnMgU3dlZXQsIHRoZXkga2VlcCBtZSByb2xsaW4nXG5CdXQgaWYgd2UgY2F0Y2ggdGhlIG9wcCwgd2UgZ290dGEgc21va2UgaGltXG5SaWRpbicgJ3JvdW5kIHdpdGggRHJhY3MgbGlrZSB3ZSBPVk9cbkkgZ290IHNvbWUgcmFja3MgYW5kIEkgd2FudCBzb21lIG1vcmVcblN0aWxsIGdvdCB0aGVtIHBhc3NpbicgdGhlIGhvb2QsIGNhbGwgaXQgZ2l2ZS1hbmQtZ29cbktlZXAgYSBuaWdnYSBtYWluIGJpdGNoIGluIGEgZmlndXJlLWZvdXJcbkxldCBtZSBmdWNrIHdoZW4gSSB3YW50LCBJIGp1c3QgY29tZSBhbmQgZ29cbk1hbiwgdGhlc2UgcmFja3MgZ2V0dGluJyB0b28gYmlnIGZvciB0aGVzZSBza2lubnkgY2xvdGhlc1xuSSBtaWdodCBwdXQgbWUgYW4gTSBpbiBzb21lIGJpZyBHaXJiYXVkXG5MZXQgbGlsJyBicm8gaGl0IHRoZSBzdGljaywgaGFkIHN0YXJ0IGdldHRpbicgb2xkXG5JIHNwZW50IGZpdmUgaHVuZHJlZCByYWNrcyBvbiBhIExhbWJvJ1xuQW5kIGRpZG4ndCBldmVuIGtub3cgaG93IHRvIG1ha2UgdGhhdCBtb3RoZXJmdWNrZXIgZ29cbk9uIG15IGJpcnRoZGF5LCBJIGp1c3Qgd2FubmEgbGlmdCB0aGUgZG9vclxuQmFyZWx5IGZsZXgsIGJ1dCBkb24ndCBwbGF5IHdpdGggbWUsIHBlcmlvZFxuU2hvb3RlcnMgZm9sbG93IGJlaGluZCBpbiBhIFVydXNcbkluIHRoZSBSb2xscyB0cnVjaywgSSBmZWVsIGxpa2UgYSB0b3VyaXN0XG5JJ20gdGhlIG9uZSBmcm9tIHRoZSBib3R0b20gd2hvIHNvbGQgYWxsIG15IHBhcnRuZXJzIHRoZW0gcG91bmRzXG5Vc2VkIHRvIGRyaXZlIGluIGEgQnVpY2tcblxuW0Nob3J1czogTGlsIEJhYnkgJiBHdW5uYV1cbkhvdCwgaG90LCBob3QsIEknbSBoZWF0aW4nIHVwXG5JIGZ1Y2sgd2l0aCBzbGltZXMgYW5kIEknbSBnb25uYSBidXN0IChCYWgsIGJhaClcbkhlIGNhbid0IHB1dCBvbiB0aGF0IGRyaXAsIGhlIGFpbid0IG9uZSBvZiB1c1xuSG93IHlvdSByaWRpbicgaW4gYSBCZW56IGFuZCBhIFRvbmthIHRydWNrP1xuSG93IHlvdSBnb3QgZXZlcnlib2R5IGxpdCwgcGlwaW4nIHVwP1xuT2gsIHNoZSBiYWQgd2l0aCBubyBzd2FnLCBJIGNhbiBwaXBlIGhlciB1cFxuTWFkZSBteSBsYXN0IG9uZSBteSBsYXN0IG9uZSwgSSdtIHdpZmluJyBoZXJcbkNvdW50IHRoZSBtb25leSB1cCBmYXN0IGxpa2UgSSdtIHR5cGluJyBzb21ldGhpbidcbkknbSB0aGUgdHlwZSB0byBnZXQgYWN0aXZlIGFuZCBuZXZlciBydW4gKFd1bm5hKVxuXG5bVmVyc2UgMjogR3VubmFdXG5LZWVwIHRoZSBSdWdlcnMsIG15IG5pZ2dhcyBhaW4ndCBzY2FyZWQgb2Ygbm90aGluJyAoTmFoKVxuQW5kIGFpbid0IG5vIHJ1bGVzLCB5b3UgZ290IHJhY2tzLCB5b3UgY2FuIGdldCBpdCBkb25lIChZZWFoKVxuT24gYSBsaWdodCBkYXksIEkga2VlcCBtZSBhIGhvbmV5IGJ1biAoT25lIGh1bmRyZWQpXG5NYWtpbicgaGl0IGFmdGVyIGhpdCwgY2FsbCBtZSBCYXJyeSBCb25kcyAoSGl0cylcbkZvciB0aGlzIENocmlzdG1hcywgSSBib3VnaHQgZXZlcnlib2R5IGd1bnMgKFN3ZWFyKVxuQnVzdGluJyBjaG9wcGVycyBhbmQgRk4ncyBmb3IgZXZlcnlvbmUgKEdycmF0KVxuVGFrZSB0aGF0IHJvb2Ygb2ZmIHRoZSBjYXIsIGxldCBoZXIgZmVlbCB0aGUgc3VuIChXb3cpXG5NeSBicm8gZ28gc2VlIGhpcyBib3AtYm9wIGZpdmUgdGltZXMgYSBtb250aCAoWWVhaClcbkdvdCB0aGlzIGJpdGNoIG91dCB0aGUgY29sbGVnZSwgc2hlIHN1Y2tpbicgYW5kIHN3YWxsb3cgKFVoKVxuSSBzdGljayBpdCBpbiwgc2hlIGZlZWwgaXQgaW4gaGVyIGd1dCAoaW4gaGVyIGd1dClcbldlIGRvbid0IHJ1biBmcm9tIG91ciBwcm9ibGVtcywgd2Ugc3RhY2tpbicgdXAgZ3VhbGEgYW5kIGd1YWxhIEknbSB0cnluYSBnZXQgdGhhdCBtZWdhIGJ1Y2tzIChSYWNrcylcbldlIHRoZW0gZHJpcHBlcnMsIGxpbCcgbmlnZ2EsIGJlc3Qgd2F0Y2ggeW91ciBzdGVwIChUaGVtIGRyaXBwZXJzKVxuVGhpcyB0b3Agc2hlbGYsIGdvdCBmb3J0eSBkZXNpZ25lciBiZWx0cyAoRHJpcClcbjRQRiBsb29rIGxpa2UgdGhlIG5ldyBCTUZcblRoaW5rIEknbSBkZWFmLCBnb3Qgc3RvbmVzIGluIG15IHJpZ2h0IGFuZCBsZWZ0IChJY2UpXG5Ib3cgeW91IGNyYW5rIHVwIHRoZSBjYXI/IEFpbid0IG5vIGtleSBpbiB0aGVyZVxuSnVzdCBwdWxsIHVwLCBzcGluIHRoZXkgYmxvY2ssIGFuZCBnZXQgb3V0IG9mIHRoZXJlIChHZXQgb3V0IG9mIHRoZXJlKVxuV2FrZSB1cCwgaGF2ZSBhIGhhcmQgdGltZSBmaW5kaW4nIHdoYXQgdG8gd2VhclxuVHJlYXQgdGhlc2UgaG9lcyBsaWtlIGEgdGlyZSwgSSBrZWVwIGEgc3BhcmVcbldhbnQgYSBzdHJhcCBiZWNhdXNlIEknbSB3YXIgcmVhZHkgKFdhcilcbkNoZWNrIHRoZSB0cnVzdCBhY2NvdW50LCBpdCdzIG1vcmUgZmV0dGkgKFllYWgpXG5Ta3lkd2VsbGVyLCBKdWJpbGVlLCBhbmQgYSBQcmVzaScgKE5vIGNhcClcbkh1bmRyZWQtZmlmdHkgcGxhaW4gUmljaGFyZCBNaWxsaWUgKE5vIGNhcClcbkknbWEgbWlsayB0aGUgZ2FtZSB1bnRpbCBpdCdzIGVtcHR5XG5MaWwgY3V6em8gc3BpdCB0aGF0IGZsYW1lIHVudGlsIGl0J3MgZW1wdHkgKFllYWgpXG5JIGFtIG5vdCBhIGtpbGxlciwgYnV0IGRvbid0IHRlbXB0IG1lIChOYWgpXG5TcGVuZGluJyByYXRlICdib3V0IHRob3VzYW5kIHRvIGEgZmlmdHlcblxuW0Nob3J1czogTGlsIEJhYnldXG5Ib3QsIGhvdCwgaG90LCBJJ20gaGVhdGluJyB1cFxuSSBmdWNrIHdpdGggc2xpbWVzIGFuZCBJJ20gZ29ubmEgYnVzdCAoQmFoLCBiYWgpXG5IZSBjYW4ndCBwdXQgb24gdGhhdCBkcmlwLCBoZSBhaW4ndCBvbmUgb2YgdXNcbkhvdyB5b3UgcmlkaW4nIGluIGEgQmVueiBhbmQgYSBUb25rYSB0cnVjaz9cbkhvdyB5b3UgZ290IGV2ZXJ5Ym9keSBsaXQsIHBpcGluJyB1cD9cbk9oLCBzaGUgYmFkIHdpdGggbm8gc3dhZywgSSBjYW4gcGlwZSBoZXIgdXBcbk1hZGUgbXkgbGFzdCBvbmUgbXkgbGFzdCBvbmUsIEknbSB3aWZpbicgaGVyXG5Db3VudCB0aGUgbW9uZXkgdXAgZmFzdCBsaWtlIEknbSB0eXBpbicgc29tZXRoaW4nXG5JJ20gdGhlIHR5cGUgdG8gZ2V0IGFjdGl2ZSBhbmQgbmV2ZXIgcnVuXG5cbiNMaWxCYWJ5ICNIZWF0aW5VcCAjTXlUdXJuICNHdW5uYVxuXG5NdXNpYyB2aWRlbyBieSBMaWwgQmFieSwgR3VubmEgcGVyZm9ybWluZyBIZWF0aW4gVXAuIMKpIDIwMjAgUXVhbGl0eSBDb250cm9sIE11c2ljLCBMTEMsIHVuZGVyIGV4Y2x1c2l2ZSBsaWNlbnNlIHRvIFVNRyBSZWNvcmRpbmdzLCBJbmMuIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRHBzay1FdnI4R00vZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9EcHNrLUV2cjhHTS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9EcHNrLUV2cjhHTS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRHBzay1FdnI4R00vc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9EcHNrLUV2cjhHTS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogODgsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIkRwc2stRXZyOEdNIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIkRwc2stRXZyOEdNIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTAyLTI4VDIwOjAwOjAzWiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJOYVh5TjhVSHR5VW1WQUpLQXNubkcwd0dZNlEiLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzR5UkRnM016ZzJPVGhCTWpZd05rVXkiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTo1Mzo0MloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiU3VtbWVyIFdhbGtlciAtIENvbWUgVGhydSAod2l0aCBVc2hlcikgW09mZmljaWFsIE11c2ljIFZpZGVvXSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlN1bW1lciBXYWxrZXIgLSBDb21lIFRocnUgKHdpdGggVXNoZXIpXG5cIk92ZXIgSXRcIiBvdXQgbm93OiBodHRwczovL3NtYXJ0dXJsLml0L092ZXJJdFNXXG5cbkRpcmVjdGVkIGJ5IExhY2V5IER1a2VcblxuTGlzdGVuOiBodHRwczovL3NtYXJ0dXJsLml0L092ZXJJdFNXXG5BcHBsZTogaHR0cHM6Ly9zbWFydHVybC5pdC9PdmVySXRTVy9hcHBsZW11c2ljXG5TcG90aWZ5OiBodHRwczovL3NtYXJ0dXJsLml0L092ZXJJdFNXL3Nwb3RpZnlcbmlUdW5lczogaHR0cHM6Ly9zbWFydHVybC5pdC9PdmVySXRTVy9pdHVuZXNcblxuU3Vic2NyaWJlIHRvIFN1bW1lciBXYWxrZXIgLSBodHRwOi8vc21hcnR1cmwuaXQvU1dTdWJzY3JpYmUgXG5cbkZvbGxvdyBTdW1tZXIgV2Fsa2VyOlxuaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL1N1bW1lcldhbGtlclxuaHR0cDovL3d3dy5mYWNlYm9vay5jb20vU3VtbWVyV2Fsa2VyT2ZmaWNpYWxcbmh0dHA6Ly93d3cudHdpdHRlci5jb20vaWFtU1VNTUVSV0FMS0VSXG5cbiNTdW1tZXJXYWxrZXIgI0NvbWVUaHJ1ICNVc2hlciIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0JPYUpsb0VQVUNnL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQk9hSmxvRVBVQ2cvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQk9hSmxvRVBVQ2cvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0JPYUpsb0VQVUNnL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQk9hSmxvRVBVQ2cvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDg5LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJCT2FKbG9FUFVDZyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJCT2FKbG9FUFVDZyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAyMC0wMS0wN1QxNjowMDoxMVoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiOUwyX0NGd3hreDdFSUpJUjFtZmpibEpidDhBIiwKICAgICAgImlkIjogIlVFeEVTVzlWVDJoUlVWQnNXSEkyTTBsZmRuZEdPVWRFT0hOQlMyZzNOMlJYVlM0eU1FRTVOekV3TnpRM09UYzRPVE5EIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDEtMTRUMjE6MzM6NTlaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDWDlvUHV2Sllac0c4d25IVHdPQlZQQSIsCiAgICAgICAgInRpdGxlIjogIkppbW1pZSBBbGxlbiAtIE1ha2UgTWUgV2FudCBUbyAoT2ZmaWNpYWwgTXVzaWMgVmlkZW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiXCJNQUtFIE1FIFdBTlQgVE9cIiB0aGUgc2Vjb25kIHNpbmdsZSBmcm9tIG15IGRlYnV0IGFsYnVtIE1FUkNVUlkgTEFORSBpcyBvdXQgbm93ISEhIGh0dHBzOi8vamltbWllYWxsZW4ubG5rLnRvL21lcmN1cnlsYW5lXG5cbkRpcmVjdG9yIC0gSnVzdGluIEtleVxuQXNzaXN0YW50IERpcmVjdG9yIC0gSmltbWllIEFsbGVuXG5XYXJkcm9iZSAtIENoZXJpZSBLaWxjaHJpc3RcbkdsYW0gLSBTaGFybGEgUHJ1aXR0IEhpZ2dpbnNcbkNvLVN0YXIgLSBTeWRuZXkgQ2hpeW9rb1xuXG5TdWJzY3JpYmUgdG8gSmltbWllJ3MgQ2hhbm5lbDogIGh0dHBzOi8vamltbWllYWxsZW4ubG5rLnRvL3l0Y2hubHN1YnNjcmliZVxuXG5Db25uZWN0IHdpdGggSmltbWllOlxuaHR0cHM6Ly93d3cuamltbWllYWxsZW5tdXNpYy5jb20vXG5odHRwczovL3d3dy5mYWNlYm9vay5jb20vamltbWllYWxsZW5tdXNpY1xuaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9qaW1taWVhbGxlbi9cbmh0dHBzOi8vdHdpdHRlci5jb20vamltbWllYWxsZW4vXG5cblxuI01ha2VNZVdhbnRUbyAjTWVyY3VyeUxhbmUgI0ppbW1pZUFsbGVuIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvT1ZkZW1MYW13SHMvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9PVmRlbUxhbXdIcy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9PVmRlbUxhbXdIcy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvT1ZkZW1MYW13SHMvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9PVmRlbUxhbXdIcy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogOTAsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIk9WZGVtTGFtd0hzIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIk9WZGVtTGFtd0hzIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDE5LTA1LTIzVDE1OjAzOjU3WiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJ0VUlpbGNRWnlDMUVKM3ZSQ3VPRVZhSDBHUzAiLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzVGTjBKR056ZzNNemhGTjBJeVFqa3kiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wMS0xNFQyMToyNzoxN1oiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiU2FtIEh1bnQgLSBLaW5mb2xrcyAoT2ZmaWNpYWwgQXVkaW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiUHVyY2hhc2UgU2FtIEh1bnTigJlzIGxhdGVzdCBtdXNpYzogaHR0cDovL3VtZ24udXMvc2FtaHVudHB1cmNoYXNlXG5TdHJlYW0gdGhlIGxhdGVzdCBmcm9tIFNhbSBIdW50OiBodHRwOi8vdW1nbi51cy9zYW1odW50c3RyZWFtXG5TaWduIHVwIHRvIHJlY2VpdmUgZW1haWwgdXBkYXRlcyBmcm9tIFNhbSBIdW50OiBodHRwOi8vdW1nbi51cy9zYW1odW50dXBkYXRlc1xuXG5CZXN0IG9mIFNhbSBIdW50OiBodHRwczovL2dvby5nbC9wdkthRzRcblN1YnNjcmliZSBoZXJlOiBodHRwczovL2dvby5nbC9wSHdSTXJcblxuV2Vic2l0ZTogaHR0cDovL3d3dy5zYW1odW50LmNvbS9cbkZhY2Vib29rOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vU2FtSHVudE11c2ljXG5JbnN0YWdyYW06IGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vc2FtaHVudG11c2ljXG5Ud2l0dGVyOiBodHRwczovL3R3aXR0ZXIuY29tL3NhbWh1bnRtdXNpY1xuXG4jU2FtSHVudCAjQ291bnRyeU11c2ljICNLaW5mb2xrc1xuXG5NdXNpYyB2aWRlbyBieSBTYW0gSHVudCBwZXJmb3JtaW5nIEtpbmZvbGtzIChBdWRpbykuIMKpIDIwMTkgVU1HIFJlY29yZGluZ3MsIEluYy5cblxuaHR0cDovL3Zldm8ubHkvMGs3OUlDIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvV2s3SVR3MkJsOHMvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9XazdJVHcyQmw4cy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9XazdJVHcyQmw4cy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvV2s3SVR3MkJsOHMvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9XazdJVHcyQmw4cy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogOTEsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIldrN0lUdzJCbDhzIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIldrN0lUdzJCbDhzIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDE5LTEwLTEwVDIxOjAwOjEyWiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJndkxySmI3bEloZ1JsMk84SHJTUk9sSXhVTHciLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzVETWpaRU5EUXlRekJCUXpGRk5rTXkiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wMS0xNFQyMToyOTo1MloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiS2FuZSBCcm93biAtIEhvbWVzaWNrIChPZmZpY2lhbCBWaWRlbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGFuayB5b3UgdG8gdGhlIENhbGlmb3JuaWEgQXJteSBOYXRpb25hbCBHdWFyZCwgdGhvc2Ugd2hvIHN1Ym1pdHRlZCB0aGVpciBwZXJzb25hbCB2aWRlb3MsIGFuZCBhbGwgb2Ygb3VyIGJyYXZlIG1lbiBhbmQgd29tZW4gaW4gdGhlIGFybWVkIGZvcmNlcy5cblxuR2V0IOKAnEhvbWVzaWNr4oCdIG9uIEthbmUgQnJvd27igJlzIG5ldyBhbGJ1bSwgRXhwZXJpbWVudCwgYXZhaWxhYmxlIG5vdyFcblxuQXBwbGUgTXVzaWM6IGh0dHA6Ly9zbWFydHVybC5pdC9rYmV4cGVyaW1lbnQvYXBwbGVtdXNpYz9JUWlkPXl0IFxuaVR1bmVzOiBodHRwOi8vc21hcnR1cmwuaXQva2JleHBlcmltZW50L2l0dW5lcz9JUWlkPXl0XG5TcG90aWZ5OiBodHRwOi8vc21hcnR1cmwuaXQva2JleHBlcmltZW50L3Nwb3RpZnk/SVFpZD15dFxuQW1hem9uIE11c2ljOiBodHRwOi8vc21hcnR1cmwuaXQva2JleHBlcmltZW50L2F6P0lRaWQ9eXRcbllvdVR1YmUgTXVzaWM6IGh0dHA6Ly9zbWFydHVybC5pdC9rYmV4cGVyaW1lbnQveW91dHViZW11c2ljP0lRaWQ9eXRcblBhbmRvcmE6IGh0dHA6Ly9zbWFydHVybC5pdC9rYmV4cGVyaW1lbnQvcGFuZG9yYT9JUWlkPXl0XG5cbkZvbGxvdyBLYW5lIEJyb3duOiBPZmZpY2lhbCBXZWJzaXRlOiBodHRwOi8va2FuZWJyb3dubXVzaWMuY29tIFxuRmFjZWJvb2s6IGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9rYW5lYWxsZW5icm93biBcbkluc3RhZ3JhbTogaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9rYW5lYnJvd25fbXVzaWNcblR3aXR0ZXI6IGh0dHBzOi8vdHdpdHRlci5jb20va2FuZWJyb3duIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdWtIaWtIXzEwQ0EvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS91a0hpa0hfMTBDQS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS91a0hpa0hfMTBDQS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdWtIaWtIXzEwQ0Evc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS91a0hpa0hfMTBDQS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogOTIsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogInVrSGlrSF8xMENBIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogInVrSGlrSF8xMENBIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDE4LTA5LTIwVDE4OjI0OjQ5WiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJhalU2eHFjMFNjWkM3bVg5UGNoYzhhTy1hdHciLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzVHTUVZd05rRkNNemN5TWpSQk4wSkciLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wMS0xNFQyMToyMDo1MVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiT2xkIERvbWluaW9uIC0gT25lIE1hbiBCYW5kIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiTGlzdGVuIHRvIOKAnE9uZSBNYW4gQmFuZOKAnSBieSBPbGQgRG9taW5pb24gZnJvbSB0aGVpciBzZWxmLXRpdGxlZCBhbGJ1bSwgb3V0IG5vdzogaHR0cDovL3NtYXJ0dXJsLml0L09EMz9JUWlkPXlvdXR1YmVcbiBcbkFwcGxlIE11c2ljOiBodHRwOi8vc21hcnR1cmwuaXQvT0QzL2FwcGxlbXVzaWM/SVFpZD15b3V0dWJlXG5TcG90aWZ5OiBodHRwOi8vc21hcnR1cmwuaXQvT0QzL3Nwb3RpZnk/SVFpZD15b3V0dWJlXG5BbWF6b24gTXVzaWM6IGh0dHA6Ly9zbWFydHVybC5pdC9PRDMvYXo/SVFpZD15b3V0dWJlXG5pVHVuZXM6IGh0dHA6Ly9zbWFydHVybC5pdC9PRDMvaXR1bmVzP0lRaWQ9eW91dHViZVxuWW91VHViZSBNdXNpYzogaHR0cDovL3NtYXJ0dXJsLml0L09EMy95b3V0dWJlbXVzaWM/SVFpZD15b3V0dWJlXG5QYW5kb3JhOiBodHRwOi8vc21hcnR1cmwuaXQvT0QzL3BhbmRvcmE/SVFpZD15b3V0dWJlICBcbkFsbCBSZXRhaWxlcnM6IGh0dHA6Ly9zbWFydHVybC5pdC9PRDM/SVFpZD15b3V0dWJlXG4gIFxuQ29ubmVjdCB3aXRoIE9sZCBEb21pbmlvbjogXG5JbnN0YWdyYW06IGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vb2xkZG9taW5pb25tdXNpYy9cbkZhY2Vib29rOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vb2xkZG9taW5pb25iYW5kL1xuVHdpdHRlcjogaHR0cHM6Ly90d2l0dGVyLmNvbS9vbGRkb21pbmlvblxuU3Vic2NyaWJlIHRvIHRoZWlyIGNoYW5uZWw6IGh0dHA6Ly9zbWFydHVybC5pdC9PRFlUc3ViP0lRaWQ9eW91dHViZVxuU2lnbiB1cCBmb3IgdGhlaXIgTmV3c2xldHRlcjogaHR0cHM6Ly9zbWFydHVybC5pdC9PRE5ld3NsZXR0ZXI/SVFpZD15b3V0dWJlIFxuV2Vic2l0ZTogaHR0cHM6Ly93ZWFyZW9sZGRvbWluaW9uLmNvbVxuIFxuI09sZERvbWluaW9uICNPbmVNYW5CYW5kICNDb3VudHJ5TXVzaWMgI1dlQXJlT2xkRG9taW5pb24iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8wbHhBMUZYT2l2MC9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzBseEExRlhPaXYwL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzBseEExRlhPaXYwL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8wbHhBMUZYT2l2MC9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzBseEExRlhPaXYwL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA5MywKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiMGx4QTFGWE9pdjAiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiMGx4QTFGWE9pdjAiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTktMDEtMThUMDg6MDA6MDBaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIjJ2WERYMU1WRmpwMHlIa25OcmhrSDU3c0lRWSIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNURSRU5CT0RnNE16VkRRekUxUlRFeCIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTAxLTE0VDIxOjIyOjA2WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJKb25hcyBCcm90aGVycyAtIFN1Y2tlciAoT2ZmaWNpYWwgVmlkZW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU3Vja2VyIChPZmZpY2lhbCBWaWRlbylcblxuR2V0IFwiU3Vja2VyXCIgTm93OiBodHRwczovL0pvbmFzQnJvdGhlcnMubG5rLnRvL3N1Y2tlcllEXG5cbkNvbm5lY3Qgd2l0aCBKb25hcyBCcm90aGVyczpcbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vam9uYXNicm90aGVyc1xuaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0pvbmFzQnJvdGhlcnNcbmh0dHBzOi8vdHdpdHRlci5jb20vam9uYXNicm90aGVyc1xuXG5WaWRlbyBEaXJlY3RvcjogQW50aG9ueSBNYW5kbGVyXG5WaWRlbyBQcm9kdWNlcjogUmljaGFyZCBGZW50b25cblZpZGVvIEVkaXRvcjogVGF5bG9yIFdhcmRcbmZvciBCbGFja2hhbmQgQ2luZW1hXG5cbk11c2ljIHZpZGVvIGJ5IEpvbmFzIEJyb3RoZXJzIHBlcmZvcm1pbmcgU3Vja2VyLiDCqSAyMDE5IEpvbmFzIEJyb3RoZXJzIFJlY29yZGluZywgTGltaXRlZCBMaWFiaWxpdHkgQ29tcGFueSwgdW5kZXIgZXhjbHVzaXZlIGxpY2Vuc2UgdG8gUmVwdWJsaWMgUmVjb3JkcywgYSBkaXZpc2lvbiBvZiBVTUcgUmVjb3JkaW5ncywgSW5jLlxuXG5odHRwOi8vdmV2by5seS9tUjNYM24iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9DbkFtZWgwLUUtVS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0NuQW1laDAtRS1VL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0NuQW1laDAtRS1VL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9DbkFtZWgwLUUtVS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0NuQW1laDAtRS1VL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA5NCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiQ25BbWVoMC1FLVUiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiQ25BbWVoMC1FLVUiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTktMDMtMDFUMDQ6NTg6MTRaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIk1oazBUQTYyV1FVOWN6VUJfN2xIQ2pFUFZvUSIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNHdORFJGUkRoRVFVSkdOVGcwUmpJMiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTEwLTE1VDAwOjMxOjU0WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJEYW4gKyBTaGF5LCBKdXN0aW4gQmllYmVyIC0gMTAsMDAwIEhvdXJzIChPZmZpY2lhbCBNdXNpYyBWaWRlbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJMSVNURU4gRVZFUllXSEVSRTpcbmh0dHA6Ly93bW5hLnNoLzEwa0hvdXJzIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWTJFNzFvZTBhU00vZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ZMkU3MW9lMGFTTS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ZMkU3MW9lMGFTTS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWTJFNzFvZTBhU00vc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ZMkU3MW9lMGFTTS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogOTUsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIlkyRTcxb2UwYVNNIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIlkyRTcxb2UwYVNNIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDE5LTEwLTA0VDE3OjAwOjExWiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJYbkxaRTltSWR3SjVoVVNGQjQ4Ri1nQW4wTnMiLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzR5UmpGRVF6ZzBPVGxCTWtFeU1FTkUiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wMi0xMlQyMzowNToyOVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiQXJpem9uYSBaZXJ2YXMgLSBST1hBTk5FIChPZmZpY2lhbCBWaWRlbykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJMaXN0ZW4gdG8g4oCcUk9YQU5OReKAnSBub3c6IGh0dHBzOi8vQXJpem9uYVplcnZhcy5sbmsudG8vUk9YQU5ORVxuXG5TZWUgbXkgZmlyc3QgTEEgc2hvdyBldmVyIG9uIGZlYiAyNHRoIGF0IFRoZSBFY2hvOiBodHRwczovL0FyaXpvbmFaZXJ2YXMubG5rLnRvL0VjaG9BWVxuXG5Gb2xsb3cgTWU6XG5UV0lUVEVSOiBodHRwczovL1R3aXR0ZXIuY29tL0FyaXpvbmFaZXJ2YXNcbklOU1RBR1JBTTogaHR0cHM6Ly9JbnN0YWdyYW0uY29tL0FyaXpvbmFaZXJ2YXNcblNQT1RJRlk6IGh0dHBzOi8vQXJpem9uYVplcnZhcy5sbmsudG8vc3BvdGlmeVxuSVRVTkVTOiBodHRwczovL0FyaXpvbmFaZXJ2YXMubG5rLnRvL2l0dW5lc1xuU09VTkRDTE9VRDogaHR0cHM6Ly9Tb3VuZGNsb3VkLmNvbS9Bcml6b25hWmVydmFzXG5USUsgVE9LOiBodHRwczovL3d3dy50aWt0b2suY29tL0Bhcml6b25hLnplcnZhc1xuV0VCU0lURTogaHR0cDovL0FyaXpvbmFaZXJ2YXMuQ29tXG5TTkFQQ0hBVDogQXJpem9uYVplcnZhc1xuXG5Qcm9kIENvIC0gRlJFRU5KT1lcbkRpcmVjdG9yIC0gTmljaG9sYXMgSmFuZG9yYVxuU3RvcnkgQnkg4oCTIEFyaXpvbmEgWmVydmFzICYgTmljaG9sYXMgSmFuZG9yYVxuRXhlY3V0aXZlIFByb2R1Y2VyIC0gTmF0aGFuIFNjaGVycmVyXG5Qcm9kdWNlciAtIEplZmYgS29wY2hpYVxuUHJvZHVjZXIvQ29tbWlzc2lvbmVyIOKAkyBTYXVsIExldml0elxuIFxuRFAgLSBCZW4gQ2FyZXlcblByb2R1Y3Rpb24gRGVzaWduZXIgLSBTcGVuY2VyIEdyYXZlc1xuRWRpdG9yIC0gTmljaG9sYXMgSmFuZG9yYVxuQ29sb3IgLSBTYW0gR3Vyc2t5XG5WRlggLSBKUiBTdHJpY2tsYW5kIEAgTm9jdHVybmFsIEZYXG5BWiBTdHlsaXN0IC0gQ2FyaWUgV2VuZGVsXG5cbkxZUklDUzpcblJveGFubmUgXG5Sb3hhbm5lXG5BbGwgc2hlIHdhbm5hIGRvIGlzIHBhcnR5IGFsbCBuaWdodFxuR29kIGRhbW5cblJveGFubmVcbk5ldmVyIGd1bm5hIGxvdmUgbWUgYnV0IGl04oCZcyBhbHJpZ2h0XG5TaGUgdGhpbmsgaeKAmW1hIGFzc2hvbGVcblNoZSB0aGluayBp4oCZbSBhIHBsYXlhXG5TaGUga2VlcCBydW5uaW5nIGJhY2sgdGhvXG5Pbmx5IGNhdXNlIGkgcGF5IHVwXG5Sb3hhbm5lIFxuUm94YW5uZSBcbkFsbCBzaGUgd2FubmEgZG8gaXMgcGFydHkgYWxsIG5pZ2h0XG5cbk1ldCBoZXIgYXQgYSBwYXJ0eSBpbiB0aGUgaGlsbHMgeWFcblNoZSBqdXN0IHdhbm5hIGRvIGl0IGZvciB0aGUgdGhyaWxsIHlhXG5TaG9ydHkgZHJpdmUgYSBwb29kbGUgd2l0aCBubyB0b3AgYXllXG5CdXQgaWYgaSB0aHJvdyB0aGlzIG1vbmV5IHNoZSBnb25lIGRyb3BcblxuU2hlIGRvbuKAmXQgd2FpdCBpbiBsaW5lcyBpZiBpdOKAmXMgdG9vIGxvbmdcblNoZSBkb27igJl0IGRyaXZlIHRoZSB3aGlwIHVubGVzcyB0aGUgcm9vZiBvZmZcbk9ubHkgd2FubmEgY2FsbCB3aGVuIHRoZSBjYXNoIG91dFxuT25seSB0YWtlIHRoZSBwaWMgd2hlbiBoZXIgYXNzIG91dFxuXG5TaGUgZnJvbSBcbk1hbGlidSBcbk1hbGlidVxuSWYgeW91IGRvbuKAmXQgZ290dGEgZm9yZWlnbiB0aGVuIHNoZSBsYXVnaCBhdCB5b3UgXG5NYWxpYnUgXG5NYWxpYnVcblNwZW5kaW5nIGRhZGR54oCZcyBtb25leSB3aXRoIGEgYXR0aXR1ZGVcblxuUm94YW5uZSBcblJveGFubmVcbkFsbCBzaGUgd2FubmEgZG8gaXMgcGFydHkgYWxsIG5pZ2h0XG5Hb2QgZGFtblxuUm94YW5uZVxuTmV2ZXIgZ3VubmEgbG92ZSBtZSBidXQgaXTigJlzIGFscmlnaHRcblNoZSB0aGluayBp4oCZbWEgYXNzaG9sZVxuU2hlIHRoaW5rIGnigJltIGEgcGxheWFcblNoZSBrZWVwIHJ1bm5pbmcgYmFjayB0aG9cbk9ubHkgY2F1c2UgaSBwYXkgdXBcblJveGFubmUgXG5Sb3hhbm5lIFxuQWxsIHNoZSB3YW5uYSBkbyBpcyBwYXJ0eSBhbGwgbmlnaHRcblxuKEkganVzdCB3YW5uYSBoYXZlIGZ1biEpXG5cbkluIExBIHlhIFxuR290IG5vIGJyZWFrcyB5YVxuTGl2aW5nIGZhc3QgXG5SaWNreSBib2JieSBcblNoYWtlIGFuZCBiYWtlIHlhXG5TZWUgdGhlIGNoYWluIHlhXG5Jc3NhIGxha2UgeWEgXG5Td2lwZSB0aGUgY2hhc2Ugb29cbk5vdyBzaGUgd2FubmEgZGF0ZSB5YVxuXG5TdHJhaWdodCB0byBub2J1IFxuT24gdGhlIGNvYXN0IG9vXG5TaG9ydHkgb25seSBsaWtlIGNvY2FpbmUgYW5kIHdob2xlIGZvb2RzIFxuU25hcHBpbiBhbGwgdXAgb24gdGhlIGdyYW0gYXNzIGdvaW4gY3JhenkgXG5Ob3cgc2hlIHdhbm5hIGZ1Y2sgbWUgaW4gdGhlIGZvcmVpZ24gZ29pbmcgODBcblxuU2hlIGZyb20gXG5NYWxpYnUgXG5NYWxpYnVcbklmIHlvdSBkb27igJl0IGdvdHRhIGZvcmVpZ24gdGhlbiBzaGUgbGF1Z2ggYXQgeW91IFxuTWFsaWJ1IFxuTWFsaWJ1XG5TcGVuZGluZyBkYWRkeeKAmXMgbW9uZXkgd2l0aCBhIGF0dGl0dWRlXG5cblJveGFubmUgXG5Sb3hhbm5lXG5BbGwgc2hlIHdhbm5hIGRvIGlzIHBhcnR5IGFsbCBuaWdodFxuR29kIGRhbW5cblJveGFubmVcbk5ldmVyIGd1bm5hIGxvdmUgbWUgYnV0IGl04oCZcyBhbHJpZ2h0XG5TaGUgdGhpbmsgaeKAmW1hIGFzc2hvbGVcblNoZSB0aGluayBp4oCZbSBhIHBsYXlhXG5TaGUga2VlcCBydW5uaW5nIGJhY2sgdGhvXG5Pbmx5IGNhdXNlIGkgcGF5IHVwXG5Sb3hhbm5lIFxuUm94YW5uZSBcbkFsbCBzaGUgd2FubmEgZG8gaXMgcGFydHkgYWxsIG5pZ2h0XG5cbiNBcml6b25hWmVydmFzICNSb3hhbm5lIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMTZZbk9VbmJFNnMvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xNlluT1VuYkU2cy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xNlluT1VuYkU2cy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMTZZbk9VbmJFNnMvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xNlluT1VuYkU2cy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogOTYsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIjE2WW5PVW5iRTZzIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIjE2WW5PVW5iRTZzIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTAyLTEyVDE3OjAwOjExWiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJ1T0o1YVVaVWJucWVITkQxQ3NfellWakhPTEEiLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzQwUWtJM1FVTTNRVGRHT0RjeE5VRTIiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTo1Mzo1N1oiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiRGFCYWJ5IC0gRmluZCBNeSBXYXkgKEF1ZGlvKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkRhYmFieSAtIEZpbmQgTXkgV2F5XG5MaXN0ZW46IGh0dHBzOi8vc21hcnR1cmwuaXQvRGFCYWJ5RmluZE15V2F5XG5TcG90aWZ5OiBodHRwczovL3NtYXJ0dXJsLml0L0RhQmFieUZpbmRNeVdheS9TcG90aWZ5XG5BcHBsZSBNdXNpYzogaHR0cHM6Ly9zbWFydHVybC5pdC9EYUJhYnlGaW5kTXlXYXkvQXBwbGVNdXNpY1xuXG5XYXRjaCB0aGUgXCJGaW5kIE15IFdheVwiIE11c2ljIFZpZGVvIGhlcmU6IGh0dHBzOi8vc21hcnR1cmwuaXQvRGFCYWJ5RmluZE15V2F5L3lvdXR1YmVcblxuQ29ubmVjdDpcbmh0dHBzOi8vaW5zdGFncmFtLmNvbS9kYWJhYnlcbmh0dHBzOi8vdHdpdHRlci5jb20vZGFiYWJ5ZGFiYWJ5XG5odHRwczovL3d3dy5mYWNlYm9vay5jb20vYmFieWplc3VzNzA0L1xuXG4jRGFiYWJ5ICNGaW5kTXlXYXlcblxuTXVzaWMgdmlkZW8gYnkgRGFCYWJ5IHBlcmZvcm1pbmcgRmluZCBNeSBXYXkgKEF1ZGlvKS4gwqkgMjAyMCBJbnRlcnNjb3BlIFJlY29yZHNcblxuaHR0cDovL3Zldm8ubHkvRmxYTFV3IiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcEVCRVMxZXpUWlkvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9wRUJFUzFlelRaWS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9wRUJFUzFlelRaWS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcEVCRVMxZXpUWlkvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9wRUJFUzFlelRaWS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ2hpbGxheCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVSIsCiAgICAgICAgInBvc2l0aW9uIjogOTcsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogInBFQkVTMWV6VFpZIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogInBFQkVTMWV6VFpZIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDIwLTA0LTA0VDAyOjMwOjA2WiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJlaXRpZ3RzMjVNdFpBVFB5Tl9BdVNINnduLW8iLAogICAgICAiaWQiOiAiVUV4RVNXOVZUMmhSVVZCc1dISTJNMGxmZG5kR09VZEVPSE5CUzJnM04yUlhWUzVCUmpFeVJVWTVNVGhFUkVOQlJUVTAiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNS0xMlQxOTo1NDoxM1oiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNYOW9QdXZKWVpzRzh3bkhUd09CVlBBIiwKICAgICAgICAidGl0bGUiOiAiRmxvcmlkYSBHZW9yZ2lhIExpbmUgLSBJIExvdmUgTXkgQ291bnRyeSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIk11c2ljIHZpZGVvIGJ5IEZsb3JpZGEgR2VvcmdpYSBMaW5lIHBlcmZvcm1pbmcgSSBMb3ZlIE15IENvdW50cnkuIMKpIDIwMjAgQmlnIE1hY2hpbmUgTGFiZWwgR3JvdXAsIExMQ1xuXG5odHRwOi8vdmV2by5seS9yUWliVmEiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9zRjBEVjBNc1lyUS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3NGMERWME1zWXJRL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3NGMERWME1zWXJRL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9zRjBEVjBNc1lyUS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3NGMERWME1zWXJRL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDaGlsbGF4IiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTERJb1VPaFFRUGxYcjYzSV92d0Y5R0Q4c0FLaDc3ZFdVIiwKICAgICAgICAicG9zaXRpb24iOiA5OCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAic0YwRFYwTXNZclEiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAic0YwRFYwTXNZclEiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMjAtMDUtMDhUMjI6MDA6MDlaIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIkU0MlRqa2FfdVYyVEZpd0Q2aGJiV1JYbTVPTSIsCiAgICAgICJpZCI6ICJVRXhFU1c5VlQyaFJVVkJzV0hJMk0wbGZkbmRHT1VkRU9ITkJTMmczTjJSWFZTNUJSVVk0TWpneVJVVkdSak5HT1VVMiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA1LTEyVDE5OjU0OjMzWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1g5b1B1dkpZWnNHOHduSFR3T0JWUEEiLAogICAgICAgICJ0aXRsZSI6ICJZb3VuZyBUICYgQnVnc2V5IC0gRG9uJ3QgUnVzaCAoZnQuIEhlYWRpZSBPbmUpIFtNdXNpYyBWaWRlb10gfCBHUk0gRGFpbHkiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICLwn5qoIFNVQlNDUklCRTogaHR0cDovL2JpdC5seS9HUk1zdWJzY3JpYmUgIFxuXG5MaXN0ZW46IGh0dHBzOi8vc21hcnR1cmwuaXQvWVRCX0RvbnRSdXNoXG5cbkZvbGxvdzpcblxuaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS95b3VuZ3RhbmRidWdzZXkvXG5odHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3lvdW5ndG11c2ljL1xuaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9idWdzZXltdXNpYy9cbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaGVhZGllb25lL1xuXG5odHRwczovL3R3aXR0ZXIuY29tL1lvdW5nVGFuZEJ1Z3NleVxuaHR0cHM6Ly90d2l0dGVyLmNvbS9Zb3VuZ1RNdXNpY1xuaHR0cHM6Ly90d2l0dGVyLmNvbS9CdWdzZXlNdXNpY1xuaHR0cHM6Ly90d2l0dGVyLmNvbS9IZWFkaWVPbmVcblxuXG5ESVJFQ1RPUjogS0xWRFJcblNUWUxJU1Q6IEFMSVpFIERFTUFOR0VcblBST0RVQ0VSOiBFUklOIFNBWURFUlxuRVhFQy4gUFJPRFVDRVI6IFJJSyBHUkVFTlxuUFJPRCBDTzogUFVMU0UgRklMTVNcblxu8J+TsiBGT0xMT1c6IEBncm1kYWlseVxuXG7wn5OwIFZJU0lUOiBodHRwOi8vZ3JtZGFpbHkuY29tLyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL291Q3V5UUk5cFhjL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb3VDdXlRSTlwWGMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb3VDdXlRSTlwWGMvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL291Q3V5UUk5cFhjL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb3VDdXlRSTlwWGMvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoaWxsYXgiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMRElvVU9oUVFQbFhyNjNJX3Z3RjlHRDhzQUtoNzdkV1UiLAogICAgICAgICJwb3NpdGlvbiI6IDk5LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJvdUN1eVFJOXBYYyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJvdUN1eVFJOXBYYyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxOS0xMS0wN1QyMDowMDoxMloiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxMDAsCiAgICAicmVzdWx0c1BlclBhZ2UiOiA1MAogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 00:15:37 GMT
recorded_with: VCR 5.1.0
