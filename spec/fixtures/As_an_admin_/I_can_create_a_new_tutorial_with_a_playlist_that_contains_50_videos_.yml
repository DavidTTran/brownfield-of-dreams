---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=50&pageToken&part=contentDetails,%20snippet&playlistId=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 12 May 2020 00:38:42 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "5bU1XcCBPtNxe9lMWlCkbh7bP_Y",
  "nextPageToken": "CDIQAA",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "6L-tprEYeHPEuzezmvQb9R0JX_M",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zNkU5OUMzNzNFMEEwNEUx",
      "snippet": {
        "publishedAt": "2020-05-11T23:10:57Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Doja Cat - Say So ft. Nicki Minaj",
        "description": "Doja Cat - \"Say So\" ft. Nicki Minaj out now!: https://smarturl.it/xSaySoRemix\n\n'Hot Pink' out now! https://smarturl.it/xHotPink \n\nSubcribe to Doja Cat's Official YoutTube Channel: https://smarturl.it/DojaYTSubcribe \n\nFollow Doja Cat:\nhttps://www.instagram.com/dojacat/\nhttps://twitter.com/DojaCat\nhttps://www.facebook.com/DojaCat\nhttp://www.dojacat.com/\n\nFollow NickiMinaj\nhttps://www.instagram.com/nickiminaj\nhttps://twitter.com/nickiminaj\nhttps://facebook.com/nickiminaj\nhttps://www.mypinkfriday.com\n\n#DojaCat #NickiMinaj #SaySo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/marAFsQo3VE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/marAFsQo3VE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/marAFsQo3VE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/marAFsQo3VE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/marAFsQo3VE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "marAFsQo3VE"
        }
      },
      "contentDetails": {
        "videoId": "marAFsQo3VE",
        "videoPublishedAt": "2020-05-01T21:58:37Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "LDfq-xNjdB9FXlMZBt4ftP21Nxk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DMTY1Mzc1QjRBNTM5MURF",
      "snippet": {
        "publishedAt": "2020-05-11T23:11:07Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Megan Thee Stallion - Savage Remix (feat. Beyoncé) [Official Audio]",
        "description": "The official audio for Megan Thee Stallion's \"Savage Remix\" featuring Beyoncé - Out Now! With all artists’ proceeds benefitting Bread Of Life Houston's COVID-19 Relief efforts in their hometown.\nStream \"Savage Remix (feat. Beyoncé)\" on all platforms now:\nhttps://megantheestallion.ffm.to/savageremix \n\nStream 'SUGA': \nhttps://megantheestallion.ffm.to/suga\n\nFollow Megan Thee Stallion:\nhttps://www.instagram.com/theestallion\nhttps://twitter.com/theestallion\nhttps://www.facebook.com/theestallionn\n\nFollow Beyoncé:\nhttps://www.Beyonce.com\nhttps://www.instagram.com/Beyonce\nhttps://www.facebook.com/Beyonce\nhttps://twitter.com/Beyonce\n\nLYRICS:\nIntro (Beyoncé):\nQueen B, want no smoke with me (okay)\nBeen turnt this motherfucker up 800 degrees\nThe whole team eat, chef kiss cause she’s a treat (muah) Oh she’s so bougie bougie, bon appétit\n\nVerse 1 (Megan):\nI’m a savage\nAttitude nasty\nTalk big shit but my bank account match it\nHood but I’m classy, rich but I’m ratchet\nHaters kept my name in they mouth now they gaggin, ah Bougie, he said the way that thing move is a movie\nI told that boy we gotta keep it low, leave me the room key I done bled the block and now it’s hot , bitch I’m Tunchie\nA mood and I’m moody\n\nChorus (Megan and Beyoncé):\nI'm a savage (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty\nActing stupid, what's happening? Bitch\nWhat's happening? Bitch\nI'm a savage, (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty\nActing stupid, what's happening? Bitch (whoa, whoa) What's happening? Bitch (whoa, whoa)\n\nVerse 2 (Beyoncé):\nHips tick tock when I dance (dance)\nOn that demon time she might start a Only Fans \nBig B and that B stand for bands \nIf you wanna see some real ass baby here's your chance\nI said left cheek, right cheek, drop it low and then swang \nTexas up in this thang, put you up on this game\nIvy Park on my frame, gang, gang, gang, gang\nIf you don't jump to put jeans on, baby you don't feel my pain (hold up) Please don't get me hyped, write my name in ice \nCan't argue with these lazy bitches , I just raise my price\nI’m a BOSS, I'm a leader, I pull up in my 2 seater\nAnd my mama was a Savage \nNigga got the shit from Tina\n\nChorus (Megan and Beyoncé):\nI'm a savage (yeah)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch What's happening? Bitch (whoa, whoa) I'm a savage, yeah\nClassy, bougie, ratchet, (okay)\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch What's happening? (whoa, whoa)\n\nPost Chorus (Megan and Beyoncé):\nLike Beyoncé, like me (like me)\nHe want a bitch like the Stallion with the knees\nHe be like damn how that thang moving in them jeans Even D4L couldn’t do it like me\n\nBridge (Beyoncé):\nOoh..\nI done got this body ready just for you\nGirl I hope he don’t catch me messing around with you Talking to myself in the mirror like bitch you my boo\n\nPre (Megan):\nI’m the shit ou\nI need a mop to clean the floor, it’s too much drip ou I keep a knot, I keep a watch ou\nLets play a game ,Simon says I’m still that bitch aye I’m still that bitch\n\nChorus (Megan and Beyoncé):\nI'm a savage (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (nasty)\nActing stupid, what's happening? Bitch (whoa, whoa) What's happening? Bitch (whoa, whoa)\nI'm a savage (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (nasty)\nActing stupid, what's happening? Bitch\nWhat's happening?\n\nVerse 3 (Beyoncé):\nI heard they asking for the queen , they brought some cameras in here I’m a bad bitch, she’s a savage, no comparison here\nI’ma flip my hair and look back while I twerk in the mirror\nAll this money in the room, think some scammers in here\nI’m coming straight up out the third Whip the whip like I stirred it\nWood grain, we swerving\nKeeping his mind all on these curves Coupe fly like a bird\nCold on ‘em like burrrr\nAlways keep my word\nNo I don’t do cross word\nStallion when I ride he like them hot girls with them hips huh...\nI hopped that shit the way I hopped out and slid\nI pop my shit now watch me pop up again\nI mop the floor now watch me sweep up these Ms\n\nChorus (Megan and Beyoncé):\nI'm a savage (yeah)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch (okay), What's happening? Bitch (whoa, whoa)\nI'm a savage, yeah\nClassy, bougie, ratchet, yeah\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch (okay)\n\nOutro (Beyoncé):\nIt’s the Stallion and the Bee H-Town going down\n\n--\n#MeganTheeStallion #Savage #Beyonce #SUGA #OfficialAudio\n\n© 2020 1501 Certified Ent LLC under exclusive license to 300 Entertainment",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/lEIqjoO0-Bs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/lEIqjoO0-Bs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/lEIqjoO0-Bs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/lEIqjoO0-Bs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/lEIqjoO0-Bs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "lEIqjoO0-Bs"
        }
      },
      "contentDetails": {
        "videoId": "lEIqjoO0-Bs",
        "videoPublishedAt": "2020-04-29T19:06:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "N3YTYXFL_OGOlWBQi2gKFaDERlA",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xNENDREYwM0NFNzY5NjhG",
      "snippet": {
        "publishedAt": "2020-03-06T00:10:08Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "The Weeknd - Blinding Lights",
        "description": "Official music video for The Weeknd \"Blinding Lights\" - available everywhere now: http://theweeknd.co/blindinglightsYD\n\n►Subscribe to The Weeknd on YouTube: http://theweeknd.co/subscribeYD \n\n►Get exclusive merch: https://shop.theweeknd.com/\n\n►Follow The Weeknd:\nhttps://twitter.com/theweeknd\nhttps://www.facebook.com/theweeknd\nhttps://www.instagram.com/theweeknd\nhttps://www.theweeknd.com\nSubscribe to YouTube Music: http://theweeknd.co/blindinglightsYD/youtubemusic \n\nDirector: Anton Tammi\n\nProduction Company: Somesuch \nExecutive Producer: Saskia Whinney\nProducer: Sarah Park\n\nDirector of Photography: Oliver Millar\n2nd Unit DP: Devin “Daddy” Karringten\nSteadicam Op: Niels Lindelien\nGaffer: Nizar Najm\nKey Grip: Marlow Nunez\nProduction Designer: Adam William Wilson\n\n1st AD: Kenneth Taylor\n\nEditor: Janne Vartia & Tim Montana\nPost Production Supervisor: Alec Ernest\nVFX: Mathematic\nColorist: Nicke Jacobsson\nSound Designer: Akseli Soini\n3D: Oscar Böckerman\nTitle Design: Aleksi Tammi\n\n\n►\"Blinding Lights\" Lyrics:\n\nYeah\nI been tryna call\nI been on my own for long enough\nMaybe you can show me how to love, maybe\nI'm going through withdrawals\nYou don't even have to do too much\nYou can turn me on with just a touch, baby\nI look around and Sin City's cold and empty (oh)\nNo one's around to judge me (oh)\nI can't see clearly when you're gone\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\nI said, ooh, I'm drowning in the night\nOh, when I'm like this, you're the one I trust\nHey, hey, hey\nI'm running out of time\n'Cause I can see the sun light up the sky\nSo I hit the road in overdrive, baby\nOh, the city's cold and empty (oh)\nNo one's around to judge me (oh)\nI can't see clearly when you're gone\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\nI said, ooh, I'm drowning in the night\nOh, when I'm like this, you're the one I trust\nI'm just walking by to let you know (by to let you know)\nI can never say it on the phone (say it on the phone)\nWill never let you go this time (ooh)\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\nHey, hey, hey\nHey, hey, hey\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\n\n#TheWeeknd #BlindingLights\n\n\nMusic video by The Weeknd performing Blinding Lights. © 2020 The Weeknd XO, Inc., manufactured and marketed by Republic Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4NRXx6U8ABQ"
        }
      },
      "contentDetails": {
        "videoId": "4NRXx6U8ABQ",
        "videoPublishedAt": "2020-01-21T18:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Vl9JRYD4dL1IPY9Bt7MExlj11C4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BMTJGNjk0NkI3NDEyNkE1",
      "snippet": {
        "publishedAt": "2020-04-20T11:23:32Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Drake - Toosie Slide",
        "description": "Music video by Drake performing Toosie Slide. © 2020 OVO, under exclusive license to Republic Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xWggTb45brM"
        }
      },
      "contentDetails": {
        "videoId": "xWggTb45brM",
        "videoPublishedAt": "2020-04-03T04:15:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wYHkVbGWT_7vIXxQ9wEjiTCG6GI",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BNjIxOThCMjIwNkEyMDU1",
      "snippet": {
        "publishedAt": "2020-02-29T10:50:53Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Roddy Ricch - The Box [Official Music Video]",
        "description": "Roddy Ricch - The Box\r\nStream/Download - https://roddyricch.lnk.to/PleaseExcuseMeForBeingAntisocial\r\nGet official merch here: http://smarturl.it/RoddyRicchStore\nDon't wear no shoes in my house floor mat: http://ricchessentials.com\n\r\nFollow Roddy Ricch\r\nhttps://instagram.com/roddyricch\r\nhttps://twitter.com/roddyricch\r\nhttps://soundcloud.com/roddyricch\r\nhttps://facebook.com/RoddyRicch/\nhttp://roddyricch.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UNZqm3dxd2w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UNZqm3dxd2w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UNZqm3dxd2w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UNZqm3dxd2w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UNZqm3dxd2w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "UNZqm3dxd2w"
        }
      },
      "contentDetails": {
        "videoId": "UNZqm3dxd2w",
        "videoPublishedAt": "2020-02-28T23:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "xXTLD3UPj_8a_iGTuwuMUOTix94",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45ODM3QTU3OUI4ODJGM0ZE",
      "snippet": {
        "publishedAt": "2020-01-14T21:19:34Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Dua Lipa - Don't Start Now (Official Music Video)",
        "description": "Get the new album Future Nostalgia : https://dualipa.co/futurenostalgia\n\nStream Break My Heart : https://dualipa.co/breakmyheart\n\n\nFollow me online:\nInstagram:  https://dualipa.co/instagram\nFacebook: http://dualipa.co/facebook\nTwitter: http://dualipa.co/twitter\nYouTube: https://dualipa.co/youtube\nSpotify: http://dualipa.co/spotify\nApple Music: https://dualipa.co/apple-music\nDeezer URL: http://dualipa.co/deezer\nAmazon Music: https://dualipa.co/amazonmusic",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oygrmJFKYZY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oygrmJFKYZY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oygrmJFKYZY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oygrmJFKYZY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oygrmJFKYZY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oygrmJFKYZY"
        }
      },
      "contentDetails": {
        "videoId": "oygrmJFKYZY",
        "videoPublishedAt": "2019-11-01T13:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "INNFQuYGC6oGwvZYU_EhjrOokqw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5EODAxMDM2RDQxOUQwRkIy",
      "snippet": {
        "publishedAt": "2020-05-11T23:11:36Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Drake - Pain 1993 (Audio) ft. Playboi Carti",
        "description": "Dark Lane Demo Tapes - available everywhere now: https://Drake.lnk.to/DLDTVD\n\nConnect with Drake:\nhttps://www.instagram.com/champagnepapi\nhttps://www.facebook.com/Drake\nhttps://twitter.com/drake\nhttps://www.drakeofficial.com\n\n#Drake #DarkLaneDemo #Pain1993\n\nMusic video by Drake performing Pain 1993 (Audio). © 2020 OVO, under exclusive license to Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/5Zipln",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Q5jnuOCJvK0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Q5jnuOCJvK0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Q5jnuOCJvK0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Q5jnuOCJvK0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Q5jnuOCJvK0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Q5jnuOCJvK0"
        }
      },
      "contentDetails": {
        "videoId": "Q5jnuOCJvK0",
        "videoPublishedAt": "2020-05-01T04:48:24Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "g6EqXlhtOm2MS3TYpbUlYKuWfeA",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45NTFFM0RCNEI0ODA2MkEy",
      "snippet": {
        "publishedAt": "2019-09-12T23:24:44Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Post Malone - Circles",
        "description": "Official music video by Post Malone performing “Circles” – off his new album 'Hollywood's Bleeding’ available now: https://PostMalone.lnk.to/hollywoodsbleedingYD\n\n►Subscribe to Post Malone: https://PostMalone.lnk.to/SubscribeYD\n\n►Get tickets to the Runaway tour here: http://www.postmalone.com/\n\n►Exclusive Merch: https://shop.postmalone.com/\n\n►Follow Post Malone Online\nInstagram: https://www.instagram.com/postmalone/\nFacebook: https://www.facebook.com/postmalone\nTwitter: https://twitter.com/postmalone\nWebsite: http://www.postmalone.com/\n\nOfficial “Circles” Lyrics\n\nWe couldn’t turn around\nTil we were upside down\nI’ll be the bad guy now\nBut know I ain’t too proud\nI couldn’t be there\nEven when I tried\nYou don’t believe it\nWe do this every time\n\nSeasons change and our love went cold\nFeed the flame because we can’t let go\nRunaway but we’re running in circles\nRunaway, runaway\nI dare you to do something\nI’m waiting on you again\nSo I don’t take the blame\nRunaway but we’re running in circles\nRunaway, runaway, runaway\n\nLet go\nI got a feeling that it’s time to let go\nI said so\nI knew that this was doomed from the get go\nYou thought that it was special, special\nBut it was just the sex though, the sex though\nAnd I still hear the echoes, the echoes\nI got a feeling that it’s time to let it go\nLet it go\n\nSeasons change and our love went cold\nFeed the flame because we can’t let go\nRunaway but we’re running in circles\nRunaway, runaway\nI dare you to do something\nI’m waiting on you again\nSo I don’t take the blame\nRunaway but we’re running in circles\nRunaway, runaway, runaway\n\nMaybe you don’t understand what I’m going thru\nIt’s only me, what you got to lose\nMake up your mind, tell me what are you gonna do\nIt’s only me, let it go\n\nSeasons change and our love went cold\nFeed the flame because we can’t let go\nRunaway but we’re running in circles\nRunaway, runaway\nI dare you to do something\nI’m waiting on you again\nSo I don’t take the blame\nRunaway but we’re running in circles\nRunaway, runaway, runaway\n\nVideo Director: Colin Tiley\nVideo Producer: Jamee Ranta\nfor Boy In The Castle\n\n#PostMalone #Circles #HollywoodsBleeding\n\nMusic video by Post Malone performing Circles. © 2019 Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/jrYkRZ",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/wXhTHyIgQ_U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/wXhTHyIgQ_U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/wXhTHyIgQ_U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/wXhTHyIgQ_U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/wXhTHyIgQ_U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "wXhTHyIgQ_U"
        }
      },
      "contentDetails": {
        "videoId": "wXhTHyIgQ_U",
        "videoPublishedAt": "2019-09-03T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Pbe8vCF6KBqf2Dnx8e98pLcZ7bM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zNjkwOEVDNDhGOTA4QzE0",
      "snippet": {
        "publishedAt": "2020-05-11T23:11:57Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "DaBaby – ROCKSTAR FT RODDY RICCH [Audio]",
        "description": "DaBaby – ROCKSTAR FT RODDY RICH \nListen: https://smarturl.it/BlameItOnBaby\nSpotify: https://smarturl.it/BlameItOnBaby/spotify\nApple Music: https://smarturl.it/BlameItOnBaby/Applemusic\n \nConnect:\nhttps://instagram.com/dababy\nhttps://twitter.com/dababydababy\nhttps://www.facebook.com/babyjesus704/\n \n#Dababy #BlameItOnBaby",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/83xBPCw5hh4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/83xBPCw5hh4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/83xBPCw5hh4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/83xBPCw5hh4/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "83xBPCw5hh4"
        }
      },
      "contentDetails": {
        "videoId": "83xBPCw5hh4",
        "videoPublishedAt": "2020-04-17T04:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7Bjq6e8FBu2Pil6jaTZVp2K8_ng",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yQjU2NEE0NUJCMEJCMjhB",
      "snippet": {
        "publishedAt": "2020-02-12T23:01:12Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Justin Bieber - Intentions (Official Video (Short Version)) ft. Quavo",
        "description": "Changes: https://justinbieber.lnk.to/Changes\n\nWatch Official Video:\nhttps://justinbieber.lnk.to/IntentionsVideo\n\nJoin Justin Bieber in supporting Alexandria House's mission to help women and children move from crisis to stability by donating to the INTENTIONS Fund here: https://www.alexandriahouse.org/inten...\n\nFollow Justin:\nhttp://facebook.com/justinbieber\nhttp://twitter.com/justinbieber\nhttp://instagram.com/justinbieber\n\nSign up for Justin’s newsletter: http://justinbiebermusic.com\n\nDirected by: Michael D. Ratner\n\nProduction company: OBB Pictures\nExecutive Producers: Michael D. Ratner, Scott Ratner, Miranda Sherman, Kfir Goldberg and Andy Mininger\n\n\nMusic video by Justin Bieber performing Intentions (Official Video (Short Version)). © 2020 Def Jam Recordings, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/DHc2fp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3AyMjyHu1bA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3AyMjyHu1bA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3AyMjyHu1bA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3AyMjyHu1bA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3AyMjyHu1bA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3AyMjyHu1bA"
        }
      },
      "contentDetails": {
        "videoId": "3AyMjyHu1bA",
        "videoPublishedAt": "2020-02-12T20:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "j2h_EMPWkuHBX1ZlWBo3V_KyIps",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42NEE1NUNFRUEwNzI1Q0Y0",
      "snippet": {
        "publishedAt": "2020-05-03T10:33:00Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "THE SCOTTS, Travis Scott, Kid Cudi - THE SCOTTS (FORTNITE ASTRONOMICAL EVENT)",
        "description": "THE SCOTTS OUT NOW: https://THESCOTTS.lnk.to/THESCOTTS\n \nOFFICIAL STORE: https://shop.travisscott.com\n \nhttps://instagram.com/travisscott\nhttps://instagram.com/kidcudi\nhttps://instagram.com/cactusjack\nhttps://twitter.com/trvisXX\nhttps://twitter.com/KidCudi\nhttps://travisscott.com\nhttp://www.kidcudi.com/\n \n(C) 2020 Epic Records. With Cactus Jack / Wicked Awesome.\n\n#TravisScott #KidCudi #FORTNITE #ASTRONOMICAL #THESCOTTS #FortniteTravisScottEvent",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8oaW16lGNxE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8oaW16lGNxE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8oaW16lGNxE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8oaW16lGNxE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8oaW16lGNxE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8oaW16lGNxE"
        }
      },
      "contentDetails": {
        "videoId": "8oaW16lGNxE",
        "videoPublishedAt": "2020-04-24T04:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "cwmBk7ge2EFhWrPyFH5MbNZ1Dqg",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DM0Q3OEIwOTA1N0YyNDEy",
      "snippet": {
        "publishedAt": "2020-01-22T01:48:33Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Future - Life Is Good (Official Music Video) ft. Drake",
        "description": "\"Life is Good\" available at: https://smarturl.it/LifeIsGood.Future\nOfficial Audio: https://youtu.be/ZBOoVj6IW3s\n\nDirected by Director X\n\nFuture online:\nhttps://www.twitter.com/1future\nhttps://www.instagram.com/future\nhttps://www.soundcloud.com/futureisnow\nhttps://www.facebook.com/FutureOfficial\nhttp://www.freebandz.com/\n\n(C) 2020 Epic Records, a division of Sony Music Entertainment. With Freebandz.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/l0U7SxXHkPY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/l0U7SxXHkPY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/l0U7SxXHkPY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/l0U7SxXHkPY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/l0U7SxXHkPY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "l0U7SxXHkPY"
        }
      },
      "contentDetails": {
        "videoId": "l0U7SxXHkPY",
        "videoPublishedAt": "2020-01-10T05:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "s7W9zKS-GWMAQFVSroceCyLMlwQ",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DNEVBNkRBRDUxQTVFNEYx",
      "snippet": {
        "publishedAt": "2020-01-14T21:20:05Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Harry Styles - Adore You (Official Video)",
        "description": "Listen to Harry Styles’ new album ‘Fine Line’ now: https://HStyles.lnk.to/FineLineAY \n\nHARRY STYLES. LOVE ON TOUR. 2020.\nhttps://hstyles.co.uk/tour\n\nFollow Harry Styles:\nFacebook: https://HarryStyles.lnk.to/followFI\nInstagram: https://HarryStyles.lnk.to/followII\nTwitter: https://HarryStyles.lnk.to/followTI\nWebsite: https://HarryStyles.lnk.to/followWI\nSpotify: https://HarryStyles.lnk.to/followSI\nYouTube: https://HarryStyles.lnk.to/subscribeYD\n\nDirected by Dave Meyers\nWritten by Chris Shafer & Dave Meyers\nStarring Harry Styles\nScore by Kid Harpoon\nProduced by Nathan Scherrer\nLine Produced by Jo Coombes, Ellen De Faux, & Tom Gardner\nCinematographer Scott Cunningham\nProduction Designer Laura Ellis Cricks\nMr. Styles Styling by Harry Lambert\nCast Styling by Verity May Lane\nEdited by Alyssa Oh\nTelecine Stefan Sonnenfeld\nVFX by Mathematic \nSound Design Chris Afzal at Wave Studios\nPost Produced by Adam Parker & Nathan Scherrer\nVideo Commissioner Bryan Younce\n \nA Freenjoy Production \n \nFull Stop Management\nColumbia Records\nContent Creative\n \nThanks:\nAudri Kenley\nLS Productions\nSomesuch\nEntire cast and crew\n\nLyrics:\n\nWalk in your rainbow paradise\nStrawberry lipstick state of mind\nI get so lost inside your eyes\nWould you believe it?\n\nYou don’t have to say you love me\nYou don’t have to say nothing\nYou don’t have to say you’re mine\n\nHoney\nI’d walk through fire for you\nJust let me adore you\nOh honey\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\nLike it’s the only thing I’ll ever do\n\nYour wonder under summer skies\nBrown skin and lemon over ice\nWould you believe it?\n\nYou don't have to say you love me\nI just wanna tell you something\nLately you’ve been on my mind\n\nHoney\nI’d walk through fire for you\nJust let me adore you\nOh honey\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\nLike it’s the only thing I’ll ever do\n\nIt’s the only thing I’ll ever do\n\nI’d walk through fire for you\nJust let me adore you\nOh honey\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\n\nI’d walk through fire for you\nJust let me adore you\nOh honey\nOh honey\n\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\n\n#HarryStyles #AdoreYou #FineLine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "VF-r5TtlT9w"
        }
      },
      "contentDetails": {
        "videoId": "VF-r5TtlT9w",
        "videoPublishedAt": "2020-01-09T14:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "MMG9oyyB0oAsmmE0MBfquz8l648",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43OEE4Mjg3QUM3N0IxMUYy",
      "snippet": {
        "publishedAt": "2020-02-28T19:49:28Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Richie Krisak - Spend That Time feat. Ivar Lisinski (Lyrics / Lyric Video)",
        "description": "Richie Krisak - Spend That Time with Ivar Lisinski (Lyrics / Lyric Video)\n🎧 Stream or Download : https://ocean-music.lnk.to/STT\n\n\n• LIT NETWORK  •\n\nSubscribe! : https://goo.gl/D6Pnv6\n🔔 Turn on the bell for new music :) \nFollow us on Instagram : https://www.instagram.com/lit.network/\n\n• Richie Krisak • \nSoundcloud : https://soundcloud.com/richiekrisakofficial\nFacebook: http://facebook.com/richiekrisak\nTwitter: http://twitter.com/richiekrisak\nInstagram: http://instagram.com/richiekrisak/\n\n• Ivar Lisinski •\nInstagram : https://instagram.com/ivarlisinski\n\n___________________________________________________\n\n• Richie Krisak - Spend That Time (Lyrics) :\n\nI feel light just like a feather\nBut someone’s holding me down\nMy whole life feels like a prison\nAnd I need to break out\n\nThere’s another man behind this corporate suit\nand tie\nSo much more than meets the eye\n\nToday the doors are locked\nBut in my mind they’re not\nGuess it’s time I’ll go and tell ’em \nI don’t give a fuck\nI’ll show them who’s the boss\n\nAin’t gonna waste no time\nGonna spend it all on me\nI’m gonna take what’s mine\nGot a date with destiny\nNo more ”pushing papers till the day I die”\nCuz it just ain’t right\nI’d rather Spend That Time on me\n\nI’m a lover, I’m a dreamer\nLike my mom raised me to be\nI just wanna make a difference\nLike my dad before me\n\nYou will never see this kid give up without a fight\n’Cause I’m not that kind of guy, so\n\nToday the doors are locked\nBut in my mind they’re not\nGuess it’s time I’ll go and tell ’em I don’t give a\nfuck\nI’ll show them who’s the boss\n\nAin’t gonna waste no time\nGonna spend it all on me\nI’m gonna take what’s mine\nGot a date with destiny\nNo more ”pushing papers till the day I die”\nCuz it just ain’t right\nI’d rather Spend That Time on me\n\nYeah, it just ain’t right\nI’d rather, I’d rather Spend That Time\nSpend That Time\nI’m gonna, I’m gonna Spend That Time\nSpend That Time\n\nAin’t gonna waste no time\nGonna spend it all on me\nI’m gonna take what’s mine\nGot a date with destiny\nNo more ”pushing papers till the day I die”\nCuz it just ain’t right\n\nI’d rather Spend That Time on me\n\n\ntags:\n#SpendThatTime #RichieKrisak #Lyrics #LyricVideo #LitNetwork\n\n✉  Submit your music : itslitnetwork@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tOaq1jsbyws/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tOaq1jsbyws/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tOaq1jsbyws/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tOaq1jsbyws/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tOaq1jsbyws/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tOaq1jsbyws"
        }
      },
      "contentDetails": {
        "videoId": "tOaq1jsbyws",
        "videoPublishedAt": "2019-11-07T15:14:15Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "LAqxtc-4kWc2q9oD59TFqF2-s3Y",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BNkNBMDFDMkQzN0RDODRC",
      "snippet": {
        "publishedAt": "2020-02-03T19:48:20Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Billie Eilish - everything i wanted",
        "description": "Listen to “everything i wanted”, out now: http://smarturl.it/everythingiwanted\n\nDirected by Billie Eilish\nDeveloped/Edited by John Paul Horstmann\nVFX by Ingenuity Studios\n\nFollow Billie Eilish:\nFacebook: https://www.facebook.com/billieeilish\nInstagram: https://www.instagram.com/billieeilish\nTwitter: https://twitter.com/billieeilish\nYouTube: https://www.youtube.com/BillieEilish\nEmail: http://smarturl.it/BillieEilishEmail\nStore: http://smarturl.it/BillieEilishStore\n\nMusic video by Billie Eilish performing everything i wanted. © 2020 Darkroom/Interscope Records",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EgBJmlPo8Xw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EgBJmlPo8Xw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EgBJmlPo8Xw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EgBJmlPo8Xw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EgBJmlPo8Xw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EgBJmlPo8Xw"
        }
      },
      "contentDetails": {
        "videoId": "EgBJmlPo8Xw",
        "videoPublishedAt": "2020-01-23T20:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2I6IIB_vMa8ngqK5RvrQtWZJNOk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44M0YwNkI0MUFDMzZBMEZC",
      "snippet": {
        "publishedAt": "2019-09-24T22:10:30Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lewis Capaldi - Someone You Loved",
        "description": "Stream/download ’Someone You Loved’ https://lewiscapaldi.lnk.to/LC_SYLYD\n\nGet the extended edition of my debut album 'Divinely Uninspired To A Hellish Extent' here: https://lewiscapaldi.lnk.to/DUTAHE_Repack\n\nListen to my latest single “Before You Go” here: https://lewiscapaldi.lnk.to/beforeyougo\n\nTickets: http://tickets.lewiscapaldi.com\n\nDirector: Ozzie Pullin\nProducer: Byron McNally\nDirector of Photography: Ula Pontikos BSC\nEditor: Meg Thorne @ Cut & Run\nProduction Company: Partizan\nExec Producer: Mayling Wong\nColour: Jack McGinity @ CHEAT\n\n——————————————————\n\nLyrics \n\nI’m going under and this time I fear there’s no one to save me\nThis all or nothing really got a way of driving me crazy\n\nI need somebody to heal\nsomebody to know\nsomebody to have\nsomebody to hold\nIt’s easy to say\nbut it’s never the same\nI guess I kinda liked the way you numbed all the pain\n\nNow the day bleeds, into nightfall\nand you’re not here, to get me through it all\nI let my guard down and then you pulled the rug\nI was getting kinda used to being someone you loved\n\nI’m going under and this time I fear there’s no one to turn to\nThis all or nothing way of loving got me sleeping without you\nNow I need somebody to know \nsomebody to heal \nsomebody to have \njust to know how it feels\nIt’s easy to say\nbut it’s never the same\nI guess I kinda liked the way you helped me escape\n\nNow the day bleeds, into nightfall \nand you’re not here, to get me through it all\nI let my guard down and then you pulled the rug\nI was getting kinda used to being someone you loved\n\nAnd I tend to close my eyes when it hurts sometimes\nI fall into your arms \nI'll be safe in your sound til I come back around\n\nFor now the day bleeds, into nightfall \nand you’re not here, to get me through it all\nI let my guard down and then you pulled the rug\nI was getting kinda used to being someone you loved\n\nBut now the day bleeds, into nightfall \nand you’re not here, to get me through it all\nI let my guard down and then you pulled the rug\nI was getting kinda used to being someone you loved\n\nI let my guard down and then you pulled the rug\nI was getting kinda used to being someone you loved\n\n——————————————————\n\nLewis Capaldi \nSubscribe to Lewis: https://www.youtube.com/channel/UCveF...\nLike Lewis on Facebook: https://www.facebook.com/lewiscapaldi/\nFollow Lewis on Twitter: https://twitter.com/LewisCapaldi\nFollow Lewis on Instagram: https://www.instagram.com/lewiscapaldi/\nFollow Lewis online: https://www.lewiscapaldi.com/ \n\n#LewisCapaldi #SomeoneYouLoved #OfficialVideo\n\nMusic video by Lewis Capaldi performing Someone You Loved. © 2019 Universal Music GmbH",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zABLecsR5UE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zABLecsR5UE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zABLecsR5UE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zABLecsR5UE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zABLecsR5UE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zABLecsR5UE"
        }
      },
      "contentDetails": {
        "videoId": "zABLecsR5UE",
        "videoPublishedAt": "2019-08-29T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "vRy20u7B-oAMI2ldvZYV0v7SmJs",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yRjFEQzg0OTlBMkEyMENE",
      "snippet": {
        "publishedAt": "2020-02-12T23:05:29Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Arizona Zervas - ROXANNE (Official Video)",
        "description": "Listen to “ROXANNE” now: https://ArizonaZervas.lnk.to/ROXANNE\n\nSee my first LA show ever on feb 24th at The Echo: https://ArizonaZervas.lnk.to/EchoAY\n\nFollow Me:\nTWITTER: https://Twitter.com/ArizonaZervas\nINSTAGRAM: https://Instagram.com/ArizonaZervas\nSPOTIFY: https://ArizonaZervas.lnk.to/spotify\nITUNES: https://ArizonaZervas.lnk.to/itunes\nSOUNDCLOUD: https://Soundcloud.com/ArizonaZervas\nTIK TOK: https://www.tiktok.com/@arizona.zervas\nWEBSITE: http://ArizonaZervas.Com\nSNAPCHAT: ArizonaZervas\n\nProd Co - FREENJOY\nDirector - Nicholas Jandora\nStory By – Arizona Zervas & Nicholas Jandora\nExecutive Producer - Nathan Scherrer\nProducer - Jeff Kopchia\nProducer/Commissioner – Saul Levitz\n \nDP - Ben Carey\nProduction Designer - Spencer Graves\nEditor - Nicholas Jandora\nColor - Sam Gursky\nVFX - JR Strickland @ Nocturnal FX\nAZ Stylist - Carie Wendel\n\nLYRICS:\nRoxanne \nRoxanne\nAll she wanna do is party all night\nGod damn\nRoxanne\nNever gunna love me but it’s alright\nShe think i’ma asshole\nShe think i’m a playa\nShe keep running back tho\nOnly cause i pay up\nRoxanne \nRoxanne \nAll she wanna do is party all night\n\nMet her at a party in the hills ya\nShe just wanna do it for the thrill ya\nShorty drive a poodle with no top aye\nBut if i throw this money she gone drop\n\nShe don’t wait in lines if it’s too long\nShe don’t drive the whip unless the roof off\nOnly wanna call when the cash out\nOnly take the pic when her ass out\n\nShe from \nMalibu \nMalibu\nIf you don’t gotta foreign then she laugh at you \nMalibu \nMalibu\nSpending daddy’s money with a attitude\n\nRoxanne \nRoxanne\nAll she wanna do is party all night\nGod damn\nRoxanne\nNever gunna love me but it’s alright\nShe think i’ma asshole\nShe think i’m a playa\nShe keep running back tho\nOnly cause i pay up\nRoxanne \nRoxanne \nAll she wanna do is party all night\n\n(I just wanna have fun!)\n\nIn LA ya \nGot no breaks ya\nLiving fast \nRicky bobby \nShake and bake ya\nSee the chain ya\nIssa lake ya \nSwipe the chase oo\nNow she wanna date ya\n\nStraight to nobu \nOn the coast oo\nShorty only like cocaine and whole foods \nSnappin all up on the gram ass goin crazy \nNow she wanna fuck me in the foreign going 80\n\nShe from \nMalibu \nMalibu\nIf you don’t gotta foreign then she laugh at you \nMalibu \nMalibu\nSpending daddy’s money with a attitude\n\nRoxanne \nRoxanne\nAll she wanna do is party all night\nGod damn\nRoxanne\nNever gunna love me but it’s alright\nShe think i’ma asshole\nShe think i’m a playa\nShe keep running back tho\nOnly cause i pay up\nRoxanne \nRoxanne \nAll she wanna do is party all night\n\n#ArizonaZervas #Roxanne",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/16YnOUnbE6s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/16YnOUnbE6s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/16YnOUnbE6s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/16YnOUnbE6s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/16YnOUnbE6s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "16YnOUnbE6s"
        }
      },
      "contentDetails": {
        "videoId": "16YnOUnbE6s",
        "videoPublishedAt": "2020-02-12T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "c1pnM9pP5pPoyhg9CLMocXtkans",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DMUM4MDIwOUM1QjAxMjEx",
      "snippet": {
        "publishedAt": "2019-11-26T13:17:15Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "TONES AND I - DANCE MONKEY (OFFICIAL VIDEO)",
        "description": "2nd single from debut EP 'The Kids Are Coming' out now.\nhttps://tonesandi.lnk.to/TheKidsAreComingYT\n\nTones And I - Dance Monkey - https://tonesandi.lnk.to/DanceMonkeyYT\n\nDirected by: Liam Kelly & Nick Kozakis\nDirector of Photography: Carl Allison\nMakeup by: Danielle Ruth\nProduced by: Visible Studios\nhttps://www.visiblestudios.com.au/\n\nDon't forget to subscribe to my channel: http://smarturl.it/TonesAndI.YT\n\nJoin the fan club: https://bit.ly/2tL6gAW\n\nFollow: \nhttps://www.tonesandi.com\nhttps://www.facebook.com/TONESANDI\nhttps://www.instagram.com/tonesandi\n\nContact Management Worldwide: \nLemon Tree Music + Artists Only\nmgmt@tonesandi.com\n\nLYRICS:\nThey say oh my god I see the way you shine \nTake your hands my dear and place them both in mine\nYou know you stopped me dead while I was passing by\nAnd now I beg to see you dance just one more time \nOhhh I \nSee you see you seen you every time \nand oh my I, I like you style \nYou, you make me make me make me wanna cry \nAnd now I beg to see you dance just one more time \n\nSo they say \nDance for me\nDance for me \nDance for me \nOh oh oh \nI’ve never seen anybody do the things you do before \nThey say\nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again \n\nI said \nOh my god I see you walking by \nTake my hands my dear and look me in my eyes\nJust like a monkey I’ve been dancing my whole life \nBut you just beg to see me dance just one more time \nOoh I \nSee you see you seen you every time\nAnd oh my I, I like your style \nYou, you make me make me make me wanna cry \nAnd now I beg to see you dance just one more time \n\nSo they say \nDance for me\nDance for me \nDance for me \nOh oh oh\nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nThey say \nDance for me \nDance for me \nDance for me \nOh oh oh, oh oh oh oh \nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\n\nOooooo\n\nThey say \nDance for me\nDance for me \nDance for me \nOh oh oh\nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nThey say \nDance for me \nDance for me \nDance for me \nOh oh oh, oh oh oh oh \nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nAll again",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/q0hyYWKXF0Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/q0hyYWKXF0Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/q0hyYWKXF0Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/q0hyYWKXF0Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/q0hyYWKXF0Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "q0hyYWKXF0Q"
        }
      },
      "contentDetails": {
        "videoId": "q0hyYWKXF0Q",
        "videoPublishedAt": "2019-06-24T22:01:36Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "y_oFUQaBlmtwWEpD4hR-FzmQ5J4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5CNzFFRjM0RTVGRDE4MDQ5",
      "snippet": {
        "publishedAt": "2019-12-07T12:41:06Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "The Weeknd - Heartless (Official Video)",
        "description": "Official music video for The Weeknd \"Heartless\" - available everywhere now: http://theweeknd.co/heartlessYD\n\n►Subscribe to The Weeknd on YouTube: http://theweeknd.co/subscribeYD \n\n►Follow The Weeknd:\nhttps://twitter.com/theweeknd\nhttps://www.facebook.com/theweeknd\nhttps://www.instagram.com/theweeknd\nhttps://www.theweeknd.com\n\nDirector: Anton Tammi\nProducers: Alli Maxwell & Elizabeth Gross\nExecutive Producer: Saskia Whinney\nProduction Company: Somesuch \n\nDirector of Photography: Erik Henriksson\nSteadicam: Niels Lindelien\nGaffer: Sean Hogan\nProduction Designer: Miranda Lorenz\nArt Director: Haley Appell\nEditor: Nick Rondeau @ Work Editorial\nVFX: Mathematic\nAddt'l VFX: JAM VFX\nColorist: Nicke Jacobsson\n3D: Oscar Böckerman\nTitles and Graphic Design: Aleksi Tammi\nPost Producer: Nat Vrandich\nKey Grip: Robert Exner \nProduction Supervisor: Danielle Billman\n\n►\"Heartless\" Lyrics:\n\nNever need a bitch, I’m what a bitch needs\nTrying to find the one that can fix me\nI’ve been dodging death in the six speed\nAmphetamine got my stummy feeling sickly\nYeah, I want it all now\nI’ve been running through the pussy, need a dog pound\nHundred models getting faded in the compound\nTrying to love me but they never get a pulse down\n\nCause I’m heartless and I’m back to my ways cause I’m heartless\nAll this money and this pain got me heartless\nLow life for life cause I’m heartless\nSaid I’m heartless\nTrying to be a better man but I’m heartless \nNever be a wedding plan for the heartless \nLow life for life cause I’m heartless\n\nSaid I’m heartless\nSo much pussy it be falling out the pocket\nMetro Boomin turn this hoe into a moshpit\nTesla pill got me flying like a cockpit\nYeah, I got her watching \nCall me up turn that pussy to a faucet\nDuffel bags full of drugs and rocket\nStix drunk but he never miss a target\nPhotoshoots I’m a star now\nI’m talking Time, Rolling Stone and Bazaar now\nSellin dreams to these girls with their guard down\nSeven years I’ve been swimming with the sharks now\n\nCause I’m heartless and I’m back to my ways cause I’m heartless\nAll this money and this pain got me heartless\nLow life for life cause I’m heartless\nSaid I’m heartless\nTrying to be a better man but I’m heartless \nNever be a wedding plan for the heartless \nLow life for life cause I’m heartless\n\nI lost my heart and my mind\nI try to always do right \nI thought I lost you this time\nYou just came back in my life\nYou never gave up on me\nI’ll never know what you see \nI don’t do well when alone \nYou hear it clear in my tone\n\nCause I’m heartless and I’m back to my ways cause I’m heartless\nAll this money and this pain got me heartless\nLow life for life cause I’m heartless\nSaid I’m heartless\nTrying to be a better man but I’m heartless \nNever be a wedding plan for the heartless \nLow life for life cause I’m heartless\n\n#TheWeeknd #Heartless",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1DpH-icPpl0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1DpH-icPpl0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1DpH-icPpl0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1DpH-icPpl0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1DpH-icPpl0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1DpH-icPpl0"
        }
      },
      "contentDetails": {
        "videoId": "1DpH-icPpl0",
        "videoPublishedAt": "2019-12-03T22:30:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PJ8ZYWyF-3v2iQwZyl-79Rkh8WU",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42NkYzMkU0NDQ2MTM5NzVE",
      "snippet": {
        "publishedAt": "2019-10-08T14:31:09Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Maroon 5 - Memories (Official Video)",
        "description": "“Memories” is out now:\nhttps://smarturl.it/MemoriesMaroon5\n\nFor more, visit:\nhttps://www.facebook.com/maroon5\nhttps://twitter.com/maroon5\nhttps://www.instagram.com/maroon5\n\nSign up for updates: http://smarturl.it/Maroon5.News\n\n#Maroon5 #Memories #M5\n\nMusic video by Maroon 5 performing Memories. © 2019 Interscope Records (222 Records)\n\nhttp://vevo.ly/wdiQiA",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SlPhMPnQ58k/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SlPhMPnQ58k/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SlPhMPnQ58k/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SlPhMPnQ58k/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SlPhMPnQ58k/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SlPhMPnQ58k"
        }
      },
      "contentDetails": {
        "videoId": "SlPhMPnQ58k",
        "videoPublishedAt": "2019-10-08T14:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "VPPg4qDIL2xxeX-2-e54orn0qak",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yREMyQThGRjREMUQzQ0Mw",
      "snippet": {
        "publishedAt": "2020-01-14T21:21:14Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "blackbear - hot girl bummer [big budget music video]",
        "description": "blackbear - hot girl bummer \n\nlisten: https://smarturl.it/hotgirlbummer\nspotify: https://smarturl.it/hotgirlbummer/spotify\napple music: https://smarturl.it/hotgirlbummer/applemusic\niTunes: https://smarturl.it/hotgirlbummer/itunes \n\nfollow bear: \nhttp://twitter.com/iamblackbear\nhttp://instagram.com/bear \nhttp://www.beartrap.la \n\n#blackbear #hotgirlbummer \n\nMusic video by blackbear performing hot girl bummer. © 2019 Beartrap, LLC",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5cPW0ggFq04/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5cPW0ggFq04/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5cPW0ggFq04/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5cPW0ggFq04/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5cPW0ggFq04/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "5cPW0ggFq04"
        }
      },
      "contentDetails": {
        "videoId": "5cPW0ggFq04",
        "videoPublishedAt": "2019-11-21T12:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SNK5Jk_QrgOu4nY-ve0ILpDwjDA",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4wNDRFRDhEQUJGNTg0RjI2",
      "snippet": {
        "publishedAt": "2019-10-15T00:31:54Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Dan + Shay, Justin Bieber - 10,000 Hours (Official Music Video)",
        "description": "LISTEN EVERYWHERE:\nhttp://wmna.sh/10kHours",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Y2E71oe0aSM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Y2E71oe0aSM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Y2E71oe0aSM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Y2E71oe0aSM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Y2E71oe0aSM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Y2E71oe0aSM"
        }
      },
      "contentDetails": {
        "videoId": "Y2E71oe0aSM",
        "videoPublishedAt": "2019-10-04T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "yqkIaHNFeu92ZLi6HB24oasUPfw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44NDQ2Q0YyM0VBNzYxNTJD",
      "snippet": {
        "publishedAt": "2020-05-10T02:38:52Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Sam Creighton - Reaction (Official Quarantine Music Video)",
        "description": "Reaction (Official Quarantine Video)\n\nWOWWWW What a time to be alive. This song perfectly describes what I have been feeling during this crazy time. We made this video via Zoom and Facetime, all shot on either an iPhone, or through a computer screen. It was so incredible to get creative in a new way, despite what we're all going through. Hope you enjoy!!!\n\nSong available here: https://tinyurl.com/ycpcprn4\n\nDirector - Shawn Binder\nProducer - Sam Creighton\nDirector of Photography - Shawn Binder\nEditor - Joe Desantis\nBig shout out to Facetime and ZOOM (or as Joe so cleverly edited in the video, \"Yoom\" lol) for allowing this video come to life during the times of social distancing. \n\nMusic video by Sam Creighton performing Reaction. © 2020 GNGR Records",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sJUwRsMvt6o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sJUwRsMvt6o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sJUwRsMvt6o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sJUwRsMvt6o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sJUwRsMvt6o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sJUwRsMvt6o"
        }
      },
      "contentDetails": {
        "videoId": "sJUwRsMvt6o",
        "videoPublishedAt": "2020-05-08T18:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "fWmPSeijcM0SdlefUHHByuy6g_E",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS41M0YyRDc3OEFERDhEQjU2",
      "snippet": {
        "publishedAt": "2020-03-06T00:15:47Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jonas Brothers - What A Man Gotta Do (Official Video)",
        "description": "Official music video by Jonas Brothers performing \"What A Man Gotta Do\" - available everywhere now: https://JonasBrothers.lnk.to/WAMGDYD\n\n►Subscribe for more official content from Jonas Brothers: https://JonasBrothers.lnk.to/SubcribeYD \n\n►Exclusive Merch: https://shop.jonasbrothers.com/ \n\n►Follow Jonas Brothers Online\nInstagram: https://www.instagram.com/jonasbrothers/ \nFacebook: https://www.facebook.com/JonasBrothers/ \nTwitter: https://twitter.com/jonasbrothers \nWebsite: https://jonasbrothers.com/ \n\nVideo directed by Joseph Kahn\nVideo produced by Charleen Manca\nfor Supply & Demand\n\n►\"What A Man Gotta Do\" Lyrics:\n\nCut my heart about one, two times\nDon't need to question the reason, I'm yours, I'm yours\nI know the other lose a fight just to see you smile\n'Cause you got no flaws, no flaws\n\nI'm not tryin' to be your part-time lover\nSign me up for the full-time, I'm yours, all yours\n\nSo, what a man gotta do?\nWhat a man gotta do?\nTo be totally locked up by you\nWhat a man gotta say?\nWhat a man gotta pray?\nTo be your last good night and your first good day\nSo, what a man gotta do?\nWhat a man gotta do?\nTo be totally locked up by you\nWhat a man gotta do?\nWhat a man gotta prove?\nTo be totally locked up by you\n\nYou ain’t trying to be wasting time\nOn stupid people and cheap lines, I'm sure, I'm sure\nSo I'd give a million dollars just to go grab me by the collar\nAnd I’m gonna be lost, be lost\n\nI'm not tryin' to be your part-time lover\nSign me up for the full-time, I'm yours, I'm yours, woo!\n\nSo, what a man gotta do?\nWhat a man gotta do?\nTo be totally locked up by you\nWhat a man gotta say?\nWhat a man gotta pray?\nTo be your last good night and your first good day\nSo, what a man gotta do?\nWhat a man gotta do?\nTo be totally locked up by you\nWhat a man gotta do?\nWhat a man gotta prove?\nTo be totally locked up by you\n\nOoh-ooh-ooh-ooh-ooh-ooh-ooh-ooh-ooh\nOoh-ooh-ooh-ooh-ooh-ooh-ooh-ooh-ooh\nTell me what a man gotta do?\n\nSo, what a man gotta do? (What a man gotta do?)\nWhat a man gotta do? (What a man gotta do, yeah?)\nTo be totally locked up by you (Totally locked up by you)\nWhat a man gotta say? (What a man gotta say?)\nWhat a man gotta pray? (What a man gotta pray?)\nTo be your last good night and your first good day (Aay)\nSo, what a man gotta do? (What a man gotta do?)\nWhat a man gotta do? (Woah)\nTo be totally locked up by you (Totally locked up by you)\nWhat a man gotta do? (Hey, baby)\nWhat a man gotta prove? (What a man gotta prove?)\nTo be totally locked up by you (Totally locked up by you)\n\n#JonasBrothers #WhatAManGottaDo\n\n\nMusic video by Jonas Brothers performing What A Man Gotta Do. © 2020 Jonas Brothers Recording, Limited Liability Company, under exclusive license to Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/Lzr7Wm",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XejVB_fba04/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XejVB_fba04/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XejVB_fba04/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XejVB_fba04/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XejVB_fba04/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XejVB_fba04"
        }
      },
      "contentDetails": {
        "videoId": "XejVB_fba04",
        "videoPublishedAt": "2020-01-17T05:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "FRoTr3Q41tlOFPpkRNAwNewRicM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5CQkIyMUJFOUM2QzJERTlC",
      "snippet": {
        "publishedAt": "2019-11-26T13:17:09Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "DaBaby - BOP on Broadway (Hip Hop Musical)",
        "description": "BOP on Broadway \n\nDaBaby - BOP\nProduced by Jetsonmade\nVideo Produced by Reel Goats\nDir x Reel Goats\nEdited by Reel Goats\n\nShoutout every single dancer that came out to be great.Shout Cherry and Danileigh for the Choreography.\n\nMuch love to Paramount for letting us run wild on their studio lot. \n\nKirk Album Out Now. The Kirk Tour starts this weekend if you ain't got your tickets, go get them you bitch ass niggas.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/28hYUZMufDg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/28hYUZMufDg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/28hYUZMufDg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/28hYUZMufDg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/28hYUZMufDg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "28hYUZMufDg"
        }
      },
      "contentDetails": {
        "videoId": "28hYUZMufDg",
        "videoPublishedAt": "2019-11-15T16:32:59Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "pMVowZYaqwjo4pkcIgw0wmc5W14",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42QTdDRkRERUJDMUFDNEZC",
      "snippet": {
        "publishedAt": "2020-01-14T21:20:22Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Maren Morris - The Bones (Official Video)",
        "description": "Listen to \"The Bones” by Maren Morris, available now on her second studio album, GIRL: http://smarturl.it/MMGIRL?IQid=youtube\n \nApple Music: http://smarturl.it/MMGIRL/applemusic?IQid=youtube\nSpotify: http://smarturl.it/MMGIRL/spotify?IQid=youtube\nAmazon Music: http://smarturl.it/MMGIRL/az?IQid=youtube\nYouTube Music: http://smarturl.it/MMGIRL/youtubemusic?IQid=youtube\nYouTube: http://smarturl.it/MMGIRL/youtube?IQid=youtube\nPandora: http://smarturl.it/MMGIRL/pandora?IQid=youtube\niTunes: http://smarturl.it/MMGIRL/itunes?IQid=youtube\nAll Retailers: http://smarturl.it/MMGIRL?IQid=youtube\n \nStay updated on Maren:\nOfficial website: http://www.marenmorris.com\nSubscribe: http://smarturl.it/MMyoutubesub?IQid=youtube\nFacebook: http://www.facebook.com/marenmorris\nTwitter: http://twitter.com/marenmorris\nInstagram: http://instagram.com/marenmorris\nJoin The HEROES Fan Club: http://smarturl.it/TheHEROESfanclub?IQid=youtube\nShop: http://smarturl.it/MarenMorrisShop?IQid=youtube\n \n#MarenMorris #TheBones #GIRL",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/gvPMVKUI9go/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/gvPMVKUI9go/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/gvPMVKUI9go/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/gvPMVKUI9go/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/gvPMVKUI9go/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "gvPMVKUI9go"
        }
      },
      "contentDetails": {
        "videoId": "gvPMVKUI9go",
        "videoPublishedAt": "2019-08-15T16:15:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-ugRtnEH6XDJTBGZY5eOl7__ixY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zNDZGNTJDRDNDRDIzNDU5",
      "snippet": {
        "publishedAt": "2020-05-10T02:38:41Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Logan Alexandra - Realized I Don't Need You (Official Video)",
        "description": "Hope you enjoy this music video as much as we did making it! \n\n“Realized I Don’t Need You” is out now:\nhttps://ampl.ink/emqAp\n\n(this video was filmed before the orders of social distancing were in place) \n\nDirector - Ryan Brennan\nCinematographer - Isaac O’Farrell & Bowen Moreno \n\nCast:\nLogan Alexandra as Logan Alexandra\nKeys- Abby Macintyre\nGuitarist - Matt McCartin\nDrummer - Max Stabile\nAbby Neighbors\nIsiah Johnson\n\nWritten and preformed by Logan Alexandra \nSong Produced by Chris Calderon \n\nsee end of video for full credits!",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tKoG5DO76ww/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tKoG5DO76ww/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tKoG5DO76ww/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tKoG5DO76ww/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tKoG5DO76ww/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 26,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tKoG5DO76ww"
        }
      },
      "contentDetails": {
        "videoId": "tKoG5DO76ww",
        "videoPublishedAt": "2020-04-18T00:33:32Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "vo0zQKmPYqDH8FQpragxeqweuoQ",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5CQUUxNDNDQTFCNTFGN0NC",
      "snippet": {
        "publishedAt": "2020-03-06T00:14:49Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "The Weeknd - After Hours (Audio)",
        "description": "Official audio for The Weeknd \"After Hours\" - available everywhere now: http://theweeknd.co/afterhours-single\n\n►Subscribe to The Weeknd on YouTube: http://theweeknd.co/subscribeYD \n\n►Follow The Weeknd:\nhttps://twitter.com/theweeknd\nhttps://www.facebook.com/theweeknd\nhttps://www.instagram.com/theweeknd\nhttps://www.theweeknd.com\nSubscribe to YouTube Music: http://theweeknd.co/afterhours-singleYD/...",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ygTZZpVkmKg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ygTZZpVkmKg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ygTZZpVkmKg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ygTZZpVkmKg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ygTZZpVkmKg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 27,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ygTZZpVkmKg"
        }
      },
      "contentDetails": {
        "videoId": "ygTZZpVkmKg",
        "videoPublishedAt": "2020-02-19T05:00:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gzVKQTVWPurGWJIRqxAcMvsMcUM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43QzdDMkUyRTE2NEYzMjRD",
      "snippet": {
        "publishedAt": "2019-10-28T18:34:26Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Selena Gomez - Lose You To Love Me (Official Music Video)",
        "description": "Get Selena's new album 'Rare', out now: http://smarturl.it/RARESG\n\nGet 'Lose You To Love Me,' out now: http://smarturl.it/LoseYouToLoveMe\nGet 'Look At Her Now': http://smarturl.it/LookAtHerNow\n\nListen On @applemusic #shotoniphone\nDirected by Sophie Muller\n\nFollow Selena:\nInstagram: https://www.instagram.com/selenagomez/\nTwitter: https://twitter.com/selenagomez\nFacebook: https://www.facebook.com/Selena\nTik Tok: https://www.tiktok.com/@selenagomez\nYouTube: https://smarturl.it/SelenaYT\n\nListen on Apple Music: https://smarturl.it/SGEssentials\nListen on Spotify: https://smarturl.it/SelenaGomezTheHitsSp\n\nGet exclusive Selena Gomez merch, available at: http://smarturl.it/SelenaStore\nSign-up to be the first to hear news from Selena: http://smarturl.it/SelenaGomez.News\nBest of Selena Gomez https://goo.gl/mgJg2s\nSelena Gomez Audio https://goo.gl/dmJYbd\n\nLYRICS\n\nYou promised the world and I fell for it \nI put you first and you adored it\nYou set fires to my forest\nAnd you let it burn \nSang off key in my chorus \nCause it wasn’t yours \nI saw the signs and I ignored it \nRose colored glasses all distorted \nYou set fire to my purpose\nAnd I let it burn \nYou got off on the hurtin’ \nWhen it wasn’t yours \nWe’d always go into it blindly\nI needed to lose you to find me \nThis dancing was killing me softly\nI needed to hate you to love me \n\nTo love love yeah\nTo love love yeah\nTo love yeah\nI needed to lose you to love me \nTo love love yeah\nTo love love yeah\nTo love yeah\nI needed to lose you to love me\nI gave my all and they all know it\nYou tore me down and now it’s showing \nIn two months you replaced us\nLike it was easy\nMade me think I deserved it\nIn the thick of healing \nWe’d always go into it blindly\nI needed to lose you to find me \nThis dancing was killing me softly \nI needed to hate you to love me \n\nTo love love yeah\nTo love love yeah\nTo love yeah\nI needed to lose you to love me \nTo love love yeah\nTo love love yeah\nTo love yeah\nI needed to lose you to love me \nYou promised the world and I fell for it \nI put you first and you adored it\nYou set fires to my forest\nAnd you let it burn \nSang off key in my chorus- \n\nTo love love yeah\nTo love love yeah\nTo love yeah\nI needed to hate you to love me\nTo love love yeah\nTo love love yeah\nTo love yeah\nI needed to lose you to love me\nTo love love yeah\nTo love love yeah\nTo love yeah\n\nAnd now the chapter is closed and done \nAnd now it’s goodbye\nIt’s goodbye for us\n\nMusic video by Selena Gomez performing Lose You To Love Me. © 2019 Interscope Records",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zlJDTxahav0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zlJDTxahav0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zlJDTxahav0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zlJDTxahav0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zlJDTxahav0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 28,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zlJDTxahav0"
        }
      },
      "contentDetails": {
        "videoId": "zlJDTxahav0",
        "videoPublishedAt": "2019-10-23T04:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "MpwTsfCLuyiyjtuMQbojl1fI-T4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xQTNBM0VERjQ0QTIzRUMz",
      "snippet": {
        "publishedAt": "2019-11-26T13:17:28Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Mustard - Ballin’ ft. Roddy Ricch",
        "description": "'Perfect Ten' out now: http://smartURL.it/PerfectTen\n\nFollow Mustard:\nhttp://www.instagram.com/Mustard\nhttp://www.facebook.com/DJMustardOnTheBeat\nhttp://www.twitter.com/Mustard\n\n#Mustard #RoddyRicch #Ballin #PerfectTen\n\nMusic video by Mustard performing Ballin’. © 2019 10 Summers Records, Inc./Interscope Records\n\nhttp://vevo.ly/CuRI6I",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YS0h2-hy9rw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YS0h2-hy9rw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YS0h2-hy9rw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YS0h2-hy9rw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YS0h2-hy9rw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 29,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YS0h2-hy9rw"
        }
      },
      "contentDetails": {
        "videoId": "YS0h2-hy9rw",
        "videoPublishedAt": "2019-10-02T16:00:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "yBfzVGFdugAFGhRmaFVGETNmlwk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xRUE3NkZCRjhBNEFDRDA1",
      "snippet": {
        "publishedAt": "2020-02-12T23:01:43Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Camila Cabello - My Oh My (Official Music Video) ft. DaBaby",
        "description": "\"Romance\" available at:  https://CamilaCabello.lnk.to/Romance\n\nFollow Camila: \nhttps://twitter.com/camila_cabello\nhttps://www.instagram.com/camila_cabello\nhttps://www.facebook.com/camilacabello\nhttps://www.camilacabello.com\n\n(C) 2020 Simco Ltd. under exclusive license to Epic Records, a division of Sony Music Entertainment",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6fd2kkLmSDQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6fd2kkLmSDQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6fd2kkLmSDQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6fd2kkLmSDQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6fd2kkLmSDQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 30,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6fd2kkLmSDQ"
        }
      },
      "contentDetails": {
        "videoId": "6fd2kkLmSDQ",
        "videoPublishedAt": "2020-02-12T20:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZOGky09WQR4hh4-aj7PE0rGqBVg",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5FQjMwRUZGOTIyODI4MTlC",
      "snippet": {
        "publishedAt": "2020-01-09T11:20:37Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Justin Bieber - Yummy (Official Video)",
        "description": "Changes: https://justinbieber.lnk.to/Changes\n\nFollow Justin: \nhttp://facebook.com/justinbieber\nhttp://twitter.com/justinbieber\nhttp://instagram.com/justinbieber\n\nSign up for Justin’s newsletter: http://justinbiebermusic.com\n\nDirected by Bardia Zeinali\nProduced by Roisin Audrey Moloney\nExecutive Producers: Danielle Hinde, Jason Cole\nVideo Commissioner: Yolande Geralds\nProduction Company: Doomsday Entertainment\nDirector of Photography: Ben Carey\nProduction Designer: Natalie Ziering\nProduction Manager: David Garcia\nProduction Coordinator: Tori Stosh\nChoreographer: Nick De Moura\nArtist Styling: Karla Welch\nArtist Grooming: Florido Basallo\nCast Styling: Gadir Rajab\nCast Make-up: Adam Burrell\nCast Hair: Lucas Wilson\nEdited by: William Town, Graham Patterson @ Modern Post\nColorist: Tim Masick @ Company 3\n\n#JustinBieber #Yummy #Changes\n\n \nMusic video by Justin Bieber performing Yummy (Official Video). © 2020 Def Jam Recordings, a division of UMG Recordings, Inc.\n \nhttp://vevo.ly/b5CIQg",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 31,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8EJ3zbKTWQ8"
        }
      },
      "contentDetails": {
        "videoId": "8EJ3zbKTWQ8",
        "videoPublishedAt": "2020-01-04T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TdRvwEW2TZ9e8-pRGZTLMGIpzpQ",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5GQkU0MzAwMzE4NDRDRkVB",
      "snippet": {
        "publishedAt": "2020-02-28T19:49:02Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Hanne Leland - Stay (Lyrics)",
        "description": "Hanne Leland - Stay (Lyrics)\n\n• LIT NETWORK  •\n\nSubscribe! : https://goo.gl/D6Pnv6\n🔔 Turn on the bell for new music :) \nFollow us on Instagram : https://www.instagram.com/lit.network/\n\n🎧  Stream/Download: \niTunes: https://itun.es/no/t2lZD\nSpotify: https://goo.gl/eHsa8u\n\n• Hanne Leland • \nhttp://www.hanneleland.com\nhttp://www.facebook.com/hannelelandmusic\nhttp://www.twitter.com/hanne_leland\nhttp://www.instagram.com/hanneleland\n\n✖  The channel is created to promote talented artists & musicians, filmmakers & photographers.\n\n✉  Submit your music, artwork or fanart to : itslitnetwork@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EE-TQyOP9g0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EE-TQyOP9g0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EE-TQyOP9g0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EE-TQyOP9g0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EE-TQyOP9g0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 32,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EE-TQyOP9g0"
        }
      },
      "contentDetails": {
        "videoId": "EE-TQyOP9g0",
        "videoPublishedAt": "2018-06-27T15:55:40Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2QrfrGM58M79rYeooaElobdqrd8",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS40RENGMkVDNTUyQzRDM0JC",
      "snippet": {
        "publishedAt": "2019-11-26T13:16:55Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lil Baby - Woah (Official Audio)",
        "description": "Stream/Download \"Woah\": https://qualitycontrol.lnk.to/WoahYD\n\nFollow Lil Baby Everywhere:\nhttps://www.instagram.com/lilbaby_1/\nhttps://twitter.com/lilbaby4PF\nhttps://www.facebook.com/4pflilbaby\n\nwww.qualitycontrolmusic.com\n\nMusic video by Lil Baby performing Woah (Audio). © 2019 Quality Control Music, LLC, under exclusive license to UMG Recordings, Inc.\n\nhttp://vevo.ly/yl7eP6",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iVVbokygD-A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iVVbokygD-A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iVVbokygD-A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/iVVbokygD-A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/iVVbokygD-A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 33,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iVVbokygD-A"
        }
      },
      "contentDetails": {
        "videoId": "iVVbokygD-A",
        "videoPublishedAt": "2019-11-08T05:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CghFyAd0TXWZKPhR5_WqDqEKjxM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zMjY5ODU0NEU2NENGMkE1",
      "snippet": {
        "publishedAt": "2020-01-14T21:22:20Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Roddy Ricch - High Fashion (feat. Mustard) [Official Audio]",
        "description": "Roddy Ricch - High Fashion (feat. Mustard)\nStream - https://roddyricch.lnk.to/PleaseExcuseMeForBeingAntisocial\n\nFollow Roddy Ricch\nhttps://www.instagram.com/roddyricch\nhttps://twitter.com/roddyricch\nhttps://soundcloud.com/roddyricch\nhttps://www.facebook.com/RoddyRicch/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iGU66wsjIPA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iGU66wsjIPA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iGU66wsjIPA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/iGU66wsjIPA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/iGU66wsjIPA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 34,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iGU66wsjIPA"
        }
      },
      "contentDetails": {
        "videoId": "iGU66wsjIPA",
        "videoPublishedAt": "2019-12-06T05:05:28Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Bmlmw24wtXgxnX8NsuAwK_lhV34",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yMDY2QkUyNDkxMEZBRkRC",
      "snippet": {
        "publishedAt": "2020-03-06T00:20:56Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Halsey - You should be sad",
        "description": "Halsey’s new album ‘Manic’ out now! https://halsey.lnk.to/manicthealbumID\niTunes: https://halsey.lnk.to/manicthealbumID/iTunes\nSpotify: https://halsey.lnk.to/manicthealbumID/spotify \nApple Music: https://halsey.lnk.to/manicthealbumID/applemusic\nAmazon: https://halsey.lnk.to/manicthealbumID/amazon\nGoogle Play: https://halsey.lnk.to/manicthealbumID/google-play\n\nGet tickets to #ManicWorldTour! Each ticket purchase comes with a physical copy of ‘Manic’.\nhttps://halsey.lnk.to/MANICWorldTourID\n\nFollow Halsey –\nTwitter: http://twitter.com/halsey \nFacebook: https://www.facebook.com/HalseyMusic \nInstagram: http://instagram.com/iamhalsey\nSpotify: https://halsey.lnk.to/InMyHeadID\nOfficial Site: http://iamhalsey.com\n\n#halsey #manic #youshouldbesad\n\nMusic video by Halsey performing You should be sad. © 2020 Capitol Records, LLC",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8nBFqZppIF0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8nBFqZppIF0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8nBFqZppIF0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8nBFqZppIF0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8nBFqZppIF0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 35,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8nBFqZppIF0"
        }
      },
      "contentDetails": {
        "videoId": "8nBFqZppIF0",
        "videoPublishedAt": "2020-01-10T05:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ren_1Z0-Dw8aYY5L-n2wpdUenDo",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yMTMwMjBBNDJEQTM0NUQ3",
      "snippet": {
        "publishedAt": "2019-10-03T17:37:52Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lizzo - Good As Hell (Video)",
        "description": "The official audio of \"Good As Hell (Official Video)\" by Lizzo\nDownload/Stream - https://Lizzo.lnk.to/GoodAsHellAY\nListen to Lizzo’s new album ‘Cuz I Love You’ out now!\nhttps://Lizzo.lnk.to/CuzILoveYouAY\n\nSubscribe for more content from Lizzo: \nhttps://lnk.to/SubscribeToLizzo\n\nFollow Lizzo\nhttps://instagram.com/f/lizzobeeating\nhttps://facebook.com/LizzoMusic\nhttps://twitter.com/lizzo\nhttps://soundcloud.com/lizzomusic\nhttp://lizzomusic.com\n\nThe official YouTube channel of Atlantic Records and Nice Life artist Lizzo. Subscribe for the latest music videos, performances, and more.\n\nBorn in Houston and raised in Detroit, Lizzo adopted her moniker in 2011 and fronted Lizzo & the Larva Ink after moving to Minneapolis. Her work began to intertwine with the city's indie scene, allowing her to work with artists like Gayngs and Doomtree.\n\nSince then, Lizzo has collaborated with a variety of creatives--Clean Bandit, Bastille, and Big Freedia, to name a few--and was named one of Forbes Magazine's 2018 \"30 Under 30\". Her top singles \"Good As Hell\" and \"Truth Hurts\" have gained over 34.5 million Spotify streams combined. In addition to headlining her own Good As Hell tour in 2017, Lizzo joined Haim on the Sister Sister Sister tour in 2018.\n\nSubscribe for the latest official music videos, official audio videos, performances, bts and more from Lizzo: https://lnk.to/SubscribeToLizzo\n\n#Lizzo #GoodAsHell #CoconutOil #OfficialVideo #AtlanticRecords #Atlantic\n\nListen to Best of Lizzo playlist ➤ https://bit.ly/3afMdhW\r\nWatch Lizzo’s Official Music Videos ➤ https://bit.ly/3bgDQ5y",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SmbmeOgWsqE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SmbmeOgWsqE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SmbmeOgWsqE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SmbmeOgWsqE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SmbmeOgWsqE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 36,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SmbmeOgWsqE"
        }
      },
      "contentDetails": {
        "videoId": "SmbmeOgWsqE",
        "videoPublishedAt": "2016-05-11T15:02:07Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "E8Bfggmq-KoPhw9ir49q2yYw3cE",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5COTBCMTlDNDZDOTExNTc5",
      "snippet": {
        "publishedAt": "2020-02-28T19:49:57Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Topi Mandela - Mustang (Music Video)",
        "description": "\u200bThe music video for Topi Mandela's \"Mustang\" single, produced by Eestbound & JuiceBangers.\n\n• LIT NETWORK  •\nSubscribe! : https://goo.gl/D6Pnv6\n🔔 Turn on the bell for new music :) \n\n🎧 Stream / Download : http://smarturl.it/MustangSingle\n\n• Follow Topi Mandela :\nTwitter: https://twitter.com/topimandela\nInstagram: https://www.instagram.com/topimandela/\nSoundcloud: https://soundcloud.com/topimandela\nYoutube : https://www.youtube.com/channel/UC5643_RVolar_b-c3htxg5w\n\n• A film by Calvin Herbst\n\n• Cinematography by Kai Dickson\n\nThe channel is created to promote talented artists & musicians, filmmakers & photographers.\n\n✉  Submit your content here : itslitnetwork@gmail.com\nFollow us on Instagram : https://www.instagram.com/lit.network/\nLIT Music\n\n\nTopi Mandela - Mustang Lyrics :\n\nLet me be your Mustang, shawty wanna ride\nYou can't bring me home, so enjoy the test drive\nSparking the ignition, vroom vroom, you arrive when you need to get away\n'Cause I make you feel alive\n\nLet me be your Mustang, shawty wanna ride\nYou can't bring me home, so enjoy the test drive\nSparking the ignition, vroom vroom, you arrive when you need to get away\n'Cause I make you feel alive\n\nLet me be your Mustang, shawty wanna ride\nYou can't bring me home, so enjoy the test drive\nSparking the ignition, vroom vroom, you arrive when you need to get away\n'Cause I make you feel alive\n\nTo be honest, I'm exhausted\nI was running on \"E\", now my ex wanna gas me up\nShe lost it\nUsed to be a sweet talking, slick walking lover boy\nNow, I'm heartless\nI know I ain't got the time to dedicate, but I play the game, regardless\nA little fun ain't harmless\nImpolite girl, ooh! Yeah!\nOne night girl, ooh! Yeah!\nMama told me, \"Trust me, that ain't the right girl,\" ooh! Yeah!\nTelling me you want a taste of the mocha\nWhen you lonely, you inviting me over\nTryna cuddle up when we on the sofa\nAsking me to stretch you out like it's yoga\nWoah!\nI know you ain't tryna introduce me to your fam\nI know you ain't tryna have a rapper as your man\nSnapping on me, like the crack of a whip\nGrinding gears like a stick\nSince you wanna trip, well\n\nx2\nLet me be your Mustang, shawty wanna ride\nYou can't bring me home, so enjoy the test drive\nSparking the ignition, vroom vroom, you arrive when you need to get away\n'Cause I make you feel alive\n\nLet me be your Mustang, your uh\nYour uh uh uh\nMustang, let me be your\nYour vroom vroom, skrr\nMustang, your uh\nYour uh uh uh\nMustang, let me be your\nYour vroom vroom vroom\n\nRevving up\nHorsepower, you can pony up\nLast minute, I can come in clutch\nI know you ain't looking for too much\nJust trust me, ain't no rush\nWe can cruise\nTime and place, you can choose\nI hope I don't blow a fuse\nBurning out for you\nI need more fuel\nDrop the top when you with me\nPromise that you won't forget me\nYou can get a little moody\nBad girl like Britney\nOut in public, you ignore me\nIndoors, you adore me\nSecrets you cannot afford in a two-door Ford when you bored\nHit me when it's late\nLeave me hanging all day\nBut, at night, you wanna play\nI know you ain't tryna date\nAll I'm saying is you snapping on me, like the crack of a whip\nGrinding gears like a stick\nSince you wanna trip, well\n\nx2\nLet me be your Mustang, shawty wanna ride\nYou can't bring me home, so enjoy the test drive\nSparking the ignition, vroom vroom, you arrive when you need to get away\n'Cause I make you feel alive",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fYCZrmfooGk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fYCZrmfooGk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fYCZrmfooGk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fYCZrmfooGk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fYCZrmfooGk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 37,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fYCZrmfooGk"
        }
      },
      "contentDetails": {
        "videoId": "fYCZrmfooGk",
        "videoPublishedAt": "2018-04-15T15:08:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Vueu52LUn3uW7Ys3ew_TrUMjdQY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5GMkUzNjEzMkRDMTdDREMx",
      "snippet": {
        "publishedAt": "2020-03-06T00:15:18Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "YoungBoy Never Broke Again - Lil Top [Official Music Video]",
        "description": "YoungBoy Never Broke Again - Lil Top\nStill Flexin, Still Steppin OUT NOW!\nStream/Download: https://youngboy.lnk.to/StillFlexinStillSteppinID \n\nSubscribe for more official content from YoungBoy NBA: \nhttps://youngboy.lnk.to/Subscribe\n\nConnect with YoungBoy Never Broke Again:\nhttp://www.youngboynba.com\nhttps://www.facebook.com/nbayoungboy\nhttps://www.twitter.com/GGYOUNGBOY\nhttps://www.instagram.com/nba_youngboy\nhttps://www.soundcloud.com/nba-youngboy\n\nThe official YouTube channel of Atlantic Records artist YoungBoy Never Broke Again. Subscribe for the latest music videos, performances, and more.\n\n#YoungBoyNeverBrokeAgain #StillFlexinStillSteppin #LilTop",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/lUmYlsulfYo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/lUmYlsulfYo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/lUmYlsulfYo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/lUmYlsulfYo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/lUmYlsulfYo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 38,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "lUmYlsulfYo"
        }
      },
      "contentDetails": {
        "videoId": "lUmYlsulfYo",
        "videoPublishedAt": "2020-02-21T05:02:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "1bJxaWN5faXZTFMvEh2uPaHTUmA",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS40QTE4NjI2MzAzQjU5OTAx",
      "snippet": {
        "publishedAt": "2020-01-15T18:55:30Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Trevor Daniel - Falling (Official Music Video)",
        "description": "Stream Falling: https://smarturl.it/TDFalling\n\nFollow Trevor Daniel:\n►Instagram: https://www.instagram.com/iamtrevordaniel/\n►Twitter:https://twitter.com/Iamtrevordaniel\n►Soundcloud: https://soundcloud.com/iamtrevordaniel\n►YouTube:https://www.youtube.com/channel/UCLvAxkjgDXIrO-IDNIBgnEg\n\n[Intro]\nOh\nOoh, ooh\n\n[Chorus]\nMy last made me feel like I would never try again\nBut when I saw you, I felt something I never felt\nCome closer, give you all my love\nIf you treat me right, baby, I'll give you everything\nMy last made me feel like I would never try again\nBut when I saw you, I felt something I never felt\nCome closer, give you all my love\nIf you treat me right, baby, I'll give you everything\n\n[Verse]\nTalk to me, I need to hear you need me like I need ya\nFall for me, I wanna know you feel how I feel for you, love\nBefore you, baby, I was numb, drown out pain by pourin' up\nSpeedin' fast on the run, never wanna get caught up\nNow you're the one that I'm callin'\nSwore that I'd never forget, don't think I'm just talkin'\nI think I might go all in, no exceptions, girl, I need ya\n\n[Bridge]\nThink I'm out of my mind, 'cause I can't get enough\nOnly one that I give my time, 'cause I got eyes for ya\nMight make an exception for ya, 'cause I been feelin' ya\nThink I might be out of my mind, I think that you're the one\n\n[Chorus]\nMy last made me feel like I would never try again\nBut when I saw you, I felt something I never felt\nCome closer, give you all my love\nIf you treat me right, baby, I'll give you everything\nMy last made me feel like I would never try again\nBut when I saw you, I felt something I never felt\nCome closer, give you all my love\nIf you treat me right, baby, I'll give you everything\n\n[Outro]\nI'll never give my all again\n'Cause I'm sick of falling down\nWhen I open up and give my trust\nThey find a way to break it down\nBreak down\nTear me up inside\nWhen you break me down\n\n#falling #trevordaniel",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/L7mfjvdnPno/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/L7mfjvdnPno/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/L7mfjvdnPno/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/L7mfjvdnPno/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/L7mfjvdnPno/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 39,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "L7mfjvdnPno"
        }
      },
      "contentDetails": {
        "videoId": "L7mfjvdnPno",
        "videoPublishedAt": "2020-01-15T17:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "VxbEnnY4GcJn6E5pWFvDDt8pI_0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5GODY3RDUzODU3MUI2OTE2",
      "snippet": {
        "publishedAt": "2020-03-06T00:15:31Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "POP SMOKE - DIOR (OFFICIAL VIDEO)",
        "description": "Dior - (Official Video) by Pop Smoke \nDownload here: https://PopSmoke.lnk.to/MeetTheWooYD\n \nSubscribe to Pop Smoke’s channel:\nhttps://PopSmoke.lnk.to/Subscribe \n \nFollow Pop Smoke:\nhttps://instagram.com/realpopsmoke \nhttps://facebook.com/realpopsmoke\nhttps://twitter.com/popsmoke10\nhttps://soundcloud.com/biggavelipro\n \nCredits:\nVideo Director: JLShotThat\nVideo Producer: JLShotThat\nVideo Editor: JLShotThat\n \n#PopSmoke #Dior #RealPopSmoke\n \nMusic video by Pop Smoke performing Dior. Victor Victor Worldwide;  © 2019 Republic Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oorVWW9ywG0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oorVWW9ywG0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oorVWW9ywG0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oorVWW9ywG0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oorVWW9ywG0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 40,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oorVWW9ywG0"
        }
      },
      "contentDetails": {
        "videoId": "oorVWW9ywG0",
        "videoPublishedAt": "2019-09-03T21:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "jBUGHfLmdlRZYHRuwo5gCTJoPqI",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS40MzFENzUxMTJGNDFEMDVB",
      "snippet": {
        "publishedAt": "2019-06-18T11:01:17Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Chris Brown - No Guidance (Audio) ft. Drake",
        "description": "Official audio for \"No Guidance\" by Chris Brown\u200b featuring Drake\nChris Brown & Young Thug - \"Slime & B\" out now!: https://smarturl.it/SLIMEnB\u200b\n\nListen to Chris Brown: https://ChrisBrown.lnk.to/listenYD\u200b\n\nSubscribe to the official Chris Brown YouTube channel: https://ChrisBrown.lnk.to/subscribeYD\u200b\n\nWatch more videos by Chris Brown: https://ChrisBrown.lnk.to/listenYD/youtube\u200b\n\nFollow Chris Brown: \u200b\nFacebook: https://ChrisBrown.lnk.to/followFI \u200b\nTwitter: https://ChrisBrown.lnk.to/followTI \u200b\nInstagram: https://ChrisBrown.lnk.to/followII \u200b\nWebsite: https://ChrisBrown.lnk.to/followWI \u200b\nSpotify: https://ChrisBrown.lnk.to/followSI \u200b\n\nChorus:\nYou got it, girl, you got it (Ayy)\nYou got it, girl, you got it\n\n#ChrisBrown #Drake #NoGuidance #SLIMEnB\u200b",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oOni4BMeMp0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oOni4BMeMp0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oOni4BMeMp0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oOni4BMeMp0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oOni4BMeMp0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 41,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oOni4BMeMp0"
        }
      },
      "contentDetails": {
        "videoId": "oOni4BMeMp0",
        "videoPublishedAt": "2019-06-08T04:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-9e52MnipV8P0IwyGIt_BIJc69Q",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5FN0JGNzg3MzhFN0IyQjky",
      "snippet": {
        "publishedAt": "2020-01-14T21:27:17Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Sam Hunt - Kinfolks (Official Audio)",
        "description": "Purchase Sam Hunt’s latest music: http://umgn.us/samhuntpurchase\nStream the latest from Sam Hunt: http://umgn.us/samhuntstream\nSign up to receive email updates from Sam Hunt: http://umgn.us/samhuntupdates\n\nBest of Sam Hunt: https://goo.gl/pvKaG4\nSubscribe here: https://goo.gl/pHwRMr\n\nWebsite: http://www.samhunt.com/\nFacebook: https://www.facebook.com/SamHuntMusic\nInstagram: https://www.instagram.com/samhuntmusic\nTwitter: https://twitter.com/samhuntmusic\n\n#SamHunt #CountryMusic #Kinfolks\n\nMusic video by Sam Hunt performing Kinfolks (Audio). © 2019 UMG Recordings, Inc.\n\nhttp://vevo.ly/0k79IC",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Wk7ITw2Bl8s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Wk7ITw2Bl8s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Wk7ITw2Bl8s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Wk7ITw2Bl8s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Wk7ITw2Bl8s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 42,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Wk7ITw2Bl8s"
        }
      },
      "contentDetails": {
        "videoId": "Wk7ITw2Bl8s",
        "videoPublishedAt": "2019-10-10T21:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9dfCjXVPpuoapjiu14uXLU5TF6E",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5CQjI2QTkzRThBMTMyRDE4",
      "snippet": {
        "publishedAt": "2019-06-23T15:12:21Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Shawn Mendes, Camila Cabello - Señorita",
        "description": "Señorita: https://Senorita.lnk.to/OutNow \n\nCatch Shawn on tour this year: https://www.shawnmendesthetour.com/ \n\nStream/buy Shawn Mendes: The Album now: https://IslandRecs.lnk.to/ShawnMendes \n\nFollow Shawn Mendes: Twitter: https://twitter.com/shawnmendes Instagram: https://www.instagram.com/shawnmendes Facebook: https://www.facebook.com/ShawnMendesO... Website: https://www.shawnmendesofficial.com \n\nFollow Camila Cabello: Twitter: https://twitter.com/Camila_Cabello Instagram: https://www.instagram.com/camila_cabe... Facebook: https://www.facebook.com/camilacabello/ Website: https://www.camilacabello.com/ \n\nLyrics:\nI love it when you call me señorita\nI wish I could pretend I didn't need ya\nBut every touch is ooh la la la\nIt's true, la la la\nOoh, I should be running\nOoh, you keep me coming for you\n\nLand in Miami\nThe air was hot from summer rain\nSweat dripping off me\nBefore I even knew her name, la la la\nIt felt like ooh la la la\nYeah no\nSapphire moonlight\nWe danced for hours in the sand\nTequila sunrise\nHer body fit right in my hands, la la la\nIt felt like ooh la la la, yeah\n\nI love it when you call me señorita\nI wish I could pretend I didn't need you\nBut every touch is ooh la la la\nIt's true, la la la\nOoh, I should be running\nOoh, you know I love it when you call me señorita\nI wish it wasn't so damn hard to leave you\nBut every touch is ooh la la la\nIt's true, la la la\nOoh, I should be running\nOoh, you keep me coming for ya\n\nLocked in the hotel\nThere's just some things that never change\nYou say we're just friends\nBut friends don't know the way you taste, la la la\n'Cause you know it's been a long time coming\nDon't you let me fall\n\nOoh, when your lips undress me\nHooked on your tongue\nOoh love, your kiss is deadly\nDon't stop\n\nI love it when you call me señorita\nI wish I could pretend I didn't need you\nBut every touch is ooh la la la\nIt's true, la la la\nOoh, I should be running\nOoh, you know I love it when you call me señorita\nI wish it wasn't so damn hard to leave ya\nBut every touch is ooh la la la\nIt's true, la la la\nOoh, I should be running\nOoh, you keep me coming for you\nAll along I've been coming for you\nAnd I hope it meant something to you\nCall my name, I'll be coming for you\nComing for you, coming for you, coming for you\n\nFor you (ooh, she loves it when I come)\nFor you\n\nOoh, I should be running\nOoh, you keep me coming for you\n\n\nMusic video by Shawn Mendes, Camila Cabello performing Señorita. © 2019 Island Records, a division of UMG Recordings, Inc. \n\nhttp://vevo.ly/zZcRQm",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Pkh8UtuejGw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Pkh8UtuejGw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Pkh8UtuejGw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Pkh8UtuejGw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Pkh8UtuejGw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 43,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Pkh8UtuejGw"
        }
      },
      "contentDetails": {
        "videoId": "Pkh8UtuejGw",
        "videoPublishedAt": "2019-06-21T03:57:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Pr42Ljidcboq8OVGR0ZzJWhQLEw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BMzFEMDEwMUVCMjExN0M5",
      "snippet": {
        "publishedAt": "2020-01-14T21:21:57Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Billie Eilish - bad guy",
        "description": "Listen to \"bad guy\" from the debut album \"WHEN WE ALL FALL ASLEEP, WHERE DO WE GO?\", out now: http://smarturl.it/BILLIEALBUM\n\nFollow Billie Eilish:\nFacebook: https://www.facebook.com/billieeilish\nInstagram: https://www.instagram.com/billieeilish\nTwitter: https://twitter.com/billieeilish\nYouTube: https://www.youtube.com/BillieEilish\nEmail: http://smarturl.it/BillieEilishEmail\nStore: http://smarturl.it/BillieEilishStore\n\nMusic video by Billie Eilish performing bad guy. © 2019 Darkroom/Interscope Records\n\nhttp://vevo.ly/xedZeW",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/DyDfgMOUjCI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/DyDfgMOUjCI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/DyDfgMOUjCI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/DyDfgMOUjCI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/DyDfgMOUjCI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 44,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "DyDfgMOUjCI"
        }
      },
      "contentDetails": {
        "videoId": "DyDfgMOUjCI",
        "videoPublishedAt": "2019-03-29T16:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "vKClmJaMpfMUMjNOT9BTbLUenqc",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DMUY3RUI4QUJDRDY4NDA0",
      "snippet": {
        "publishedAt": "2020-03-06T00:16:26Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Eminem - Godzilla (Lyric Video) ft. Juice WRLD",
        "description": "From the album Music To Be Murdered By, out now: https://smarturl.it/MTBMB\n\nhttp://eminem.com\nhttp://facebook.com/eminem\nhttp://twitter.com/eminem\nhttp://instagram.com/eminem\n\nhttp://shadyrecords.com\nhttp://facebook.com/shadyrecords\nhttp://twitter.com/shadyrecords\nhttp://instagram.com/shadyrecords\n\nDirected by Kyle Cogan\nVideo by SIMIAN.LA\nAnimators: Kyle Cogan, Brad Chmielewski, Logan Hennessy, Ryan Perea, Logan Powaski\n\n\nMusic video by Eminem performing Godzilla (Lyric Video). © 2020 Marshall B. Mathers III\n\nhttp://vevo.ly/eobcXG",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3qFvCPmee8U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3qFvCPmee8U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3qFvCPmee8U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3qFvCPmee8U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3qFvCPmee8U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 45,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3qFvCPmee8U"
        }
      },
      "contentDetails": {
        "videoId": "3qFvCPmee8U",
        "videoPublishedAt": "2020-03-04T05:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "GC_K9MjhMHv_vaAMxlozBZKwhkQ",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44MURFOUQxQUU1MDJENzg3",
      "snippet": {
        "publishedAt": "2020-01-14T21:30:45Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Black Eyed Peas, J Balvin - RITMO (Bad Boys For Life)",
        "description": "\"RITMO (Bad Boys For Life)\" single available at: https://smarturl.it/RITMO\n\nFollow Black Eyed Peas online\nFacebook: https://www.facebook.com/blackeyedpeas\nTwitter: https://twitter.com/bep \nInstagram: https://www.instagram.com/bep\nMore Videos: https://www.youtube.com/playlist?list=PLgZwaNdNnwLpNLAN8Kh2DoWsD1ViSlNDN\n\nFollow Bad Boys For Life online\nOfficial Site: https://www.badboysforlife.movie/?hs308=ritmo\nWatch Trailer: https://www.youtube.com/watch?time_continue=1&v=jKCj3XuPG8M\nFacebook: https://www.facebook.com/BadBoysMovie\nTwitter: https://twitter.com/BadBoys\nInstagram: https://www.instagram.com/BadBoys/\n\nVisit Bad Boys For Life Official Site\nLink: https://www.badboysforlife.movie/?hs308=ritmo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 46,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EzKkl64rRbM"
        }
      },
      "contentDetails": {
        "videoId": "EzKkl64rRbM",
        "videoPublishedAt": "2019-10-11T04:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Ywbp8qDjJZRt4HPFS_iu-J1oMW0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DMjZENDQyQzBBQzFFNkMy",
      "snippet": {
        "publishedAt": "2020-01-14T21:29:52Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Kane Brown - Homesick (Official Video)",
        "description": "Thank you to the California Army National Guard, those who submitted their personal videos, and all of our brave men and women in the armed forces.\n\nGet “Homesick” on Kane Brown’s new album, Experiment, available now!\n\nApple Music: http://smarturl.it/kbexperiment/applemusic?IQid=yt \niTunes: http://smarturl.it/kbexperiment/itunes?IQid=yt\nSpotify: http://smarturl.it/kbexperiment/spotify?IQid=yt\nAmazon Music: http://smarturl.it/kbexperiment/az?IQid=yt\nYouTube Music: http://smarturl.it/kbexperiment/youtubemusic?IQid=yt\nPandora: http://smarturl.it/kbexperiment/pandora?IQid=yt\n\nFollow Kane Brown: Official Website: http://kanebrownmusic.com \nFacebook: https://www.facebook.com/kaneallenbrown \nInstagram: https://www.instagram.com/kanebrown_music\nTwitter: https://twitter.com/kanebrown",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ukHikH_10CA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ukHikH_10CA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ukHikH_10CA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ukHikH_10CA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ukHikH_10CA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 47,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ukHikH_10CA"
        }
      },
      "contentDetails": {
        "videoId": "ukHikH_10CA",
        "videoPublishedAt": "2018-09-20T18:24:49Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "iZjiBqPPbW49Hoh4X8HUMjLQbcw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BM0RBREQ3MUVFNzQxRkYy",
      "snippet": {
        "publishedAt": "2019-10-15T00:32:04Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Travis Scott - HIGHEST IN THE ROOM (Official Music Video)",
        "description": "HIGHEST IN THE ROOM OUT NOW  https://travisscott.lnk.to/HIGHEST\nOFFICIAL STORE: https://shop.travisscott.com/\n\nDirected by Dave Meyers and Travis Scott\nProduced by Nathan Scherrer, Randy Donaldson, Sam Lecca\nProduction company: Freenjoy\n\nTravis Scott online:\nhttps://twitter.com/trvisXX\nhttps://www.instagram.com/travisscott/\nhttps://soundcloud.com/travisscott-2\nhttps://www.facebook.com/travisscottlaflame\nhttps://travisscott.com/\n\n(c) 2019 Epic Records/Sony. With Cactus Jack.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tfSS1e3kYeo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tfSS1e3kYeo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tfSS1e3kYeo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tfSS1e3kYeo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tfSS1e3kYeo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 48,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tfSS1e3kYeo"
        }
      },
      "contentDetails": {
        "videoId": "tfSS1e3kYeo",
        "videoPublishedAt": "2019-10-04T04:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9vfHFmFpawrY11hYzP2MVByh7Us",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zOTA4MkQxMUM2NEYyNkVF",
      "snippet": {
        "publishedAt": "2019-08-13T20:27:15Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "SHAED - Trampoline (Official Video)",
        "description": "SHAED- Trampoline (Official Video) \n\nStream or download SHAED’s new EP “Melt” featuring “Trampoline” \nhttps://shaed.lnk.to/MELTEP\n\n“Trampoline”, as heard in the 2018 MacBook Air commercial. \n\nFollow:\nhttp://www.twitter.com/SHAEDband\nhttp://www.facebook.com/SHAEDband\nhttp://www.instagram.com/SHAEDband \nhttp://www.shaedband.com\n\n\nLyrics:\nI've been havin dreams\nJumpin on a trampoline\nFlippin in the air\nI never land just float there\nAs I'm looking up\nSuddenly the sky erupts\nFlames alight the trees\nSpread to fallin leaves\nNow they're right upon me\n\nWait if I'm on fire\nHow am I so deep in love?\nWhen I dream of dying\nI never feel so loved\n\nI've been having dreams\nSplashin in a summer stream\nTrip and I fall in\nI wanted it to happen\nMy body turns to ice\nCrushin weight of paradise\nSolid block of gold\nLying in the cold\nI feel right at home\n\nWait if I'm on fire\nHow am I so deep in love?\nWhen I dream of dying\nI never feel so loved\n\nDirected by Max Haben\n\nCreative Direction: Design Army \nCreative Director: Pum Lefebure \nProduction Company: Shanton & Co. \nFirst Assistant Director: Taylor Shanton\n\nDirector of Photography: Jake Colletta\n1st AC: Brandon Habuda\n2nd AC: Hadi Dimachkieh\nColorist: Jacob McKee\nGaffer: Jay Warrior\nKey Grip: Matthew Moniuszko\n\nArt Director: Heloise Condroyer\nArt Director: Gaby Hernandez\nWardrobe/Stylist: Christine de Lassus \nHair & Make-Up: Dale Johnson \nStudio & Set Design: AT YOLK\nStudio Manager: Olivia Prinzi\n\nSet Photographers: Matt Francisco & Rachel Knobloch\nProduction Assistants: Allie Enck, Tiffany Palacios, Samine Joudat, MJ Minutoli\n\nSpecial Thanks to:\nJohn Carrington\nCapital Camera\nThe Washington Source\nCaravan & Charlotte Film Rentals\nKarla Colletto Swimwear\nSaint-Germain Salon\nSidra Forman\nJulie Wolfe\n\nMusic video by SHAED performing Trampoline. © 2018 Photo Finish Records\n\nhttp://vevo.ly/ZT8tyz",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4h26oYuE2h0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4h26oYuE2h0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4h26oYuE2h0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/4h26oYuE2h0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/4h26oYuE2h0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 49,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4h26oYuE2h0"
        }
      },
      "contentDetails": {
        "videoId": "4h26oYuE2h0",
        "videoPublishedAt": "2018-12-05T21:32:31Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 100,
    "resultsPerPage": 50
  }
}

    http_version: null
  recorded_at: Tue, 12 May 2020 00:38:43 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=50&pageToken=CDIQAA&part=contentDetails,%20snippet&playlistId=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 12 May 2020 00:38:43 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "EezMLAZ3CBk9UirZ0DvOxh5LhBQ",
  "prevPageToken": "CDIQAQ",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "uG912EJ7h0M5LV7TF8517IRYIgc",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5GMEYwNkFCMzcyMjRBN0JG",
      "snippet": {
        "publishedAt": "2020-01-14T21:20:51Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Old Dominion - One Man Band",
        "description": "Listen to “One Man Band” by Old Dominion from their self-titled album, out now: http://smarturl.it/OD3?IQid=youtube\n \nApple Music: http://smarturl.it/OD3/applemusic?IQid=youtube\nSpotify: http://smarturl.it/OD3/spotify?IQid=youtube\nAmazon Music: http://smarturl.it/OD3/az?IQid=youtube\niTunes: http://smarturl.it/OD3/itunes?IQid=youtube\nYouTube Music: http://smarturl.it/OD3/youtubemusic?IQid=youtube\nPandora: http://smarturl.it/OD3/pandora?IQid=youtube  \nAll Retailers: http://smarturl.it/OD3?IQid=youtube\n  \nConnect with Old Dominion: \nInstagram: https://www.instagram.com/olddominionmusic/\nFacebook: https://www.facebook.com/olddominionband/\nTwitter: https://twitter.com/olddominion\nSubscribe to their channel: http://smarturl.it/ODYTsub?IQid=youtube\nSign up for their Newsletter: https://smarturl.it/ODNewsletter?IQid=youtube \nWebsite: https://weareolddominion.com\n \n#OldDominion #OneManBand #CountryMusic #WeAreOldDominion",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0lxA1FXOiv0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0lxA1FXOiv0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0lxA1FXOiv0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0lxA1FXOiv0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0lxA1FXOiv0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 50,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0lxA1FXOiv0"
        }
      },
      "contentDetails": {
        "videoId": "0lxA1FXOiv0",
        "videoPublishedAt": "2019-01-18T08:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "D7_RS_f6X-N9vN4IRoOJGPkx5M0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DRENBODg4MzVDQzE1RTEx",
      "snippet": {
        "publishedAt": "2020-01-14T21:22:06Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jonas Brothers - Sucker (Official Video)",
        "description": "Sucker (Official Video)\n\nGet \"Sucker\" Now: https://JonasBrothers.lnk.to/suckerYD\n\nConnect with Jonas Brothers:\nhttps://www.instagram.com/jonasbrothers\nhttps://www.facebook.com/JonasBrothers\nhttps://twitter.com/jonasbrothers\n\nVideo Director: Anthony Mandler\nVideo Producer: Richard Fenton\nVideo Editor: Taylor Ward\nfor Blackhand Cinema\n\nMusic video by Jonas Brothers performing Sucker. © 2019 Jonas Brothers Recording, Limited Liability Company, under exclusive license to Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/mR3X3n",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CnAmeh0-E-U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CnAmeh0-E-U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CnAmeh0-E-U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CnAmeh0-E-U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CnAmeh0-E-U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 51,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "CnAmeh0-E-U"
        }
      },
      "contentDetails": {
        "videoId": "CnAmeh0-E-U",
        "videoPublishedAt": "2019-03-01T04:58:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-koH0hB1bhGf3_sgOPo-nxYk-iQ",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zOTNDNTdFMDYzNkUyQTUx",
      "snippet": {
        "publishedAt": "2020-01-14T21:21:49Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Ed Sheeran & Justin Bieber - I Don't Care [Official Video]",
        "description": "Download or Stream No.6 Collaborations Project - out now: https://atlanti.cr/No6 \nTickets for the Divide tour here - http://www.edsheeran.com/tour\n\nSubscribe to Ed's channel: http://bit.ly/SubscribeToEdSheeran\n\nFollow Ed on...\nFacebook: http://www.facebook.com/EdSheeranMusic\nTwitter: http://twitter.com/edsheeran\nInstagram: http://instagram.com/teddysphotos\nOfficial Website: http://edsheeran.com\n\n#EdSheeran #JustinBieber #IDontCare",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/y83x7MgzWOA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/y83x7MgzWOA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/y83x7MgzWOA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/y83x7MgzWOA/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 52,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "y83x7MgzWOA"
        }
      },
      "contentDetails": {
        "videoId": "y83x7MgzWOA",
        "videoPublishedAt": "2019-05-17T12:58:44Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "o9Ce8Nwg96bn8UMA7j6jX6zhoco",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44MkM0OUM5QUYwRTBENUI3",
      "snippet": {
        "publishedAt": "2020-03-06T00:16:54Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "YoungBoy Never Broke Again - Red Eye [Official Audio]",
        "description": "YoungBoy Never Broke Again - Red Eye\nStill Flexin, Still Steppin OUT NOW!\nStream/Download: https://youngboy.lnk.to/StillFlexinStillSteppinID\n\nStream/download AI YOUNGBOY 2: https://youngboy.lnk.to/AIYOUNGBOY2ID\nGet the AI YOUNGBOY 2 merch capsule: https://neverbrokeagain.com\n\nSubscribe for more official content from YoungBoy NBA: \nhttps://youngboy.lnk.to/Subscribe\n\nConnect with YoungBoy Never Broke Again:\nhttp://www.youngboynba.com\nhttps://www.facebook.com/nbayoungboy\nhttps://www.twitter.com/GGYOUNGBOY\nhttps://www.instagram.com/nba_youngboy\nhttps://www.soundcloud.com/nba-youngboy\n\nThe official YouTube channel of Atlantic Records artist YoungBoy Never Broke Again. Subscribe for the latest music videos, performances, and more.\n\n#YoungBoyNeverBrokeAgain #StillFlexinStillSteppin #RedEye",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xeA7sqs0yi0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xeA7sqs0yi0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xeA7sqs0yi0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xeA7sqs0yi0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xeA7sqs0yi0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 53,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xeA7sqs0yi0"
        }
      },
      "contentDetails": {
        "videoId": "xeA7sqs0yi0",
        "videoPublishedAt": "2020-02-21T05:00:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Xhmig7CEpaSTbkIjQXSmVzZUQmk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BOUNFQUVFRDg3RDI4NjYx",
      "snippet": {
        "publishedAt": "2020-01-14T21:20:14Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jonas Brothers - Only Human (Official Video)",
        "description": "Official music video by Jonas Brothers performing “Only Human”\n\n►Get ‘the new album Happiness Begins” here: https://JonasBrothers.lnk.to/HappinessBeginsYD \n\n►Subscribe for more official content from Jonas Brothers: https://JonasBrothers.lnk.to/SubcribeYD \n\n► Tickets for the Happiness Begins tour available here: https://jonasbrothers.com/tour/ \n\n►Exclusive Merch: https://shop.jonasbrothers.com/ \n\n►Follow Jonas Brothers Online\nInstagram: https://www.instagram.com/jonasbrothers/ \nFacebook: https://www.facebook.com/JonasBrothers/ \nTwitter: https://twitter.com/jonasbrothers \nShazam: https://www.shazam.com/artist/40151787/jonas-brothers \nWebsite: https://jonasbrothers.com/ \nSubscribe to YouTube Music: https://JonasBrothers.lnk.to/HappinessBeginsYD/youtubemusic \n\n“Only Human” Lyrics: \n\nYeah, ayy\n\nI don't want this night to end\nIt’s closing time, so leave with me again (Yeah)\nYou got all my love to spend, oh\nLet's find a place where happiness begins\n\nWe gon' dance in my living room, slave to the way you move\nHurts when I’m leaving you (Ayy)\nJust dance in the living room, love with an attitude\nDrunk to an '80s groove (Ayy)\nWe gon' dance in my living room, slave to the way you move\nHurts when I'm leaving you (Ayy)\nDance in the living room, love with an attitude\nDrunk\n\nIt's only human, you know that it's real\nSo why would you fight or try to deny the way that you feel?\nOh, babe, you can't fool me, your body's got other plans\nSo stop pretending you’re shy, just come on and\nDance, dance, dance, dance, oh\n\nEarly morning la-la-light\nOnly getting up to close the blinds, oh\nI’m praying you don't change your mind\n’Cause leaving now just don't feel right\nLet's do it one more time, oh babe\n\nWe gon' dance in my living room, slave to the way you move\nHurts when I’m leaving you (Hurts when I'm leaving you)\nJust dance in the living room, love with an attitude\nDrunk to an '80s groove (Ayy)\nWe gon' dance in my living room, slave to the way you move\nHurts when I'm leaving you (Ayy)\nDance in the living room, love with an attitude\nDrunk\n\nIt's only human, you know that it's real (Know that it's real)\nSo why would you fight or try to deny the way that you feel?\n(The way that you feel)\nOh, babe, you can't fool me, your body's got other plans\nSo stop pretending you're shy, just come on and\nDance, dance, dance, dance, oh\n\nDance, oh (Woo, ayy)\nOnly human\nIt's only (-man), it's only (-man)\nOnly human\nOh yeah, yeah, yeah\nOnly human\nIt's only (-man), it's only (-man)\nOnly human\n\nVideo Director: Anthony Mandler\nVideo Producer: Kim Bradshaw\nfor Black Hand Cinema\n\n#JonasBrothers #Only Human\n\nMusic video by Jonas Brothers performing Only Human. © 2019 Jonas Brothers Recording, Limited Liability Company, under exclusive license to Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/kJ6w6x",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/kBNt8hYvn8A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/kBNt8hYvn8A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/kBNt8hYvn8A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/kBNt8hYvn8A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/kBNt8hYvn8A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 54,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "kBNt8hYvn8A"
        }
      },
      "contentDetails": {
        "videoId": "kBNt8hYvn8A",
        "videoPublishedAt": "2019-08-13T16:58:15Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ailUvALLU9luZh2QNFDWDURspqg",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yMEE5NzEwNzQ3OTc4OTND",
      "snippet": {
        "publishedAt": "2020-01-14T21:33:59Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jimmie Allen - Make Me Want To (Official Music Video)",
        "description": "\"MAKE ME WANT TO\" the second single from my debut album MERCURY LANE is out now!!! https://jimmieallen.lnk.to/mercurylane\n\nDirector - Justin Key\nAssistant Director - Jimmie Allen\nWardrobe - Cherie Kilchrist\nGlam - Sharla Pruitt Higgins\nCo-Star - Sydney Chiyoko\n\nSubscribe to Jimmie's Channel:  https://jimmieallen.lnk.to/ytchnlsubscribe\n\nConnect with Jimmie:\nhttps://www.jimmieallenmusic.com/\nhttps://www.facebook.com/jimmieallenmusic\nhttps://www.instagram.com/jimmieallen/\nhttps://twitter.com/jimmieallen/\n\n\n#MakeMeWantTo #MercuryLane #JimmieAllen",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/OVdemLamwHs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/OVdemLamwHs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/OVdemLamwHs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/OVdemLamwHs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/OVdemLamwHs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 55,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "OVdemLamwHs"
        }
      },
      "contentDetails": {
        "videoId": "OVdemLamwHs",
        "videoPublishedAt": "2019-05-23T15:03:57Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "sFu6D7dYq8jaNwQW0d2CChtTxH4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4wODI5RUI2RDQzMUM1NEYx",
      "snippet": {
        "publishedAt": "2020-03-06T00:29:32Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "A Boogie Wit da Hoodie - Numbers feat. Roddy Ricch, Gunna & London On Da Track [Official Audio]",
        "description": "A Boogie Wit da Hoodie - Numbers feat. Roddy Ricch, Gunna & London On Da Track\nStream/Download - https://ABoogie.lnk.to/Artist2ID\n\nSubscribe for more official content from A Boogie: https://ABoogie.lnk.to/subscribe\n\nFollow A Boogie\nInstagram: https://www.instagram.com/ArtistHBTL\nTwitter: https://twitter.com/ArtistHBTL\nFacebook: https://www.facebook.com/ArtistHBTL\nSoundcloud: https://soundcloud.com/a-boogie-wit-da-hoodie\nSpotify: https://open.spotify.com/artist/31W5EY0aAly4Qieq6OFu6\nWebsite: https://aboogiehbtl.com\n\nFollow HighBridge\nFacebook: https://facebook.com/HighBridgeOfficial\nTwitter: https://twitter.com/Highbridgelabel\nInstagram: https://instagram.com/highbridgethelabel\nSoundcloud: https://soundcloud.com/user-939666509\n\nThe official YouTube channel of multi-platinum rapper/singer-songwriter: Artist Dubose, known as A Boogie Wit Da Hoodie. He made waves with the breakout hit “Still Think About You” featured on his 2016 debut mixtape, ‘Artist.’ The mixtape also introduced fans to “My Shit” which went on to become RIAA certified platinum and was also listed as one of “The Best Songs of 2016” on Apple Music.\n\nA Boogie went on to release the 3x platinum “Drowning feat. Kodak Black” along with the platinum singles “Jungle” and “Timeless.” In fall 2017, A Boogie released his gold certified debut album, ‘The Bigger Artist,’ jumping into the Top 5 on Billboard’s Top 200 and #1 on Billboard’s Emerging Artists chart.\n\nHe is nominated for the 2018 BET Awards for “Best New Artist” and the release of his sophomore album, ‘Hoodie SZN’ spent two weeks as the #1 album on the Billboard 200.\n\nSubscribe for the latest official music videos, performances, behind the scenes and more from A Boogie: https://ABoogie.lnk.to/subscribe\n\n#ABoogie #ABoogieWitDaHoodie #HighBridge #AtlanticRecords #HBTL #Atlantic\n\nBest of A Boogie Wit da Hoodie ➤ https://ABoogie.lnk.to/BestofABoogie\nA Boogie Wit da Hoodie - Official Music Videos ➤ https://ABoogie.lnk.to/ABoogieMusicVideos",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/9YU4gN42fkI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/9YU4gN42fkI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/9YU4gN42fkI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/9YU4gN42fkI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/9YU4gN42fkI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 56,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "9YU4gN42fkI"
        }
      },
      "contentDetails": {
        "videoId": "9YU4gN42fkI",
        "videoPublishedAt": "2020-02-14T05:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "F9sDPb66cBKDO8rQMHf7lo3RC0I",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43MEQ0MTM5MTYxQTZCODM2",
      "snippet": {
        "publishedAt": "2020-01-14T21:30:35Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "H.E.R. - Slide (Official Video) ft. YG",
        "description": "“Slide” feat. YG Out Now! https://smarturl.it/zSlide\n\nFollow H.E.R.\nhttps://www.facebook.com/officialHERmusic/\nhttps://twitter.com/HERMusicx\nhttps://www.instagram.com/hermusicofficial \n\nFollow YG: \nhttps://www.instagram.com/yg/\nhttps://twitter.com/YG \nhttps://www.facebook.com/Yg400/\n\n#HER #Slide #YG",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SUJloylmEZM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SUJloylmEZM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SUJloylmEZM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SUJloylmEZM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SUJloylmEZM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 57,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SUJloylmEZM"
        }
      },
      "contentDetails": {
        "videoId": "SUJloylmEZM",
        "videoPublishedAt": "2019-10-17T18:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DXseacuGAkJgcnNuaWUAmf3ksmo",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS40RDkwQTYwODlGMDlFOTE3",
      "snippet": {
        "publishedAt": "2020-01-14T21:37:22Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "KAROL G, Nicki Minaj - Tusa (Official Video)",
        "description": "KAROL G, Nicki Minaj - Tusa (Official Video)\n\nStream \"Tusa\" on your favorite streaming platform: https://UMLE.lnk.to/TusaYD\n\nSubscribe to my YouTube channel here: https://www.youtube.com/channel/UCZuPJZ2kGFdlbQu1qotZaHw?sub_confirmation=1\n\nConnect with KAROL G on socials:\n\nInstagram: https://www.instagram.com/karolg/\nTwitter: https://twitter.com/karolg\nFacebook: https://facebook.com/karolg \n\nConnect with Nicki Minaj on socials:\n\nhttps://www.instagram.com/nickiminaj/ \nhttps://twitter.com/NICKIMINAJ \nhttps://www.facebook.com/nickiminaj/\n\n\nLYRICS\n\nQue pasa contigo? …. Dímelo\n\nOvy on the Drums\n\nYa no tiene excusa\n\nHoy salió con su amiga disque pa matar la tusa\n\nQue porque un hombre le pago mal\n\nEsta dura y abusa\n\nSe canso de ser buena\n\nAhora es ella quien los usa\n\nQue porque un hombre le pago mal\n\nYa no se le ve sentimental\n\nDice que por otro man no llora, No\n\nPero si le ponen la canción\n\nLe da una depresión tonta\n\nLlorando lo comienza a llamar \n\nPero el la dejo en buzón\n\nSera porque con otra esta\n\nFingiendo que a otra se puede amar \n\nPero dices todo este llanto por nada \n\nAhora soy una chica mala \n\nAnd now you kickin & screamin, a big toddler \n\nDon’t try to get your friends to come holla, holla!\n\nA yo! I used to lay low\n\nI wasn’t in the clubs, I was on my JO\n\nUntil I realized you’re an epic fail \n\nSo don’t tell your guys that I’m still your Bae Yo\n\nCause it’s a new day, I’m in a new place \n\nGettin some new D, sittin on a new face \n\nCause I know I’m the baddest bitch you ever really met\n\nYou searching for a badder bitch and you aint met her yet.\n\nA yo Tell em to back off he wanna slack off\n\nAint no more booty calls, you gotta jack off\n\nIt’s me an Karol G we let them rats talk\n\nDon’t run up on us cause they letting them Makks off\n\nPero si le ponen la canción\n\nLe da una depresión tonta\n\nLlorando lo comienza a llamar \n\nPero el la dejo en buzón\n\nSerá por que con otra esta \n\nFingiendo que a otra se puede amar \n\n\nUn shot pa la Pena profunda \n\nY seguimos gastando la funda \n\nOtro shot pa la mente \n\nPa que el recuerdo no la atormente\n\nYa no le copia nada \n\nSu ex ya no vale nada \n\nSale pa la disco y solo quiere perrear\n\nPero se confunde cuando empieza a tomar \n\nElla se cura con rumba \n\nY el amor pa la tumba \n\nTodos los hombres le zumban \n\nPero si le ponen la canción\n\nLe da una depresión tonta\n\nLlorando lo comienza a llamar \n\nPero el la dejo en buzón\n\nSera porque con otra esta\n\nFingiendo que a otra se puede amar \n\nKarol G\n\nKarol G\n\nNicki Minaj\n\nThe Queen\n\nWith a queen \n\n#KAROLG #NickiMinaj #Tusa \n\nMusic video by KAROL G, Nicki Minaj performing Tusa. © 2019 UMG Recordings, Inc.\n\nhttp://vevo.ly/8nHKtu",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tbneQDc2H3I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tbneQDc2H3I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tbneQDc2H3I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tbneQDc2H3I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tbneQDc2H3I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 58,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tbneQDc2H3I"
        }
      },
      "contentDetails": {
        "videoId": "tbneQDc2H3I",
        "videoPublishedAt": "2019-11-08T02:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ntf7qKsaL6AslSOKkmbBxJa7WTU",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45MkQ0ODBDNzk1RTE4MjFG",
      "snippet": {
        "publishedAt": "2020-03-06T00:29:59Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Billie Eilish - No Time To Die (Audio)",
        "description": "Listen to “No Time To Die”, the theme song for the 25th James Bond film, out now: http://smarturl.it/NoTimeToDie\n\nFollow Billie Eilish:\nFacebook: https://www.facebook.com/billieeilish\nInstagram: https://www.instagram.com/billieeilish\nTwitter: https://twitter.com/billieeilish\nYouTube: https://www.youtube.com/BillieEilish\nEmail: http://smarturl.it/BillieEilishEmail\nStore: http://smarturl.it/BillieEilishStore\n\nSee NO TIME TO DIE - in theaters April 2020.\n\nFollow 007:\nFacebook: https://facebook.com/jamesbond007\nInstagram: https://www.instagram.com/007/\nTwitter: https://twitter.com/007\nYouTube: https://www.youtube.com/007\n\nMusic video by Billie Eilish performing No Time To Die (Audio). © 2020 Darkroom/Interscope Records",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GB_S2qFh5lU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GB_S2qFh5lU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GB_S2qFh5lU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GB_S2qFh5lU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GB_S2qFh5lU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 59,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "GB_S2qFh5lU"
        }
      },
      "contentDetails": {
        "videoId": "GB_S2qFh5lU",
        "videoPublishedAt": "2020-02-14T00:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "JMrd8PMN-jsPW7A5elXmdKjXCYw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43REM1N0E3MTA0RTY2N0U3",
      "snippet": {
        "publishedAt": "2020-01-14T21:25:05Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Doja Cat, Tyga - Juicy (Official Video)",
        "description": "Hot Pink out now! https://smarturl.it/xHotPink \n\nFollow Doja Cat:\nhttps://www.facebook.com/DojaCat\nhttps://www.instagram.com/dojacat/\nhttp://www.dojacat.com/\n\n#HotPink #DojaCat #Juicy",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YIALlhlyqO4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YIALlhlyqO4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YIALlhlyqO4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YIALlhlyqO4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YIALlhlyqO4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 60,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YIALlhlyqO4"
        }
      },
      "contentDetails": {
        "videoId": "YIALlhlyqO4",
        "videoPublishedAt": "2019-08-15T14:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "d7KeEiymwpQYmH5DJkHbbee9K4U",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4wRDJFREI5RTM2Mjg3RkYx",
      "snippet": {
        "publishedAt": "2020-01-14T21:30:55Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Russ - BEST ON EARTH (Feat. BIA) (Official Video)",
        "description": "SHAKE THE SNOW GLOBE AVAILABLE NOW : https://Russ.lnk.to/STSGAID \n\nCheck out the official music video for “BEST ON EARTH” by Russ ft. BIA now\n \nGet this song https://Russ.lnk.to/BESTONEARTHAY\n \nSong written by Russ & BIA\nProduced by Boi-1DA & Jahaan Sweet\nMixed & mastered by Jaycen Joshua\n\nDirector: Edgar Esteves\nCo-Director: Sebastian Sdaigui\nProducer: Michael Breslauer\nProd co: Blank Square\nShoot date: October 28, 2019\nLocation: Los Angeles\n\nTwitter : @russdiemon @edgarestevess @pericoprincess\nInstagram : @russ @edgarestevess @bia\nFacebook : @russtheone",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4HvdGXANdYE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4HvdGXANdYE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4HvdGXANdYE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/4HvdGXANdYE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/4HvdGXANdYE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 61,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4HvdGXANdYE"
        }
      },
      "contentDetails": {
        "videoId": "4HvdGXANdYE",
        "videoPublishedAt": "2019-11-05T20:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PQ1-tNnRZp8UOxKRHNymXG-AfTM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5EM0QxODcwNzdGMDVDMENC",
      "snippet": {
        "publishedAt": "2020-01-14T21:28:52Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Rod Wave - Heart On Ice (Official Music Video)",
        "description": "Stream \"Pray 4 Love\" 🖤album - http://smarturl.it/pray4love\n#rodwave #pray4love\n\nStream PTSD: https://smarturl.it/rwptsd \n\nFollow Rod Wave:\n► Instagram: https://www.instagram.com/rodwave/?hl=en\n► TikTok: https://www.tiktok.com/@rodwave\n► Twitter: https://twitter.com/rodwave\n► Facebook: https://www.facebook.com/rodwave/\n► SoundCloud: https://soundcloud.com/rodwave\n► YouTube: https://smarturl.it/RWYTSub",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/deMLg4FPFhQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/deMLg4FPFhQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/deMLg4FPFhQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/deMLg4FPFhQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/deMLg4FPFhQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 62,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "deMLg4FPFhQ"
        }
      },
      "contentDetails": {
        "videoId": "deMLg4FPFhQ",
        "videoPublishedAt": "2019-05-23T03:59:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CfCzby2XY4_fW3GpgSr--_av5no",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zQjBFQzA2QTJDMTI0QkZF",
      "snippet": {
        "publishedAt": "2020-03-06T00:09:50Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "BTS (방탄소년단) 'ON' Kinetic Manifesto Film : Come Prima",
        "description": "BTS (방탄소년단) 'ON' Kinetic Manifesto Film : Come Prima\n\n\nCredits:\nDirector : YongSeok Choi (Lumpens)\nExecutive Producer / Producer : Tiffany Suh\nAssistant Director : Jihye Yoon, Guzza (Lumpens)\n  \nDirector of Photography : Hyunwoo Nam (GDW)\nFocus Puller : Sangwoo Yun\n2nd AC : Eunki Kim\n  \nB Cam Operator : Eumko\nB Cam Focus Puller : Deokjung Kim\n  \nJimmy Jib Operator : Youngjung Kim\nJimmy Jib Assistant : Hyun in Kim\n  \nCo-Production Company : FREENJOY\nExecutive Producer : Nathan Scherrer\nProduction Supervisor : Sina Pars, Joe Keenan\nProduction Coordinator : Matt Kovacs\n  \nDancers : THE LAB\nMarching Band : Blue Devils\nFPV Drone : John Schaer\n  \n1st AD : Joe Suarez\n2nd AD (Liaison) : Joseph Kim\nLocation Manager : Laura Dominguez\n  \nPerformer Hair : Marina Migliaccio\nPerformer Makeup : Noel Nichols\nPerformer Stylist : Ann-Marie Hoang\n  \nGaffer : Kyle Bryson\nKey Grip : Wadsworth Peters\nCamera PA : Robin Kim\nClient Liaison : Ran Ro\n  \nVisual Creative : Nu Kim, Sabinne Cheon, Lee Sun Kyoung, Kim Ga Eun\nPerformance Directing  : Son Sung Deuk, Lee Ga Hun, Lee Byung Eun\nArtist Management : Kim Shin Gyu, Kim Su Bin, Park Jun Tae, An Da Sol, Ahn Jong Hun, Lee Jung Min\n\n\nBigHit Entertainment. Rights are reserved selectively in the video. Unauthorized reproduction is a violation of applicable laws. Manufactured by BigHit Entertainment, Seoul, Korea.\n\n\nConnect with BTS: \nhttps://ibighit.com/bts  \nhttp://twitter.com/BTS_bighit \nhttp://twitter.com/BTS_twt \nhttp://www.facebook.com/bangtan.official \nhttps://www.youtube.com/user/BANGTANTV \nhttp://instagram.com/BTS.bighitofficial \nhttps://channels.vlive.tv/FE619 \nhttps://www.tiktok.com/@bts_official_bighit \nhttps://app.weverse.io/gpt4o \nhttps://www.weibo.com/BTSbighit \nhttps://www.weibo.com/BTSmembers \nhttp://i.youku.com/btsofficial \nhttp://btsblog.ibighit.com \n\n#BTS #방탄소년단 #ON #MAP_OF_THE_SOUL_7",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/gwMa6gpoE9I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/gwMa6gpoE9I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/gwMa6gpoE9I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/gwMa6gpoE9I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/gwMa6gpoE9I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 63,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "gwMa6gpoE9I"
        }
      },
      "contentDetails": {
        "videoId": "gwMa6gpoE9I",
        "videoPublishedAt": "2020-02-21T08:59:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gfhySoLhb2RiF5MIbbVmhUD1FR0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DM0I4OUE4MzY0NzUyMkY5",
      "snippet": {
        "publishedAt": "2020-03-06T00:30:23Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "YoungBoy Never Broke Again - Fine By Time [Official Music Video]",
        "description": "YoungBoy Never Broke Again - Fine By Time\nShot & Edited By: Karlton Banks\n\nStill Flexin Still Steppin OUT NOW!\nStream/Download: https://youngboy.lnk.to/StillFlexinStillSteppinID\n\nStream/download AI YOUNGBOY 2: https://youngboy.lnk.to/AIYOUNGBOY2ID\nGet the AI YOUNGBOY 2 merch capsule: https://neverbrokeagain.com\n\nSubscribe for more official content from YoungBoy NBA: \nhttps://youngboy.lnk.to/Subscribe\n\nConnect with YoungBoy Never Broke Again:\nhttp://www.youngboynba.com\nhttps://www.facebook.com/nbayoungboy\nhttps://www.twitter.com/GGYOUNGBOY\nhttps://www.instagram.com/nba_youngboy\nhttps://www.soundcloud.com/nba-youngboy\n\nThe official YouTube channel of Atlantic Records artist YoungBoy Never Broke Again. Subscribe for the latest music videos, performances, and more.\n\n#YoungBoyNeverBrokeAgain #StillFlexinStillSteppin #FineByTime",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3Uu0iza3GqQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3Uu0iza3GqQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3Uu0iza3GqQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3Uu0iza3GqQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3Uu0iza3GqQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 64,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3Uu0iza3GqQ"
        }
      },
      "contentDetails": {
        "videoId": "3Uu0iza3GqQ",
        "videoPublishedAt": "2020-02-11T05:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "MUr1u37ggVJIj1nF8k8b5jCwq3M",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DMTQyM0QzRENFODRCNzM0",
      "snippet": {
        "publishedAt": "2020-03-06T00:30:42Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "YoungBoy Never Broke Again - Bad Bad [Official Music Video]",
        "description": "YoungBoy Never Broke Again - Bad Bad\nStill Flexin, Still Steppin OUT NOW!\nStream/Download: https://youngboy.lnk.to/StillFlexinStillSteppinID \n\nStream/download AI YOUNGBOY 2: https://youngboy.lnk.to/AIYOUNGBOY2ID\nGet the AI YOUNGBOY 2 merch capsule: https://neverbrokeagain.com\n\nSubscribe for more official content from YoungBoy NBA: \nhttps://youngboy.lnk.to/Subscribe\n\nConnect with YoungBoy Never Broke Again:\nhttp://www.youngboynba.com\nhttps://www.facebook.com/nbayoungboy\nhttps://www.twitter.com/GGYOUNGBOY\nhttps://www.instagram.com/nba_youngboy\nhttps://www.soundcloud.com/nba-youngboy\n\nThe official YouTube channel of Atlantic Records artist YoungBoy Never Broke Again. Subscribe for the latest music videos, performances, and more.\n\n#YoungBoyNeverBrokeAgain #StillFlexinStillSteppin #BadBad",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5B1VFvd17TI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5B1VFvd17TI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5B1VFvd17TI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5B1VFvd17TI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5B1VFvd17TI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 65,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "5B1VFvd17TI"
        }
      },
      "contentDetails": {
        "videoId": "5B1VFvd17TI",
        "videoPublishedAt": "2020-02-17T19:57:53Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_cITk1m88b6YFS-jWggXjEY1dQE",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42NTNDRDFCQzAzNUVDNzlE",
      "snippet": {
        "publishedAt": "2020-03-06T00:30:53Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "YoungBoy Never Broke Again - Knocked Off [Official Audio]",
        "description": "YoungBoy Never Broke Again - Knocked Off \nPRE-SAVE STILL FLEXIN, STILL STEPPIN NOW!\n\nStream/Download: https://youngboy.lnk.to/StillFlexinStillSteppinID \n\nStream/download AI YOUNGBOY 2: https://youngboy.lnk.to/AIYOUNGBOY2ID\nGet the AI YOUNGBOY 2 merch capsule: https://neverbrokeagain.com\n\nSubscribe for more official content from YoungBoy NBA: \nhttps://youngboy.lnk.to/Subscribe\n\nConnect with YoungBoy Never Broke Again:\nhttp://www.youngboynba.com\nhttps://www.facebook.com/nbayoungboy\nhttps://www.twitter.com/GGYOUNGBOY\nhttps://www.instagram.com/nba_youngboy\nhttps://www.soundcloud.com/nba-youngboy\n\nThe official YouTube channel of Atlantic Records artist YoungBoy Never Broke Again. Subscribe for the latest music videos, performances, and more.\n\n#YoungBoyNeverBrokeAgain #StillFlexinStillSteppin  #KnockedOff",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JjZP0Ef1iaw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JjZP0Ef1iaw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JjZP0Ef1iaw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JjZP0Ef1iaw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JjZP0Ef1iaw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 66,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "JjZP0Ef1iaw"
        }
      },
      "contentDetails": {
        "videoId": "JjZP0Ef1iaw",
        "videoPublishedAt": "2020-02-11T05:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "enj_Loz1ZpUC0vp9wp4N25lTm2A",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4wNzc1MjcyNjczMTQ2OTI4",
      "snippet": {
        "publishedAt": "2020-03-06T00:31:04Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Sam Smith - To Die For",
        "description": "Sam Smith & Demi Lovato - ’Im Ready’ out now: http://samsmith.world/ImReadyID \n\nStay up to date with Sam Smith music, tours and exclusives here: http://samsmith.world/Register\n\nListen to Sam Smith’s Complete Collection here: http://samsmith.world/CatalogueID \n \nDirected by Grant Singer\nProduced by Saul Germaine and Anonymous Content\nExecutive Producer Nina Soriano\nDirector of Photography Adam Newport-Berra \nProduction Designer Sue Tebbutt\nEditor Nate Gross at Exile Edit\nColor Ricky Gausis at Moving Picture Company\nVFX Rob Trent at Shape and Light\n\nI look for you\nEvery day Every night\nI close my eyes \nFrom the fear From the light \nAs I wander down the avenue so confused\nGuess I’ll try and force a smile\n\nPink lemonade sipping on a Sunday\nCouples holding hands on a runway\nThey’re all posing in a picture frame whilst my world’s crashing down\nSolo shadow on a sidewalk \nJust want somebody to die for\nSunshine living on a perfect day whilst my world’s crashing down\nI just want somebody to die for\n\nI long for you\nJust a touch Of your hand\nYou don’t leave my mind\nLonely days I’m feeling \nLike a fool for dreaming \n\nAs I wander down the avenue so confused\nGuess I’ll try and force a smile\n\nPink lemonade sipping on a Sunday\nCouples holding hands on a runway\nThey’re all posing in a picture frame whilst my world’s crashing down\nSolo shadow on a sidewalk \nJust want somebody to die for\nSunshine living on a perfect day whilst my world’s crashing down\nI just want somebody to die for\nI just want somebody to die for \nI just want somebody to die for \n\nPink lemonade sipping on a Sunday\nCouples holding hands on a runway\nThey’re all posing in a picture frame whilst my world’s crashing down\nSolo shadow on a sidewalk \nJust want somebody to die for\nSunshine living on a perfect day while my world’s crashing down\nI just want somebody to die for\nI just want somebody to die for\n\nListen to Sam Smith's Complete Collection here: http://samsmith.world/CatalogueID \nFollow Sam Smith: \nhttp://samsmithworld.com \nhttp://facebook.com/samsmithworld \nhttp://instagram.com/samsmith\nhttp://twitter.com/samsmith\n \n#SamSmith #ToDieFor #PinkLemonade\n\nMusic video by Sam Smith performing To Die For. © 2020 Universal Music Operations Limited\n\nhttp://vevo.ly/5VUc78",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/POIK1H3L86k/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/POIK1H3L86k/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/POIK1H3L86k/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/POIK1H3L86k/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/POIK1H3L86k/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 67,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "POIK1H3L86k"
        }
      },
      "contentDetails": {
        "videoId": "POIK1H3L86k",
        "videoPublishedAt": "2020-02-14T05:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "T4PAsUrkp5cwBw9qGCyuxXovZO8",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS40RTJCRTMyNDU2RkI4MDYy",
      "snippet": {
        "publishedAt": "2020-01-14T21:33:01Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jason Aldean - We Back",
        "description": "#WeBack #9 #JasonAldean \n\nHere is album #9 but be sure and crank it to 10! – JA\nhttps://jasonaldean.lnk.to/NINE\n\nGet tickets to see Jason Aldean live in concert here: http://www.JasonAldean.com/tour\n\nSubscribe to Jason's channel: https://JasonAldean.lnk.to/ytchannel\n\nFollow Jason:\nhttp://www.jasonaldean.com\nhttps://twitter.com/Jason_aldean\nhttps://www.facebook.com/jasonaldean\nhttp://instagram.com/jasonaldean\n\nJoin the mailing list: http://www.jasonaldean.com\n\nWHERE’S THE GUY IN THE STEEL TOES COVERED IN DIRT\nJUST A ROCK N’ ROLL T-SHIRT HEADED TO WORK\nWITH PACK OF RED MAN IN HIS POCKET\nHE’S KIND OF RED MAN BUT HE’S ROCKIN’ \nWHERE’S THE BEAT UP TELE AND THE MARSHALL STACK\nLITTLE MARSHALL TUCKER AND A SIX-PACK\nWHERE’S THE GOOD OL’ BOYS AND THE GOOD OL’ DAYS\nSTRAIGHT UP GETTIN’ SIDEWAYS\n\nWE BACK, WE BACK, WE BACK IN THE SPEAKERS\nBACK IN BLACK GETTING BLASTED IN THE BLEACHERS\nIT’S PROBABLY TRUE WHAT MY MOMMA SAID\nI DO IT JUST LIKE MY DADDY DID\nWE BACK, WE BACK, WE BACK IN THE SADDLE\nBACK ON STAGE MAKING THE WHOLE PLACE RATTLE\nBACK WITH THE A-TEAM, TRAIN ON THE TRACK\nTHOUGHT WE WERE GONE BUT YOU WRONG, NOW IT’S ON\nWE BACK\n\nWHERE’S THE CHICK WEARIN’ BLUE JEANS A LITTLE TOO TIGHT\nGOT A GRIP ON A KOOZIE IF IT’S WHAT SHE LIKES \nGETTING PICKED UP IN A PICKUP AND\nKICKIN’ IT WITH GUYS LIKE US\n\nREPEAT CHORUS:\n\nSUN COMES UP AND SUN GOES DOWN, YEAH\nEVERYTHING GOOD COMES BACK AROUND\n\nREPEAT CHORUS:\n\nTHOUGHT WE WERE GONE BUT YOU WRONG, NOW IT’S ON\nWE BACK\n\nWE BACK, WE BACK, WE BACK IN THE SADDLE\nBACK ON STAGE MAKING THE WHOLE PLACE RATTLE\nBACK WITH THE A-TEAM, TRAIN ON A TRACK\nTHOUGHT WE WERE GONE BUT YOU WRONG, NOW IT’S ON\nWE BACK\n\n#NewMusic #NINE #NewSingle",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/23nlI9t4TlM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/23nlI9t4TlM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/23nlI9t4TlM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/23nlI9t4TlM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/23nlI9t4TlM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 68,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "23nlI9t4TlM"
        }
      },
      "contentDetails": {
        "videoId": "23nlI9t4TlM",
        "videoPublishedAt": "2019-10-10T10:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "YZQkHDdfj9B2mDGKU0_9XNdGzfI",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xRDIzMDAwMEQ1MEU3MjQy",
      "snippet": {
        "publishedAt": "2020-03-06T00:31:29Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Polo G, Stunna 4 Vegas & NLE Choppa feat. Mike WiLL Made-It - Go Stupid (Official Video)",
        "description": "Official video for “Go Stupid“ by Polo G featuring Stunna 4 Vegas & NLE Choppa. \n \nListen & Download “Go Stupid” out now: https://PoloG.lnk.to/GoStupid \n \nAmazon - https://PoloG.lnk.to/GoStupid/amazon \nApple Music - https://PoloG.lnk.to/GoStupid/applemusic \niTunes - https://PoloG.lnk.to/GoStupid/itunes \nSpotify - https://PoloG.lnk.to/GoStupid/spotify \nYouTube Music - https://PoloG.lnk.to/GoStupid/youtubemusic \n \nDirector: Michael Garcia\nConcept by: Polo G\nProduction Company: Hidden Pictures LLC\nExecutive Producers: Shiri Fauer , Bruno Breil\nDP: Gevorg Sarkisian\nEditor: Michael Garcia\nCommissioner: Saul Levitz\n\nSong produced by Mike WiLL Made-It & Tay Keith\n\nFollow Polo G\nFacebook - https://www.facebook.com/pologofficial/\nInstagram - https://www.instagram.com/polo.capalot/\nTwitter - https://twitter.com/Polo_Capalot\n\nFollow Stunna 4 Vegas\nFacebook - https://www.facebook.com/officialstunna4vegas/\nInstagram - https://www.instagram.com/stunna4vegas/\nTwitter - https://twitter.com/stunna4vegas_\n\nFollow NLE Choppa\nFacebook - https://www.facebook.com/NLEChoppaMusic/\nInstagram - https://www.instagram.com/choppacottonwood/\nTwitter - https://twitter.com/nlechoppa1\n\nhttps://www.polocapalot.com/\n\n#PoloG #Stunna4Vegas #NLEChoppa",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PEEoaKwwxbg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PEEoaKwwxbg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PEEoaKwwxbg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PEEoaKwwxbg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PEEoaKwwxbg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 69,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PEEoaKwwxbg"
        }
      },
      "contentDetails": {
        "videoId": "PEEoaKwwxbg",
        "videoPublishedAt": "2020-02-14T16:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "fe4gDqWe2tn52DeKOwQexESgpuo",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42MDIwQkRFRThCN0M3MDBB",
      "snippet": {
        "publishedAt": "2020-01-14T21:33:18Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Luke Bryan - What She Wants Tonight (Official Music Video)",
        "description": "Purchase Luke Bryan’s latest music: http://umgn.us/lukebryanpurchase \nStream the latest from Luke Bryan: https://strm.to/LukeBryanMusic \n\nSign up to receive email updates from Luke Bryan: http://umgn.us/lukebryanupdates \nWebsite: http://www.lukebryan.com/ \nFacebook: https://www.facebook.com/lukebryan \nInstagram: https://www.instagram.com/lukebryan \nTwitter: https://twitter.com/LukeBryanOnline\n\n© 2019 UMG Recordings, Inc.\n\n#LukeBryan #CountryMusic #Music\n\n\n© 2019 UMG Recordings, Inc.\n\n#LukeBryan #CountryMusic #Music",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/q4webhCu8bY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/q4webhCu8bY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/q4webhCu8bY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/q4webhCu8bY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/q4webhCu8bY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 70,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "q4webhCu8bY"
        }
      },
      "contentDetails": {
        "videoId": "q4webhCu8bY",
        "videoPublishedAt": "2019-10-24T21:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6ztRcP-nnf-EKgp-IS3yO6mQKNY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43OTM1MjZEOThFQjBBNTg4",
      "snippet": {
        "publishedAt": "2020-03-06T00:31:44Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Blake Shelton - Nobody But You (Duet with Gwen Stefani) (Official Music Video)",
        "description": "Blake Shelton - Nobody But You (Duet with Gwen Stefani) (Official Music Video)\n\nLYRICS:\nDon’t have to leave this town to see the world\n’Cause it’s something that I gotta do\nI don’t wanna look back in thirty years\nAnd wonder who you’re married to\nWanna say it now, wanna make it clear\nFor only you and God to hear\nWhen you love someone\nThey say you set ’em free\nBut that ain’t gonna work for me\n\nI don’t wanna live without you\nI don’t wanna even breathe\nI don’t wanna dream about you\nI wanna wake up with you next to me\nI don’t wanna go down any other road now\nI don’t wanna love nobody but you\nLookin’ in your eyes now, if I had to die now\nI don’t wanna love nobody but you\n\nAll the wasted days, all the wasted nights\nI blame it all on being young\nGot no regrets ’cause it got me here\nBut I don’t wanna waste another one\nI been thinkin’ about what I want in my life\nIt begins and ends the same\nIf I had to choose what I couldn’t lose\nThere would only be one thing\n\nI don’t wanna live without you\nI don’t wanna even breathe\nI don’t wanna dream about you\nI wanna wake up with you next to me\nI don’t wanna go down any other road now\nI don’t wanna love nobody but you\nLookin’ in your eyes now, if I had to die now\nI don’t wanna love nobody but you\n\nI wanna say it now, wanna make it clear\nFor only you and God to hear\n\nI don’t wanna live without you\nI don’t wanna even breathe\nI don’t wanna dream about you\nI wanna wake up with you next to me\nI don’t wanna go down any other road now\nI don’t wanna love nobody but you\nLookin’ in your eyes now, if I had to die now\nI don’t wanna love nobody but you\n\nI don’t wanna love nobody but you\nI don’t wanna love nobody but you\n\nCheck out the Blake Shelton Official Music Videos Playlist!\r\nhttps://bit.ly/2DlxP9P\r\n\r\nSubscribe to Blake’s channel for all the best and latest official music videos, official audio, albums, behind the scenes, live performances and more!\r\nhttps://bit.ly/2Hjua0h\r\n\r\nSee Blake on the road! \r\nhttps://www.blakeshelton.com/tour \r\n\r\nGet your Blake Shelton merchandise here!\r\nhttps://store.blakeshelton.com/ \r\n\r\nExplore Blake’s iconic music catalog! \r\nhttps://BlakeShelton.lnk.to/discography\r\n\r\nStay in touch with Blake!\r\nWebsite: http://www.blakeshelton.com/ \r\nFacebook: https://www.facebook.com/blakeshelton/ \r\nTwitter: https://twitter.com/blakeshelton \r\nInstagram: https://www.instagram.com/blakeshelton/\r\n\r\nThe official YouTube channel of Blake Shelton.\r\n \r\nWarner Music Nashville’s Blake Shelton is a country music heavyweight with over 25 #1 hit songs like “God Gave Me You”, “Boys 'Round Here”, “Who Are You When I’m Not Looking”, “Honey Bee” and “I’ll Name The Dogs”. His iconic catalog also includes 6 #1 albums such as Red River Blue, Bringing Back The Sunshine, If I’m Honest and Texoma Shore. A celebrated singer, songwriter, musician and coach of Team Blake on hit TV show “The Voice”, Blake has redefined what it means to be an entertainment superstar. And if that weren’t enough, Blake also dabbles in the finer things by way of his Ole Red bar and restaurants, inspired by hit song \"Ol' Red\", and his award-winning Smithworks vodka. With every turn, Blake continues to expand his own and country music's horizons.\r\n  \r\n#BlakeShelton #TeamBlake #GwenStefani #NobodyButYou",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4h9o0Gujuoc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4h9o0Gujuoc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4h9o0Gujuoc/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 71,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4h9o0Gujuoc"
        }
      },
      "contentDetails": {
        "videoId": "4h9o0Gujuoc",
        "videoPublishedAt": "2020-01-21T16:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gTfiCmukdGYR2iUFa1BXUuuMlvw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DNEM3M0M1QjI4MEQ0RjA0",
      "snippet": {
        "publishedAt": "2020-01-14T21:23:30Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "YNW Melly -  Suicidal [Official Video]",
        "description": "Stream \"Melly vs Melvin\" Now\nhttps://ynwmelly.ffm.to/mellyvsmelvin\n\nAnimated and Directed by Tristan Zammit - @tristious\nANIMATION ASSISTANCE AND BACKGROUNDS BY \nAlex Sarzosa\nIan Worthington\nRodrigo Silveira \nBao\nJacob Towery\n\nFollow YNW Melly:\nhttps://www.ynw4life.com/\nhttps://www.instagram.com/ynwmelly/\nhttps://www.twitter.com/ynwmelly/\nhttps://soundcloud.com/ynwmelly/\nhttps://www.facebook.com/ynwmelly772/\n\n#YNWMelly #Sucidal #MellyvsMelvin",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/9OmgXxiKV7A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/9OmgXxiKV7A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/9OmgXxiKV7A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/9OmgXxiKV7A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/9OmgXxiKV7A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 72,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "9OmgXxiKV7A"
        }
      },
      "contentDetails": {
        "videoId": "9OmgXxiKV7A",
        "videoPublishedAt": "2019-11-22T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Dz3OcoFzVQbZtwHWDzBtISUhEi0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yMTBGNUExNzQyNkQzQUQx",
      "snippet": {
        "publishedAt": "2020-03-06T00:44:41Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Morgan Wallen - Chasin' You (Dream Video)",
        "description": "Music video by Morgan Wallen performing Chasin' You (Dream Video). Big Loud Records\n\nListen to \"Chasin' You\" here: https://MorganWallen.lnk.to/IfIKnowMe\nGet updates from Morgan Wallen here: https://bit.ly/2FRP7LK\nTo see all upcoming tour dates, visit: http://morganwallen.com/\n\nInstagram: https://www.instagram.com/morganwallen/\nFacebook: https://www.facebook.com/morgancwallen/\nTwitter: https://twitter.com/MorganWallen",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iBduQb1S-4s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iBduQb1S-4s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iBduQb1S-4s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/iBduQb1S-4s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/iBduQb1S-4s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 73,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iBduQb1S-4s"
        }
      },
      "contentDetails": {
        "videoId": "iBduQb1S-4s",
        "videoPublishedAt": "2019-01-04T06:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uakOooEPf1YLlYRkJAQJGIwK_oM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xQzVBODU0QUI1MDM0Njc5",
      "snippet": {
        "publishedAt": "2020-01-14T21:35:51Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Riley Green - I Wish Grandpas Never Died (Audio)",
        "description": "Music video by Riley Green performing I Wish Grandpas Never Died (Audio). © 2019 Big Machine Label Group, LLC\n\nhttp://vevo.ly/rA8hXw",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XE9lhjfbCJo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XE9lhjfbCJo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XE9lhjfbCJo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XE9lhjfbCJo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XE9lhjfbCJo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 74,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XE9lhjfbCJo"
        }
      },
      "contentDetails": {
        "videoId": "XE9lhjfbCJo",
        "videoPublishedAt": "2019-08-02T04:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_frkpzUsbwcTrJ26D5frWgOhtUs",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5CN0E0MTc0MDRBQzk5RDYx",
      "snippet": {
        "publishedAt": "2020-01-14T21:27:00Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "JACKBOYS, Travis Scott - OUT WEST (Audio) ft. Young Thug",
        "description": "JACKBOYS OUT NOW: https://JACKBOYS.lnk.to/JACKBOYS\nOFFICIAL STORE: https://JACKBOYS.travisscott.com/\n \nhttps://instagram.com/travisscott\nhttps://instagram.com/sheckwes\nhttps://instagram.com/dontoliver\nhttps://instagram.com/ogchaseb\nhttps://instagram.com/cactusjackrecords\nhttps://travisscott.com\n \n(C) 2019 Epic Records/Sony. With Cactus Jack.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Z4reQmzuB4M/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Z4reQmzuB4M/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Z4reQmzuB4M/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Z4reQmzuB4M/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Z4reQmzuB4M/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 75,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Z4reQmzuB4M"
        }
      },
      "contentDetails": {
        "videoId": "Z4reQmzuB4M",
        "videoPublishedAt": "2019-12-27T05:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7Wc--7rMdO1Oo2nHxoULFE_zj7k",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44RThCRkQwODczOUFGNDA1",
      "snippet": {
        "publishedAt": "2020-01-14T21:34:54Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Ingrid Andress - More Hearts Than Mine (Official Music Video)",
        "description": "Ingrid Andress - More Hearts Than Mine (Official Music Video)\n\nListen to \"More Hearts Than Mine\" here: http://wmna.sh/mhtm\n\nSubscribe for more content: https://wmna.sh/ingridsubscribe\n\nLYRICS: \n\nI can’t wait to show you where I grew up\nWalk you ’round the foothills of my town\nProbably feel like you’ve been there before\nAfter hearing all the stories I’ve been telling you\nFor six months now\n\nWe’ll probably have to sleep in separate bedrooms\nPack a shirt for church because we’ll go\nI’m not trying to scare you off \nBut I just thought that we should talk a few things out\nBefore we hit the road\n\nIf I bring you home to Mama\nI guess I better warn ya\nShe falls in love a little faster than I do\nAnd my dad will check your tires\nPour you whiskey over ice\nAnd take you fishing but pretend that he don’t like you\nIf we break up, I’ll be fine\nBut you’ll be breaking more hearts than mine\n\nMy sister’s gonna ask a million questions\nSay anything she can to turn you red\nAnd when you meet my high school friends\nThey’ll buy you drinks and fill you in\nOn all the crazy nights I can’t outlive\n\nSo if I bring you home to Mama\nI guess I better warn ya\nShe falls in love a little faster than I do\nAnd my dad will check your tires\nPour you whiskey over ice\nAnd buy you dinner but pretend that he don’t like you\nIf we break up, I’ll be fine\nBut you’ll be breaking more hearts than mine\n\nIf I bring you home to Mama\nI guess I better warn ya\nShe feels every heartache I go through\nAnd if my dad sees me crying\nHe’ll pour some whiskey over ice\nAnd tell a lie and say he never really liked you\nIf we break up, I’ll be fine\nBut you’ll be breaking more hearts than mine\nYou’ll be breaking more hearts than mine\n\nWhat is an Ingrid? Learn more: http://ingridandress.com/ \n\nFollow Ingrid: \nhttps://www.instagram.com/ingridandress/\nhttps://www.facebook.com/IngridAndress/\nhttps://twitter.com/ingridandress\n\nMusic video by Ingrid Andress. ©2019 Warner Music Nashville.\n\n#IngridAndress #MoreHeartsThanMine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/j_A8Zjwr9m0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/j_A8Zjwr9m0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/j_A8Zjwr9m0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/j_A8Zjwr9m0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/j_A8Zjwr9m0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 76,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "j_A8Zjwr9m0"
        }
      },
      "contentDetails": {
        "videoId": "j_A8Zjwr9m0",
        "videoPublishedAt": "2019-04-24T16:00:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QaMMoRQyeBd9lCwir_9_bLkIesE",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4wRUQzNjUxQjQ2RUMwRkU5",
      "snippet": {
        "publishedAt": "2020-02-28T15:13:10Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lady Gaga - Stupid Love (Official Music Video)",
        "description": "“STUPID LOVE” \nTHE NEW SINGLE & VIDEO FROM LADY GAGA\nOUT NOW\nhttp://smarturl.it/StupidLove\n\n“CHROMATICA”\nTHE SIXTH ALBUM BY LADY GAGA\nOUT MAY 29\nPRE-ORDER NOW\nhttp://smarturl.it/Chromatica\n\n\nShot entirely on the iPhone 11 Pro\nDirected by Daniel Askill\n\nListen On @applemusic #ShotOniPhone: http://apple.co/StupidLoveYT\nListen on Spotify: http://smarturl.it/StupidLove/spotify\nListen on Amazon: http://smarturl.it/StupidLove/amazonunlimited\nListen on YouTube Music: http://smarturl.it/StupidLove/youtubemusic\n\nFOLLOW LADY GAGA:\nFacebook: http://gaga.lk/facebook\nInstagram: http://gaga.lk/Instagram\nSnapchat: http://gaga.lk/Snapchat\nTwitter: http://gaga.lk/Twitter\nWebsite: http://www.ladygaga.com/\nOfficial Store: http://gaga.lk/GagaStore\nEmail List: http://gaga.lk/News\n\nMusic video by Lady Gaga performing Stupid Love. © 2020 Interscope Records\n\nhttp://vevo.ly/5UJ8jb",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5L6xyaeiV58/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5L6xyaeiV58/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5L6xyaeiV58/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5L6xyaeiV58/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5L6xyaeiV58/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 77,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "5L6xyaeiV58"
        }
      },
      "contentDetails": {
        "videoId": "5L6xyaeiV58",
        "videoPublishedAt": "2020-02-28T05:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nV5Wxt0-xhOj-0govGcwKhOrnB4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xRjNCNTRBQjU4NUEwQjhC",
      "snippet": {
        "publishedAt": "2020-01-14T21:34:18Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Roddy Ricch -  Tip Toe (feat. A Boogie Wit Da Hoodie) [Official Music Video]",
        "description": "Roddy Ricch - Tip Toe (feat. A Boogie Wit Da Hoodie)\nStream/Download - https://RoddyRicch.lnk.to/TipToe\nStream/Download \"Please Excuse Me For Being Antisocial\" - https://RoddyRicch.lnk.to/PEMFBAS\n\nGet Tickets to the Anti-Social Tour - https://www.roddyricchofficial.com/tour/\n\nFollow Roddy Ricch\nhttps://www.instagram.com/roddyricch\nhttps://twitter.com/roddyricch\nhttps://soundcloud.com/roddyricch\nhttps://www.facebook.com/RoddyRicch/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TLpLKt8lJ3A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TLpLKt8lJ3A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TLpLKt8lJ3A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TLpLKt8lJ3A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TLpLKt8lJ3A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 78,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TLpLKt8lJ3A"
        }
      },
      "contentDetails": {
        "videoId": "TLpLKt8lJ3A",
        "videoPublishedAt": "2019-11-25T17:00:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "8dqsKkuA02g2pjLxV2JyyCWkY9s",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4wNzE1RkVBNkQ4OTAzOUI0",
      "snippet": {
        "publishedAt": "2020-01-14T21:36:29Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "YNW Melly - 223s ft. 9lokknine [Official Audio]",
        "description": "\"223s\" is now available on all platforms! Stream here: https://ynwmelly.ffm.to/223s\n\nArt direction by: https://instagram.com/makeitnaj\n\nListen to YNW Melly on YouTube Music:\nhttps://music.youtube.com/playlist?list=OLAK5uy_lE7n9PZcRtlSXA7ZqkvnazCClkFFultUQ\n\nStream \"We All Shine\" Now\nhttps://ffm.to/weallshine\n\nFollow YNW Melly:\nhttps://www.ynw4life.com/\nhttps://www.instagram.com/ynwmelly/\nhttps://www.twitter.com/ynwmelly/\nhttps://soundcloud.com/ynwmelly/\nhttps://www.facebook.com/ynwmelly772/\n\n#YNWMelly #9lokkine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/DYIl-OCZYA4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/DYIl-OCZYA4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/DYIl-OCZYA4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/DYIl-OCZYA4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/DYIl-OCZYA4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 79,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "DYIl-OCZYA4"
        }
      },
      "contentDetails": {
        "videoId": "DYIl-OCZYA4",
        "videoPublishedAt": "2019-08-09T04:19:16Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "XZZ_3EF-ne3Wbny97YBUZvVW884",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43NEQ4N0JFMEM2RTJBMUQ2",
      "snippet": {
        "publishedAt": "2020-01-14T21:36:36Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Roddy Ricch - Peta (feat. Meek Mill) [Official Audio]",
        "description": "Roddy Ricch - Peta (feat. Meek Mill)\nStream - https://roddyricch.lnk.to/PleaseExcuseMeForBeingAntisocial\n\nFollow Roddy Ricch\nhttps://www.instagram.com/roddyricch\nhttps://twitter.com/roddyricch\nhttps://soundcloud.com/roddyricch\nhttps://www.facebook.com/RoddyRicch/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Jd6q69hO6X4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Jd6q69hO6X4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Jd6q69hO6X4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Jd6q69hO6X4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Jd6q69hO6X4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 80,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Jd6q69hO6X4"
        }
      },
      "contentDetails": {
        "videoId": "Jd6q69hO6X4",
        "videoPublishedAt": "2019-12-06T05:05:28Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gV8OETwyX8x--XneesR-_5t6Wwk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42M0ZDNUZGRUY1NUZBODk3",
      "snippet": {
        "publishedAt": "2020-01-14T21:41:22Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Moneybagg Yo, Megan Thee Stallion - All Dat (Official Music Video)",
        "description": "Moneybagg Yo x Megan Thee Stallion's \"All Dat\" out now: http://smartURL.it/AllDat\n\nFollow Moneybagg Yo:\nhttp://www.instagram.com/moneybaggyo\nhttp://www.twitter.com/moneybaggyo\nhttp://www.facebook.com/moneybaggyo\n\n#MoneybaggYo #MeganTheeStallion #AllDat\n\nMusic video by Moneybagg Yo, Megan Thee Stallion performing All Dat. © 2019 N-Less Entertainment, LLC, distributed by Interscope Records\n\nhttp://vevo.ly/kTCebN",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FEUaB2jV_kM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FEUaB2jV_kM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FEUaB2jV_kM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FEUaB2jV_kM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FEUaB2jV_kM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 81,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "FEUaB2jV_kM"
        }
      },
      "contentDetails": {
        "videoId": "FEUaB2jV_kM",
        "videoPublishedAt": "2019-10-10T04:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uvHwKE81s1I0xcmQzY7IUQwr1yU",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BNzc3QkZBODAwOTYxMTg5",
      "snippet": {
        "publishedAt": "2020-03-06T00:48:09Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jake Owen - Homemade (Lyric)",
        "description": "Listen to Jake Owens song, \"Homemade.\" This song is available on his album, Greetings…From Jake.\n\nListen to ‘Greetings…From Jake’ here: https://jakeowen.lnk.to/GreetingsFrom...\nGet updates from Jake Owen here: https://www.jakeowen.net/mailing-list\nTo see all upcoming tour dates, visit: https://www.jakeowen.net/\n\nhttp://vevo.ly/nztttQ",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/r8XcnL33Ugs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/r8XcnL33Ugs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/r8XcnL33Ugs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/r8XcnL33Ugs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/r8XcnL33Ugs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 82,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "r8XcnL33Ugs"
        }
      },
      "contentDetails": {
        "videoId": "r8XcnL33Ugs",
        "videoPublishedAt": "2019-06-19T15:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0M185_3atbgtV2VKEMSnvI3UNCk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45Rjk5OUVEMDNDNzZDRDE0",
      "snippet": {
        "publishedAt": "2020-03-06T00:48:21Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Ashe - Moral of the Story",
        "description": "#ToAllTheBoysIveLovedBefore #MoralofTheStory\n\nStream/Download \"The Moral Of The Story\" Here: http://smarturl.it/TheMoralOfTheStory\n\nCatch me on Tour: http://smarturl.it/Ashe_OnTour\n\nStream/Download 'The Rabbit Hole' EP: http://smarturl.it/Ashe_TheRabbitHole\n\nSubscribe to my YouTube Channel: http://smarturl.it/AsheYTSubscribe\n\nFollow my Spotify Playlist: http://smarturl.it/AsheRadio\n\nWebsite: http://smarturl.it/AsheMusic\nNewsletter: http://smarturl.it/AsheSubscribe\nFacebook: https://www.facebook.com/ashemusicoff...\nInstagram: https://www.instagram.com/ashemusic/\nTwitter: https://twitter.com/AsheMusic\nSoundcloud: http://smarturl.it/AsheSoundcloud\nSpotify: http://smarturl.it/AsheSpotify\n\nTOUR DATES:\nJuly 21 - Dallas, TX - The Pavilion at Toyota Music (Supporting AJR) \nJuly 24 - Tampa, FL - MidFlorida Credit Union Amp (Supporting AJR) \nJuly 25 - Atlanta, GA - Cadence Bank Amphitheatre at Chastain Park (Supporting AJR) \nJuly 28 - Camden, NJ - BB&T Pavilion  (Supporting AJR) \nJuly 30 - Holmdel, NJ - PNC Arts Center  (Supporting AJR) \nJuly 31 - Boston, MA - Xfinity Center (Supporting AJR) \nAug 01 - Columbia, MD - Merriweather Post (Supporting AJR) \nAug 02 - Wantagh, NY - Northwell Health at Jones Beach (Supporting AJR) \nAug 04 - Toronto, ON - Echo Beach (Supporting AJR) \nAug 05 - Detroit, MI - Michigan Lottery Amphitheatre Freedom Hill (Supporting AJR) \nAug 06 - Noblesville, IN - Ruff Home Mortgage Music (Supporting AJR) \nAug 08 - Chicago, IL - Northerly Island (Supporting AJR) \nAug 09 - Minneapolis, MN - Target Center (Supporting AJR) \nAug 10 - St. Louis, MO - STL Boutique (Supporting AJR) \nAug 13 - Denver, CO - Pepsi Center (Supporting AJR) \nAug 14 - Salt Lake City, UT - USANA Amphitheater (Supporting AJR) \nAug 18 - Los Angeles, CA - Greek Theater (Supporting AJR)\nAug 20 - Mountainview, CA - Shoreline Amphitheater (Supporting AJR) \nAug 22 - Portland, OR - Sunlight Supply (Supporting AJR) \nAug 23 - Auburn, WA - White River Amphitheater (Supporting AJR) \n\nLYRICS:\nso I never really knew you \ngod I really tried to  \nblindsided  \naddicted  \nthought we could really do this  \nbut really I was foolish \nhindsight it's \nobvious  \n \ntalking with my lawyer she said where'd you find this guy  \nI said young people fall in love with the wrong people sometimes  \n \nsome mistakes get made  \nthat's alright that's okay  \nyou can think that you're in love \nwhen you're really just in pain \nsome mistakes get made  \nthats alright that's okay  \nin the end it's better for me  \nthat's the moral of the story babe \n \nit's funny how a memory  \nturns into a bad dream  \nwhen running wild  \nturns volatile \nremember how we painted our house \njust like my grandparents did \nso romantic \nbut we fought the whole time \nshould have seen the signs  \n \ntalking with my mother she said where'd you find this guy  \nI said some people fall in love with the wrong people sometimes  \n \nsome mistakes get made  \nthat's alright that's okay  \nyou can think that you're in love \nwhen you're really just in pain \nsome mistakes get made  \nthats alright that's okay  \nin the end it's better for me  \nthat's the moral of the story babe \n \nthey say \nit's better to have loved and lost  \nthan to never have loved at all  \nthat could a load of shit  \nbut I just need to tell you all \n \nsome mistakes get made  \nthat's alright that's okay  \nyou can think that you're in love \nwhen you're really just engaged \nsome mistakes get made  \nthats alright that's okay  \nin the end it's better for me  \nthat's the moral of the story babe\n\nhttp://vevo.ly/V4J9sH",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WQq98YPV8yk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WQq98YPV8yk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WQq98YPV8yk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WQq98YPV8yk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WQq98YPV8yk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 83,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "WQq98YPV8yk"
        }
      },
      "contentDetails": {
        "videoId": "WQq98YPV8yk",
        "videoPublishedAt": "2019-02-14T05:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "zPZbfJvy4yD1WJlz81jxq9dUy4s",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5CMTIzODZDRUQxN0M3OEZB",
      "snippet": {
        "publishedAt": "2020-03-06T00:48:39Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jordan Davis - Slow Dance In A Parking Lot",
        "description": "Slow Dance In A Parking Lot” appears on Jordan Davis’s album HOME STATE, available now at http://strm.to/JDHomeState. \n\nPurchase Jordan Davis’s latest music: http://umgn.us/jordandavispurchase \nStream the latest from Jordan Davis: http://umgn.us/jordandavisstream \nSign up to receive email updates from Jordan Davis at the “SIGNUP” link on: http://umgn.us/jordandavisupdates \n\nWebsite: http://www.jordandavisofficial.com/ \nFacebook: https://www.facebook.com/jordandavisofficial/\nInstagram: https://www.instagram.com/jordandavisofficial/\nTwitter: https://twitter.com/JordanCWDavis \n\nMusic video by Jordan Davis performing Slow Dance In A Parking Lot. © 2019 UMG Recordings, Inc.\n\nhttp://vevo.ly/em6g3C",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0D3V4s4zzxc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0D3V4s4zzxc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0D3V4s4zzxc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0D3V4s4zzxc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0D3V4s4zzxc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 84,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0D3V4s4zzxc"
        }
      },
      "contentDetails": {
        "videoId": "0D3V4s4zzxc",
        "videoPublishedAt": "2019-07-15T13:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "E3wfW8b2ujqwJK3hX0k7bqussGA",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS41Q0ZDMkJGNkYzN0JFRjcz",
      "snippet": {
        "publishedAt": "2020-03-06T00:48:54Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Justin Bieber - Forever (feat. Post Malone & Clever)(Audio)",
        "description": "Changes out now: https://justinbieber.lnk.to/Changes \n\nFollow Justin: \nhttp://facebook.com/justinbieber\nhttp://twitter.com/justinbieber\nhttp://instagram.com/justinbieber\n \nSign up for Justin’s newsletter: http://justinbiebermusic.com\n\n#JustinBieber #PostMalone #Clever #Forever #Changes",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ZdRfOV5XNNE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ZdRfOV5XNNE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ZdRfOV5XNNE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ZdRfOV5XNNE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ZdRfOV5XNNE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 85,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ZdRfOV5XNNE"
        }
      },
      "contentDetails": {
        "videoId": "ZdRfOV5XNNE",
        "videoPublishedAt": "2020-02-14T05:00:47Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "WoChxcU5xBenEhk6GPoVH1XiPNU",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44N0ZBMDA1REM5Q0VCMDFD",
      "snippet": {
        "publishedAt": "2020-01-14T21:40:17Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "YoungBoy Never Broke Again - Make No Sense [Official Music Video]",
        "description": "YoungBoy Never Broke Again - Make No Sense\n\nStill Flexin, Still Steppin OUT NOW!\nStream/Download: https://youngboy.lnk.to/StillFlexinStillSteppinID\n\nStream/download AI YOUNGBOY 2: https://youngboy.lnk.to/AIYOUNGBOY2ID\nGet the AI YOUNGBOY 2 merch capsule: https://neverbrokeagain.com\n\nSubscribe for more official content from YoungBoy NBA: \nhttps://youngboy.lnk.to/Subscribe\n\nConnect with YoungBoy Never Broke Again:\nhttp://www.youngboynba.com\nhttps://www.facebook.com/nbayoungboy\nhttps://www.twitter.com/GGYOUNGBOY\nhttps://www.instagram.com/nba_youngboy\nhttps://www.soundcloud.com/nba-youngboy\n\nThe official YouTube channel of Atlantic Records artist YoungBoy Never Broke Again. Subscribe for the latest music videos, performances, and more.\n\n#YoungBoyNeverBrokeAgain #MakeNoSense",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SjVqZ6c35S0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SjVqZ6c35S0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SjVqZ6c35S0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SjVqZ6c35S0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SjVqZ6c35S0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 86,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SjVqZ6c35S0"
        }
      },
      "contentDetails": {
        "videoId": "SjVqZ6c35S0",
        "videoPublishedAt": "2020-01-14T05:29:57Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "iGmQE9sl-rX4ykO4_ofnmO1nKbA",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5EQjJGNzdFNTRBM0RBRDgy",
      "snippet": {
        "publishedAt": "2020-03-06T00:49:07Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Carly Pearce, Lee Brice - I Hope You’re Happy Now",
        "description": "Music video by Carly Pearce, Lee Brice performing I Hope You’re Happy Now. © 2019 Big Machine Label Group, LLC\n\nhttp://vevo.ly/6Q14yQ",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SBBhyMYnwCw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SBBhyMYnwCw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SBBhyMYnwCw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SBBhyMYnwCw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SBBhyMYnwCw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 87,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SBBhyMYnwCw"
        }
      },
      "contentDetails": {
        "videoId": "SBBhyMYnwCw",
        "videoPublishedAt": "2019-11-20T18:30:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Si2Z-UBqkFsf7ymd-aWsUSrO49g",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5FMjEyNkNCMUVCMzJENTJC",
      "snippet": {
        "publishedAt": "2020-03-06T00:49:25Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Khalid, Disclosure - Know Your Worth (Official Audio)",
        "description": "Khalid x Disclosure - \"Know Your Worth\" out now!: https://smarturl.it/xKnowYourWorth\n\nFollow Khalid:\nhttps://www.facebook.com/thegreatkhalid\nhttps://twitter.com/thegreatkhalid\nhttps://www.instagram.com/thegr8khalid/\n\nFollow Disclosure:\nhttp://facebook.com/disclosureuk\nhttp://twitter.com/disclosure\nhttp://instagram.com/disclosure\n\n#Khalid #Disclosure #KnowYourWorth",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/M-j159LFwGw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/M-j159LFwGw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/M-j159LFwGw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/M-j159LFwGw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/M-j159LFwGw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 88,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "M-j159LFwGw"
        }
      },
      "contentDetails": {
        "videoId": "M-j159LFwGw",
        "videoPublishedAt": "2020-02-04T17:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Lgj-7UAeKkSpAzY3G42QhWBFyXQ",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45REQ3QUNCMTVFMTA3RkFE",
      "snippet": {
        "publishedAt": "2020-03-06T00:49:35Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jack Harlow - WHATS POPPIN (Dir. by @_ColeBennett_)",
        "description": "Lyrical Lemonade Presents:\n\nJack Harlow - WHATS POPPIN (Official Music Video)\n\nDirected + Edited by Cole Bennett\nSong Produced by Jetsonmade & Pooh Beatz\nDirector of Photography - Brett Arndt\nSteadicam by Renard Cheren\nEx. Produced by Sal Tarantino & Jay Tauzin\n\nStream “WHATS POPPIN” here:\nhttps://jackharlow.lnk.to/WHATSPOPPIN\n\nJack Harlow's Socials:\nhttp://instagram.com/jackharlow\nhttp://twitter.com/jackharlow\n\n--\n\nOfficial Channel of Lyrical Lemonade \n\nSubscribe for updates on music videos, interviews, performance videos, etc.\n\nLyrical Lemonade's Hot 25 Spotify Playlist:\nhttps://open.spotify.com/user/gh3vdz775oy18ah1wp9ucxsj5/playlist/5UuPeWDR2I8a8pORvW9vmr\n\nLyrical Lemonade Socials:\n\nhttp://www.twitter.com/lyricalemonade\nhttp://www.instagram.com/lyricalemonade\nhttp://www.facebook.com/lyricalemonade\nhttp://www.lyricallemonade.com\n\n\nCole Bennett Socials:\n\nhttp://www.twitter.com/_colebennett_\nhttp://www.instagram.com/_colebennett_\n\nLENNY ~ our hidden character representing happiness & good energy\nhttp://instagram.com/lenny",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/w9uWPBDHEKE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/w9uWPBDHEKE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/w9uWPBDHEKE/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 89,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "w9uWPBDHEKE"
        }
      },
      "contentDetails": {
        "videoId": "w9uWPBDHEKE",
        "videoPublishedAt": "2020-01-21T16:59:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DiQpuOH_1wiuFS-BW5Aq3ocXDbE",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5FRDc1ODBBRUQwRjFBN0I2",
      "snippet": {
        "publishedAt": "2020-03-06T00:50:17Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Brett Young - Catch",
        "description": "Music video by Brett Young performing Catch. © 2019 Big Machine Label Group, LLC\n\nhttp://vevo.ly/1R1wbv",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SBqPLI0Oskc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SBqPLI0Oskc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SBqPLI0Oskc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SBqPLI0Oskc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SBqPLI0Oskc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 90,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SBqPLI0Oskc"
        }
      },
      "contentDetails": {
        "videoId": "SBqPLI0Oskc",
        "videoPublishedAt": "2019-06-04T04:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "pymahHMgMjrBv5nqt6JD1xk92uo",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5EMDk0RkM0MjRDODBDNUE3",
      "snippet": {
        "publishedAt": "2020-03-06T00:50:28Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lewis Capaldi - Before You Go (Official Video)",
        "description": "Get the extended edition of my debut album 'Divinely Uninspired To A Hellish Extent' here: https://lewiscapaldi.lnk.to/DUTAHE_Repack \n\nListen to the “Before You Go” EP here:\nhttps://lewiscapaldi.lnk.to/BYG_Acoustic \n \nTickets: http://tickets.lewiscapaldi.com \n\nDirected by: Kyle Thrash\nProduced by: Stephen Buchanan and Krista Worby\nDP: Frank Mobilio\n\nStarring:\nSasha Lane\nCypress Hayunga\nJack Luceno\nRomey Morello\n\nProduction company: More Media \n\n\nLyrics:\nI fell by the wayside like everyone else\nI hate you, I hate you, I hate you but I was just kidding myself\nOur every moment I start to replace‘\nCos now that they’re gone all I hear are the words that I needed to say\n\nWhen you hurt under the surface\nLike troubled water running cold\nWell time can heal but this won’t\n\nSo, before you go, was there something I could have said to make your heart beat better\nIf only I’d have known you had a storm to weather\nSo, before you go, was there something I could have said to make it all stop hurting \nIt kills me how your mind can make you feel so worthless oh\nBefore you go\n\nWas never the right time whenever you called\nWent little by little by little until there was nothing at all\nOur every moment I start to replay but all I can think about is seeing that look on your face\n\nWhen you hurt under the surface\nLike troubled water running cold \nWell time can heal but this won’t \n\nSo, before you go, was there something I could have said to make your heart beat better\nIf only I’d have known you had a storm to weather\nSo, before you go, was there something I could have said to make it all stop hurting\nIt kills me how your mind can make you feel so worthless oh\nBefore you go\n\nWould we be better off by now\nIf I’d have let my walls come down\nMaybe I guess we’ll never know \nYou know, you know\n\nBefore you go, was there something I could have said to make your heart beat better\nIf only I’d have known you had a storm to weather\nSo, before you go, was there something I could have said to make it all stop hurting \nIt kills me how your mind can make you feel so worthless oh\nBefore you go\n\nMusic video by Lewis Capaldi performing Before You Go. © 2020 Universal Music GmbH\n\nhttp://vevo.ly/FxI3tT",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 91,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Jtauh8GcxBY"
        }
      },
      "contentDetails": {
        "videoId": "Jtauh8GcxBY",
        "videoPublishedAt": "2020-01-24T18:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "oX6a2s3kg2pfCQIEAjIaAowr51I",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5CQ0IxNzZGRDM3NzA2ODUw",
      "snippet": {
        "publishedAt": "2020-03-06T00:50:45Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "DaBaby Ft. Lil Baby & Moneybagg Yo - TOES [Official Audio]",
        "description": "DaBaby Ft. Lil Baby & Moneybagg Yo - TOES  \nKIRK Out Now\nListen: https://smarturl.it/KIRK\nSpotify: https://smarturl.it/KIRK/Spotify\nApple Music: https://smarturl.it/KIRK/AppleMusic\niTunes: https://smarturl.it/KIRK/iTunes\n\nConnect:\nhttps://www.instagram.com/dababy/\nhttps://twitter.com/DaBabyDaBaby\nhttps://www.facebook.com/babyjesus704/\n\n#Dababy #KIRK",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/NvEaSmftaIQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/NvEaSmftaIQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/NvEaSmftaIQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/NvEaSmftaIQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/NvEaSmftaIQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 92,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "NvEaSmftaIQ"
        }
      },
      "contentDetails": {
        "videoId": "NvEaSmftaIQ",
        "videoPublishedAt": "2019-09-27T04:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Agm7_zHlvZJBbG7b0C1KDTmPdLg",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5CMjVGMjg5MDA1MkQ0M0E2",
      "snippet": {
        "publishedAt": "2020-03-06T00:51:07Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Ed Sheeran - South of the Border (feat. Camila Cabello & Cardi B) [Official Video]",
        "description": "Download or Stream No.6 Collaborations Project - out now: https://atlanti.cr/No6 \n\nSubscribe to Ed's channel: http://bit.ly/SubscribeToEdSheeran\n\nFollow Ed on...\nFacebook: http://www.facebook.com/EdSheeranMusic\nTwitter: http://twitter.com/edsheeran\nInstagram: http://instagram.com/teddysphotos\nOfficial Website: http://edsheeran.com\n\nDirected By: Jason Koenig\nProduced By: Honna Kimmerer\nStarring: Ed Sheeran, Camila Cabello, Cardi B, Alexis Ren, Paul Karmiryan\nDirector of Photography: Justin Henning & Johnny Valencia\nProduction Company: Anonymous Content\nExec Producer: Nina Soriano\nWritten by Jason & Jenny Koenig\nCommissioner: Dan Curwin\n\nSpecialty Camera Op: Ryan Haug\nEdited by: Jason Koenig & David Franklin\nVIsual Effects: Ian Hubert\nAssistant Editor: Andrew Rutherford\n \nNY UNIT \nDirector of Photography: Justin Henning \nProduction Manger: Donald Cager\nProduction Designer: Coryander Friend\n1st Assistant Director: Arle Bordas\nGaffer: Michael Marzovilla\nStylist: Lee Ann Jarvis\nHair & Makeup: Michelle Beck\nStunt Coordinator: Jason Ng\n\nUK UNIT \nDirector of Photography: Johnny Valencia\nProducer: Shabana Mansuri\nProduction Manger: Sandy Liddle\nProduction Designer: David Hamilton \n1st Assistant Director: Tristan Hafele\nGaffer: Bernie Prentice\nStylist: Verity Lane\nHair & Makeup: Ellie Blackwell\nStunt Coordinator: Jim Dowdall\n\n#EdSheeran #CamilaCabello #CardiB",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UPOT2tgY9QQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UPOT2tgY9QQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UPOT2tgY9QQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UPOT2tgY9QQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UPOT2tgY9QQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 93,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "UPOT2tgY9QQ"
        }
      },
      "contentDetails": {
        "videoId": "UPOT2tgY9QQ",
        "videoPublishedAt": "2019-10-04T18:30:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_tivN2GL18_STXdYQ5h5mjb4sB4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5GNEI2QjE5MzFENjA0NkIy",
      "snippet": {
        "publishedAt": "2020-03-06T00:51:24Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jhené Aiko - P*$$Y FAIRY (OTW)",
        "description": "EXPLICIT LYRICS\n\nP*$$Y FAIRY (OTW)\nhttps://jheneaiko.lnk.to/PussyFairyOTW\n\n\"Chilombo\" https://jheneaiko.lnk.to/Chilombo\n\nhttps://www.instagram.com/jheneaiko/\nhttps://twitter.com/jheneaiko\nhttps://www.facebook.com/jhene.aiko.589/\n\n#PussyFairy\n#CHILOMBO\n\nVideo by:\nBrandon Parker\nhttp://www.brandonparker.LA\nhttps://www.instagram.com/brandonparker/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/wy2ujCUtCHU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/wy2ujCUtCHU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/wy2ujCUtCHU/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 94,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "wy2ujCUtCHU"
        }
      },
      "contentDetails": {
        "videoId": "wy2ujCUtCHU",
        "videoPublishedAt": "2020-01-17T23:49:25Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "JLh6rNm-1bPxXXFbpuCpmJ3vIv0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zOENBNjA4M0FBRDg3REY1",
      "snippet": {
        "publishedAt": "2020-03-06T00:52:38Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Taylor Swift - The Man (Official Video)",
        "description": "Official music video by Taylor Swift performing “The Man” – off her album ‘Lover.’ Stream/Download the album here: https://TaylorSwift.lnk.to/Loversu\n\n►Subscribe to Taylor Swift on YouTube: https://ts.lnk.to/subscribe\n\n►Exclusive Merch: https://store.taylorswift.com\n\n►Follow Taylor Swift Online\nInstagram: http://www.instagram.com/taylorswift\nFacebook: http://www.facebook.com/taylorswift\nTumblr: http://taylorswift.tumblr.com\nTwitter: http://www.twitter.com/taylorswift13\nWebsite: http://www.taylorswift.com\n\n►Follow Taylor Nation Online\nInstagram: http://www.instagram.com/taylornation\nTumblr: http://taylornation.tumblr.com\nTwitter: http://www.twitter.com/taylornation13\n\nDirector: Taylor Swift\nDP: Rodrigo Prieto\nProducer: Jil Hardin\nEditor: Chancler Haynes\nProduction Designer: Ethan Tobman\n1st AD: Joe \"Oz\" Osborne\nDavid Lebensfeld and Grant Miller for Ingenuity Studios\nProduction Company: SuperPrime Films\nExecutive Producer: Rebecca Skinner\n\n►Official ‘The Man’ Lyrics\nWritten by Taylor Swift & Joel Little\n\nI would be complex \nI would be cool\nThey’d say I played the ﬁeld before I found someone to commit to \nAnd that would be ok\nFor me to do\nEvery conquest I had made would make me more of a boss to you \nI’d be a fearless leader\nI’d be an alpha type\nWhen everyone believes ya \nWhat’s that like? I’m so sick of running as fast I can \nWondering if I’d get there quicker \nIf I was a man\nAnd I’m so sick of them coming at me again \n‘Cause if I was a man...\nThen I’d be the man \nI’d be the man\nI’d be the man They’d say I hustled \nPut in the work\nThey wouldn’t shake their heads and question how much of this I deserve \nWhat I was wearing\nIf I was rude\nCould all be separated from my good ideas and power moves\nAnd they would toast to me, oh\nLet the players play\nI’d be just like Leo\nIn Saint-Tropez Chorus What’s it like to brag about \nRaking in dollars\nAnd getting bitches and models \nAnd it’s all good if you’re bad \nAnd it’s okay if you’re mad If I was out ﬂashing my dollars \nI’d be a bitch, not a baller \nThey paint me out to be bad \nSo it’s okay that I’m mad I’m so sick of running as fast I can \nWondering if I’d get there quicker \nIf I was a man\nI’m so sick of them coming at me again \n‘Cause if I was a man...\nThen I’d be the man \nI’d be the man\nI’m so sick of running as fast I can \nWondering if I’d get there quicker \nIf I was a man\nAnd I’m so sick of them coming at me again \n‘Cause if I was a man...\nThen I’d be the man \nI’d be the man\nI’d be the man\nI’d be the man\nI’d be the man\nI’d be the man\nIf I was a man\nI’d be the man\n\n#TaylorSwift #TheMan\n\nMusic video by Taylor Swift performing The Man. © 2020 Taylor Swift",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AqAJLh9wuZ0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AqAJLh9wuZ0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AqAJLh9wuZ0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AqAJLh9wuZ0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AqAJLh9wuZ0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 95,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AqAJLh9wuZ0"
        }
      },
      "contentDetails": {
        "videoId": "AqAJLh9wuZ0",
        "videoPublishedAt": "2020-02-27T12:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ruM_VtUuMKqnCUhG0VMKtkjeY-s",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4wQzdBQjkyNzZCRjk3QkE2",
      "snippet": {
        "publishedAt": "2020-03-06T00:52:45Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Selena Gomez - Rare (Official Music Video)",
        "description": "Get Selena's new album 'Rare', out now: http://smarturl.it/RARESG\n\nDirected by: BRTHR\n\nFollow Selena:\nInstagram: https://www.instagram.com/selenagomez/\nTwitter: https://twitter.com/selenagomez\nFacebook: https://www.facebook.com/Selena\nTik Tok: https://www.tiktok.com/@selenagomez\nYouTube: https://smarturl.it/SelenaYT\n\nListen on Apple Music: https://smarturl.it/SGEssentials\nListen on Spotify: https://smarturl.it/SelenaGomezTheHitsSp\n\nGet exclusive Selena Gomez merch, available at: http://smarturl.it/SelenaStore\nSign-up to be the first to hear news from Selena: http://smarturl.it/SelenaGomez.News\nBest of Selena Gomez https://goo.gl/mgJg2s\nSelena Gomez Audio https://goo.gl/dmJYbd\n\nLYRICS\n\nBaby\nYou’ve been so distant from me lately\nAnd lately\nDon’t even wanna call you baby\n\nSaw us getting older\nBurning toast in the toaster\nMy ambitions were too high\n\nWaiting up for you upstairs\nWhy you act like I’m not there? \nBaby right now it feels like-\nIt feels like \n\nYou don’t care\nWhy don’t you recognize I’m so rare? \nAlways there\nYou don’t do the same for me,\nThat’s not fair\nI don’t have it all\nI’m not claiming to \nBut I know that I'm special, yeah\nAnd I’ll bet there’s somebody else out there\nTo tell me I’m rare\nTo make me feel rare\n\nBaby\nDon’t make me count up all the reasons to stay with you\nNo reason \nWhy you and I are not succeeding\nUh uh\n\nSaw us getting older\nBurning toast in the toaster\nMy ambitions were too high\n\nWaiting up for you upstairs\nWhy you act like I’m not there? \nBaby right now it feels like- \nIt feels like \n\nYou don’t care\nWhy don’t you recognize I’m so rare? \nAlways there\nYou don’t do the same for me that’s not fair\nI don’t have it all\nI’m not claiming to \nBut I know that I'm special, yeah\nAnd I’ll bet there’s somebody else out there\nTo tell me I’m rare\nTo make me feel rare\n\nI’m not gonna beg for you\nI’m not gonna let you make me cry\nMake me cry\n\nNot getting enough from you\nDidn’t you know I’m hard to find?\n(Hard to find)\n\nSaw us getting older\nBurning toast in the toaster\nMy ambitions were too high-\n\nWaiting up for you upstairs\nWhy you act like I’m not there? \nBaby right now it feels like, \nIt feels like \n\nYou don’t care\nWhy don’t you recognize I’m so rare?\nAlways there\nYou don’t do the same for me\nThat’s not fair\nI don’t have it all\nI’m not claiming to \nBut I know that I'm special, yeah\nAnd I’ll bet there’s somebody else out there\nTo tell me I’m rare\nTo make me feel rare\n\nMusic video by Selena Gomez performing Rare. © 2020 Interscope Records\n\nhttp://vevo.ly/BmQjaa",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ia1iuXbEaYQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ia1iuXbEaYQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ia1iuXbEaYQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ia1iuXbEaYQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ia1iuXbEaYQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 96,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ia1iuXbEaYQ"
        }
      },
      "contentDetails": {
        "videoId": "ia1iuXbEaYQ",
        "videoPublishedAt": "2020-01-10T17:00:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TmXTDOjwLG5if52ji76wdigd7oE",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BMDMwRjNBNEU3NDhBNzYz",
      "snippet": {
        "publishedAt": "2020-03-06T00:52:56Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Summer Walker - Come Thru (with Usher) [Official Music Video]",
        "description": "Summer Walker - Come Thru (with Usher)\n\"Over It\" out now: https://smarturl.it/OverItSW\n\nDirected by Lacey Duke\n\nListen: https://smarturl.it/OverItSW\nApple: https://smarturl.it/OverItSW/applemusic\nSpotify: https://smarturl.it/OverItSW/spotify\niTunes: https://smarturl.it/OverItSW/itunes\n\nSubscribe to Summer Walker - http://smarturl.it/SWSubscribe \n\nFollow Summer Walker:\nhttp://www.instagram.com/SummerWalker\nhttp://www.facebook.com/SummerWalkerOfficial\nhttp://www.twitter.com/iamSUMMERWALKER\n\n#SummerWalker #ComeThru #Usher",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BOaJloEPUCg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BOaJloEPUCg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BOaJloEPUCg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BOaJloEPUCg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BOaJloEPUCg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 97,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BOaJloEPUCg"
        }
      },
      "contentDetails": {
        "videoId": "BOaJloEPUCg",
        "videoPublishedAt": "2020-01-07T16:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "JVIe4xhyD9qF5zbg-1_T-e_FT_o",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5GQTY3QjkxOTlCQzU4NTlC",
      "snippet": {
        "publishedAt": "2020-03-06T00:53:43Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "SUGAR - BROCKHAMPTON",
        "description": "Sugar’ performed by BROCKHAMPTON & Ryan Beatty\nAvailable now on GINGER: https://smarturl.it/xGINGER\n\ndirected by kevin abstract\nshot by ashlan grey\nedit / color + iphone shots by hk\ndit - kevin doann\nwardrobe styling - nick lenzini & weston freas\n\n \nhttp://twitter.com/brckhmptn\nhttp://instagram.com/brckhmptn\nhttp://brckhmptn.com\n\n#BROCKHAMPTON #SUGAR #GINGER",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sZd-t5-I5uA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sZd-t5-I5uA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sZd-t5-I5uA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sZd-t5-I5uA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sZd-t5-I5uA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 98,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sZd-t5-I5uA"
        }
      },
      "contentDetails": {
        "videoId": "sZd-t5-I5uA",
        "videoPublishedAt": "2020-02-17T19:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TaO5PC4w_7oaRBf3kRxxqI11jVY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45MEE2MTY2RTFCOTNEODky",
      "snippet": {
        "publishedAt": "2020-03-06T00:53:17Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Dustin Lynch - Ridin' Roads (Official Music Video)",
        "description": "Aimlessly wandering down a lesser known backroad has never looked more appealing thanks to Dustin Lynch’s video for the laidback single “Ridin’ Roads\".\n\nThe new album is titled TULLAHOMA for one reason - It’s a tip of the hat to my hometown.  Every song on this album is something I’ve lived. \n\nGet it TODAY! https://dustinlynch.lnk.to/tullahoma\n\nSubscribe to Dustin's Channel: https://dustinlynch.lnk.to/ytchnlsubscribe\n \nConnect with Dustin:\nSite: http://dustinlynchmusic.com\nFacebook: http://www.facebook.com/dustinlynchmusic\nInstagram: https://www.instagram.com/dustinlynchmusic\nTwitter: https://twitter.com/dustinlynch\nSpotify: https://dustinlynch.lnk.to/spotify\nShazam: http://shz.am/dustin-lynch\n\nJoin the newsletter, click SIGN UP here: https://dustinlynch.lnk.to/mailinglist\n\nLYRICS:\nThis town ain't got no night club\r\n\nWe don't need the neon lights\r\n\nGirl I got that '87 gassed up\r\n30 early out there in your drive\r\nGot you a bullet in a koozie keep it ice cold\r\nYou take a sip 'fore we get gone\r\nLookin' at you with your hand out the window\r\nI'm turning right while you're turnin' me on\r\n \r\nCHORUS\r\nRidin' roads that don't nobody go down\r\nLittle trip thru the country side\r\nThese 38's makin' them world go 'round\r\nI hit a curve just to make you slide\r\nThe only light is a flashin' yellow\r\nThe only thing that I want is your kiss\r\nI'm lovin' nothin' to do with you baby\r\nJust ridin' roads on a night like this\r\n\r\nRidin' roads \r\n\r\nOut there where the moon hits the water\r\nOut there where your lips hit mine\r\nI don't know where we are \r\n'Cause somebody stole the streets signs\r\nI'ma take my sweet time\r\n'Cause I could go on forever\r\nWith you there ridin' shotgun yeah\r\nAll our friends are probably makin' plans baby\r\nYeah but we already got one...we'll be\r\n\r\nREPEAT CHORUS\r\nJust ridin' roads on a night like this\r\n\r\nI got one hand on the wheel\r\nAnd I got the other tryin' to cross the line\r\nYeah the way you make me feel\r\nI wanna keep it rollin' ‘til the sunrise\r\n\r\nREPEAT CHORUS\r\nJust ridin' roads on a night like this\r\n\n#RidinRoads #DustinLynch #Tullahoma",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/hK4R6wpG9uI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/hK4R6wpG9uI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/hK4R6wpG9uI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/hK4R6wpG9uI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/hK4R6wpG9uI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 99,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "hK4R6wpG9uI"
        }
      },
      "contentDetails": {
        "videoId": "hK4R6wpG9uI",
        "videoPublishedAt": "2019-05-03T13:53:15Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 100,
    "resultsPerPage": 50
  }
}

    http_version: null
  recorded_at: Tue, 12 May 2020 00:38:43 GMT
recorded_with: VCR 5.1.0
